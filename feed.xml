<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-27T23:42:58+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Programming Elixir</title><link href="https://fmcgeough.github.io/blog/2016/programming-elixir/" rel="alternate" type="text/html" title="Programming Elixir"/><published>2016-07-17T08:53:13+00:00</published><updated>2016-07-17T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/programming-elixir</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/programming-elixir/"><![CDATA[<p>For learning Elixir I started with the ubiquitous Dave Thomas and “Programming Elixir”. I’m bouncing back and forth between reading through that book and watching the ConFreaks videos of the last two year’s Elixir conferences (and thinking about whether I want to pay to go to this year’s conference which is in Orlando).</p> <p>“Programming Elixir” has been pretty good. The exercises at the end of the chapter cover the concepts discussed. I was stumped for a couple of minutes looking at “define a function head with the defaults”. But after working through the example it made sense and resulted in code that seemed to make sense to me.</p> <p>The thing is in Elixir (and Erlang) the function head (declaration) is a separate entity from the function body. Which is an odd thing to wrap your head around if you come from almost any other language background. In the case of the example with default parameters in the book you can do this :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    defmodule DefaultParams1 do
      def func(p1, p2 \\ 123)

      def func(p1, 99) do
        IO.puts "you said 99"
      end

      def func(p1, p2) do
        IO.inspect [p1, p2]
      end
    end
</code></pre></div></div> <p>If you call DefaultParams1.func(1) then the match will be on that first func without a body. The second parameter is added as a default and the search for a match continues. Obviously a contrived example for the book but I do like the approach of separating the definition of what we might want to supply as defaults from the rest of the code.</p> <p>Just beginning the journey into Elixir but its very interesting so far.</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Learning Elixir]]></summary></entry><entry><title type="html">Learning Elixir and Phoenix</title><link href="https://fmcgeough.github.io/blog/2016/elixir-phoenix-ecto/" rel="alternate" type="text/html" title="Learning Elixir and Phoenix"/><published>2016-07-16T08:53:13+00:00</published><updated>2016-07-16T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/elixir-phoenix-ecto</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/elixir-phoenix-ecto/"><![CDATA[<p>Wow. This is the first time in a while that I’ve been excited about a new programming language. Where learning the language wasn’t just a chore to stay employed. Going through the documentation, code examples and a couple of recent books. Such a fundamentally different way of looking at solving problems. Using <a href="http://confreaks.tv/events/elixirconf2014">Confreaks.tv</a>, <a href="http://safaribooksonline.com">Safari Books online</a>, and the excellent documentation. Can’t wait to build something for real!</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Learning Elixir]]></summary></entry><entry><title type="html">Upgrade to 9.5 Postgresql on OS X</title><link href="https://fmcgeough.github.io/blog/2016/upgrade_osx_postgres/" rel="alternate" type="text/html" title="Upgrade to 9.5 Postgresql on OS X"/><published>2016-05-17T08:53:13+00:00</published><updated>2016-05-17T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/upgrade_osx_postgres</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/upgrade_osx_postgres/"><![CDATA[<p>There is a really nice tutorial on upgrading your local Postgresql on OS X at <a href="https://kkob.us/2016/01/09/homebrew-and-postgresql-9-5/">Keita’s Blog</a>. Uses brew. Straightforward.</p>]]></content><author><name></name></author><category term="postgresq1"/><category term="postgresq1"/><category term="osx"/><summary type="html"><![CDATA[Postgresql install tutorial]]></summary></entry><entry><title type="html">Ruby Resources</title><link href="https://fmcgeough.github.io/blog/2016/ruby-resources/" rel="alternate" type="text/html" title="Ruby Resources"/><published>2016-02-01T08:53:13+00:00</published><updated>2016-02-01T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/ruby-resources</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/ruby-resources/"><![CDATA[<p>One of the amazing things about Ruby is the Ruby community and the spirit of sharing that I encounter over and over again when interacting with people in the Ruby community. There are many fine books that can help you learn Ruby but there are also great online resources.</p> <p>Once you feel like you have a basic understanding of the language I’d recommend checking out some of the following resources.</p> <ul> <li> <p><a href="http://http://www.rubytapas.com">rubytapas</a> - these are wonderful short screencasts that teach some fundamental feature of Ruby that you probably haven’t encountered before. The explanations are clear. The examples are right on-point. There are a slew of free videos to dive into and its also well worth signing up for $9 a month. A bargain.</p> </li> <li> <p><a href="https://devchat.tv/ruby-rogues/">Ruby Rogues Podcast</a> - a ton of past episodes to go through each containing some nugget of Ruby wisdom that will serve you well. Clear your weekend schedule and go through all of them.</p> </li> <li> <p><a href="http://confreaks.tv/conferences/railsconf">Confreaks.TV and Rails Conference Talks</a> - if you are a Ruby programmer you are going to deal with Rails. Either joyfully or reluctantly but its impossible to avoid. Go to Confreaks.TV. Watch the past Rails Conference talks. Awesome learning experience.</p> </li> <li> <p><a href="http://5by5.tv/rubyonrails">The Ruby on Rails podcast</a> - more rails but much more than that. Great discussions. I’m really not clear on how these people do the podcasts. Not my talent at all. But I sure appreciate folks that can do it well and this is a great example of a podcast worth listening to.</p> </li> </ul> <p>The other thing that I’d say is that its really important to attend the Ruby conferences and Rails conferences. There are lots of contacts you can make and new techniques you can learn all packed into 3 days at some very nice locations. Definitely try and swing that after absorbing as much online material as you can find. Good luck!</p>]]></content><author><name></name></author><category term="ruby"/><category term="ruby"/><summary type="html"><![CDATA[Information on Ruby Resources]]></summary></entry><entry><title type="html">Using Git From Inside Atom</title><link href="https://fmcgeough.github.io/blog/2015/using-git-from-inside-atom/" rel="alternate" type="text/html" title="Using Git From Inside Atom"/><published>2015-11-22T08:53:13+00:00</published><updated>2015-11-22T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2015/using-git-from-inside-atom</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2015/using-git-from-inside-atom/"><![CDATA[<p>I continue to use and be impressed with the <a href="https://atom.io/">Atom editor</a> from the lovely people at <a href="https://github.com/">github</a>. A modern text editor with a built-in packaging system to allow adding in, well, add-ins that provide cool and needed functionality. One of the new ones that I’m using a lot is <a href="https://atom.io/packages/git-plus">git-plus</a>.</p> <p>git-plus allows me to work within the text editor and perform git commands without dropping to the command shell. This is a small thing for me. I’m quite comfortable with using git from the command line but it actually does make my flow better while coding in Ruby.</p> <p>My Environment and Install</p> <ul> <li>OS X 10.10.5</li> <li>Atom 1.2.2</li> <li>git-plus 5.6.5</li> </ul> <p>I installed git-plus from the command line using the Atom package manager utility apm.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    apm install git-plus
</code></pre></div></div> <p>Then I restarted Atom from the command line to use the new package. There were no issues with the package install or initial usage.</p> <p>There are a number of settings in git-plus to allow customization. You can find them under Preferences/Packages in Atom. I didn’t modify any of the defaults but as noted on the Package Settings page you should : “Make sure your gitconfig file is configurated or at least your user.email and user.name variables are initialized”. The web page for the git-plus package has a good description of the available configuration options.</p> <p>To bring up the git-plus functionality you use :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Cmd-Shift-H on MacOS
</code></pre></div></div> <p>This brings up a searchable list of git commands (with “Add” at the top). As you type the list narrows. Hit Enter to select the git command. On a “Commit” a text panel appears on the right side of the Atom environment. Add your commit message and save it. The panel disappears and a notification pops up to let you know your changes are committed. The notification auto-closes after a couple seconds.</p> <h2 id="why-use-git-from-within-a-tool">Why Use Git from Within a Tool?</h2> <p>I sort of struggle with this myself. I work with a lot of Java engineers who tend to live within their IDE (Eclipse or IntelliJ) and are actually quite at sea when trying to use git from the command line. That’s not a good thing. If you are using git you absolutely need to be familiar with common use cases from the command line. git was developed as a command line program. You need to live in its environment or ultimately bad things will occur and you’ll have no clue how to address them.</p> <p>If I’m programming in Java I appreciate the help that a good IDE can provide for the language - especially in terms of intelligent search and refactoring. However, for Ruby I’ve never really embraced an IDE and have continued to rely on a text editor, and I’ve grown to really like the Atom editor for Ruby.</p> <p>The reason I’ve grown to also like the git-plus package in Atom is that it doesn’t tend to interrupt my flow when I’m working on Ruby code and accompanying unit tests. I can quickly check in work with less of an interruption to my thought processes. I didn’t think this would be so and I was ready to uninstall git-plus before I even installed it for that reason but I was surprised to find that it actually did seem to make me more productive or at least it felt that way.</p> <p>Its another well-done package for the Atom editor and I’d definitely recommend trying it to see if it works well for you.</p>]]></content><author><name></name></author><category term="ruby"/><category term="ruby"/><summary type="html"><![CDATA[Information on using git in the Atom editor]]></summary></entry><entry><title type="html">Simple Error in Atom with Rubocop</title><link href="https://fmcgeough.github.io/blog/2015/simple-error-in-atom-with-rubocop/" rel="alternate" type="text/html" title="Simple Error in Atom with Rubocop"/><published>2015-11-15T08:53:13+00:00</published><updated>2015-11-15T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2015/simple-error-in-atom-with-rubocop</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2015/simple-error-in-atom-with-rubocop/"><![CDATA[<p>If you keep getting popups errors in the github <a href="https://atom.io">Atom text editor</a> when using <a href="https://atom.io/packages/linter-rubocop">Rubocop</a> then maybe its this issue I just had. While working on a gem complaining about a missing rubocop version or in general giving odd and annoying errors you should try and remove your Gemfile.lock file in the root of your gem folder and run <a href="http://bundler.io/v1.3/rationale.html">bundle</a> install again. It could be that the Gemfile.lock is pointing at a rubocop you no longer have installed. I was frustrated for several minutes about these errors when I brought up an older gem to test out Rubocop integration with Atom until I realized that I probably had done a bundle install way back when I wrote this gem and created the Gemfile.lock file which the Rubocop was trying to respect.</p>]]></content><author><name></name></author><category term="ruby"/><category term="ruby"/><summary type="html"><![CDATA[Information on running rubocop in the Atom editor]]></summary></entry><entry><title type="html">Using Rubocop in Atom</title><link href="https://fmcgeough.github.io/blog/2015/using-rubocop-in-atom/" rel="alternate" type="text/html" title="Using Rubocop in Atom"/><published>2015-11-14T08:53:13+00:00</published><updated>2015-11-14T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2015/using-rubocop-in-atom</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2015/using-rubocop-in-atom/"><![CDATA[<p>If you haven’t checked out the <a href="https://atom.io">Atom editor</a> from the lovely people at github then its worth your while. A full-featured and more and more popular editor with a growing set of packages that can be added in to provide some cool functionality. Since I’m doing more and more Ruby programming I wanted to install the <a href="https://github.com/bbatsov/rubocop">rubocop</a> lint functionality within the Atom editor. This is provided by the <a href="https://atom.io/packages/linter-rubocop">linter-rubocop</a> Atom package. So this blog post might be interesting if you code in Ruby and are open to trying a new text editor.</p> <h2 id="whats-rubocop">What’s Rubocop?</h2> <p>Rubocop is a static code analysis tool that tries to report on any cases where your code conflicts with the Ruby community style guide. I find it very valuable to try and keep my code clean and easier to maintain. It is a source of tremendous exasperation when you first use it (at least that has been my experience when getting people to use it) because it will spit out dozens (or hundreds) of problems with your code. I find working through these issues is very valuable though and definitely recommend running this tool on your own projects.</p> <h2 id="installation">Installation</h2> <p>Assuming you just went through the standard Atom installer from their web site you now have a command line utility called apm. This allows you to install Atom packages. To get the rubocop to work in Atom you’ll need rubocop, linter (the base lint package that is used by the linter-rubocop package, and linter-rubocop. The following steps should get you working :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem install rubocop
apm install linter
apm install linter-rubocop
which rubocop
</code></pre></div></div> <p>The final command will tell you your path to rubocop. You can paste this into the configuration for linter-rubocop. Now that you have these installed you should start the Atom editor from the command line. Now as you type your Ruby code you’ll see information in the bottom panel of your editor screen (that hopefully says “No Issues”).</p> <h2 id="review">Review</h2> <p>I didn’t have any issues installing the package using the steps above (I did already have rubocop installed). I run the Atom editor on Mac OS X. The versions I used are :</p> <ul> <li>Atom 1.2.0</li> <li>rubocop 0.34.2</li> <li>linter-rubocop 0.4.4</li> <li>linter 1.11.1</li> </ul> <p>I did see an error when starting Atom using Quicksilver :</p> <p>There are a variety of posts about this on the web. It doesn’t appear when starting Atom from the command line (which is how I ordinarily use the tool).</p>]]></content><author><name></name></author><category term="ruby"/><category term="ruby"/><summary type="html"><![CDATA[Information on running rubocop in the Atom editor]]></summary></entry><entry><title type="html">Postgresql - Lag and Windowing Function</title><link href="https://fmcgeough.github.io/blog/2015/postgresql-lag-and-windowing-function/" rel="alternate" type="text/html" title="Postgresql - Lag and Windowing Function"/><published>2015-05-07T22:03:34+00:00</published><updated>2015-05-07T22:03:34+00:00</updated><id>https://fmcgeough.github.io/blog/2015/postgresql-lag-and-windowing-function</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2015/postgresql-lag-and-windowing-function/"><![CDATA[<p>Lag came in handy again.</p> <p>Problem: customer stored their account info in an account_data table and recorded history of the changes to this table in an account_history table along with a new column dt_account_history_updated. Groovy. The way the account_history table was written was :</p> <ul> <li>on insert - write the values to account_history</li> <li>on update - write only the old values to account_history, but only for the column values that changes (using NULLIF function).</li> <li>on delete - write values to account_history. hmmm. so what you are looking at in account_history is the previous values. not the current ones (for update anyway). Got it?</li> </ul> <p>So… each customer has a status associated with it (ACTIVE, CANCELLED, SUSPENDED, etc). The question is how could you report when a customer was in that status if the account_history has only the previous value? Well. actually pretty easy using LAG.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>with set_of_data as
(
SELECT ah.account_id, ah.dt_last_history_updated as dt_info, ah.status
FROM account_history ah
WHERE ah.status IS NOT NULL
UNION
SELECT acct.account_id, now(), acct.status
FROM account_data acct
),
build_data_set as
(
SELECT account_id, dt_info, status, LAG(dt_info, 1) OVER (PARTITION BY account_id ORDER BY dt_info ASC) as lag
FROM set_of_data
)
SELECT account_id,
status,
timezone('GMT'::text, lag) as dt_status
FROM build_data_set
WHERE lag IS NOT NULL
ORDER BY 1, 3;
</code></pre></div></div> <p>tada! We get all the data from the history table where status has changed (since we only write on updates when column value changes) and we get current state from live table. Then we select out of this set by use a LAG 1 and order by the dt_info column for each account_id. This ends up putting the previous dt_info column in the row after it historically - which is what tells us exactly when we went to that state.</p> <p>Reference : <a href="http://www.postgresql.org/docs/9.3/static/functions-window.html">Postgresql 9.3 Window Functions</a></p>]]></content><author><name></name></author><category term="SQL"/><summary type="html"><![CDATA[Using Lag and window operations with Postgresql]]></summary></entry><entry><title type="html">More Atom and Ruby - Using ruby-test</title><link href="https://fmcgeough.github.io/blog/2015/more-atom-and-ruby-using-ruby-test/" rel="alternate" type="text/html" title="More Atom and Ruby - Using ruby-test"/><published>2015-01-14T08:53:13+00:00</published><updated>2015-01-14T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2015/more-atom-and-ruby-using-ruby-test</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2015/more-atom-and-ruby-using-ruby-test/"><![CDATA[<p>I continue to try and get <a href="https://atom.io/">Atom</a> setup in the most productive way - especially for Ruby programming. I continue to be impressed with the tool. For unit testing I favor <a href="https://github.com/seattlerb/minitest">MiniTest</a> and I wanted a way to run tests from inside Atom without leaving the editor environment.</p> <p>After trying out of a couple of packages I settled on <a href="https://atom.io/packages/ruby-test">ruby-test</a>.</p> <h2 id="installation">Installation</h2> <p>Installation of ruby-test is straightforward. I used the command line Atom install tool <code class="language-plaintext highlighter-rouge">apm</code>. The following worked for me :</p> <p>apm install ruby-test</p> <p>After installing the ruby-test package restart Atom by using <code class="language-plaintext highlighter-rouge">atom</code> from the command line and then configure the testing package by going to Atom/Preferences/Packages and then searching for ruby-test. You’ll want to set your “Test Framework” as explained in the configuration panel.</p> <p>The tool worked seamlessly for me after doing this.</p> <h2 id="review">Review</h2> <p>Install was straightforward and the tool within <a href="https://atom.io/">Atom</a> worked seamlessly for me. My environment is :</p> <ul> <li>OS X 10.10.5 (Yosemite)</li> <li>Atom 1.2.0</li> <li>ruby-test 0.9.16</li> </ul> <p>The tool pops up a panel when running tests and shows the MiniTest output just like you’d see from the command line. The panel has a close button (unlike some of the other unit test packages I tried out in Atom) so you can close the unit test info when you no longer need it or want additional screen real estate. The panel that pops up includes a link in the left hand corner to “Settings” that brings up you to the ruby-test Settings page.</p> <p>I generally run a single test after I finish writing it by placing my cursor on the test and hitting command-control-R and then run all the tests in a Ruby test file by hitting command-control-T. Both of these approaches worked without issue.</p>]]></content><author><name></name></author><category term="Ruby"/><category term="Ruby"/><summary type="html"><![CDATA[Using Ruby with the Atom editor]]></summary></entry><entry><title type="html">George Washington and Torture</title><link href="https://fmcgeough.github.io/blog/2014/george-washington-and-torture/" rel="alternate" type="text/html" title="George Washington and Torture"/><published>2014-12-17T01:00:00+00:00</published><updated>2014-12-17T01:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2014/george-washington-and-torture</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2014/george-washington-and-torture/"><![CDATA[<p>“Should any American soldier be so base and infamous as to injure any [prisoner]. . . I do most earnestly enjoin you to bring him to such severe and exemplary punishment as the enormity of the crime may require. Should it extend to death itself, it will not be disproportional to its guilt at such a time and in such a cause… for by such conduct they bring shame, disgrace and ruin to themselves and their country.” – George Washington</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Historical Quotes]]></summary></entry></feed>