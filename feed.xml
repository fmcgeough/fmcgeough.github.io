<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-05T15:08:35+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Elixir and Ecto’s telemetry events</title><link href="https://fmcgeough.github.io/blog/2024/ecto-telemetry/" rel="alternate" type="text/html" title="Elixir and Ecto’s telemetry events"/><published>2024-09-02T12:00:00+00:00</published><updated>2024-09-02T12:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/ecto-telemetry</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/ecto-telemetry/"><![CDATA[<blockquote> <p>Telemetry is a lightweight library for dynamic dispatching of events, with a focus on metrics and instrumentation. Any Erlang or Elixir library can use telemetry to emit events. Application code and other libraries can then hook into those events and run custom handlers.</p> </blockquote> <p>I created a simple sample Elixir project to demonstrate how to use Ecto’s telemetry events. It’s available in <a href="https://github.com/fmcgeough/demo_telemetry">github</a>.</p> <p>The project shows how to:</p> <ul> <li>use telemetry_prefix on your repo to change the name of the event</li> <li>use telemetry_prefix with your queries to allow you to easily identify what database activity has occurred in your metrics handler</li> <li>what event name is if you do not use telemetry_prefix for your repo</li> </ul> <p>The sections below provide information that might be helpful when you are first using Ecto telemetry.</p> <h2 id="what-is-telemetry-what-is-a-telemetry-event">What is Telemetry? What is a Telemetry Event?</h2> <p>Telemetry, as a general concept, has been around quite a while. It refers to the gathering of measurements (and other information) at or near the point of what is being measured. Then automatically transmitting that information to a system that allows analysis of the measurements. Sometimes you will see the term “telemeter” used to describe a device used to capture measurements.</p> <blockquote> <p>A telemeter is a physical device used in telemetry. It consists of a sensor, a transmission path, and a display, recording, or control device. Electronic devices are widely used in telemetry and can be wireless or hard-wired, analog or digital. Other technologies are also possible, such as mechanical, hydraulic and optical.</p> </blockquote> <p>Early systems that used telemetry were quite primitive. For example, early steam engines performed measurements on a mercury pressure gauge. The gauges indicated the measurement and could be read at a short distance. Our modern use of telemetry involves transmitting measurements data in large volumes from multiple points to a common analysis system where graphs, charts, gauges and general queries over measurement data is possible.</p> <p>A telemetry event is a measurement (or measurements) at a specific point in time and given a timestamp and a name. Telemetry events are a history (of sorts) for your system.</p> <h2 id="why-do-i-want-telemetry">Why do I want Telemetry?</h2> <p>Embracing telemetry allows monitoring your software. You can use the measurements to evaluate and monitor the general health of your software. You can use it to spot trends that require investigation and evaluation. For example, it’s important to know if APIs provided by your service are suddenly 50% slower. That’s something that probably needs immediate investigation! And it’s easily visible if you are using telemetry.</p> <p>In the context of Ecto, using it’s telemetry events can give you:</p> <ul> <li>how many times is a particular query executed over a time interval?</li> <li>what is the current speed of a query?</li> <li>what are the trends over time for number of executions and speed of queries?</li> </ul> <h2 id="how-does-telemetry-work-in-elixir">How does Telemetry work in Elixir?</h2> <p>Different languages and frameworks provide different telemetry approaches. In Elixir and Erlang telemetry is generated by the <a href="https://hex.pm/packages/telemetry">telemetry library</a>. All libraries and applications should use the telemetry library.</p> <blockquote> <p>There are some Erlang libraries that do not use the telemetry library. This is because the telemetry library and it’s conventions were not around when the library was first written. For a number of libraries telemetry events have been added, but its possible you will use a library that does not generate telemetry events. In some cases the library may generate its own version of telemetry events that you can coerce into the telemetry system.</p> </blockquote> <p>In Elixir (and Erlang) telemetry means the generation of a named telemetry event. The event is not only a measurement but may also include metadata.</p> <p>An event is named using a List of atoms. This list of atoms uniquely identifies the type of event. That is, the name identifies the general category of the event. That is, we may have an event named <code class="language-plaintext highlighter-rouge">[:my_app, :sonar_system, :ping]</code> that is used to report some sonar ping event. This is its name but there can be multiple telemetry events of this kind generated, each with its own timestamp.</p> <p>Ecto, Phoenix and other libraries you may use have a dependency on the telemetry library. When your app starts the telemetry library starts a GenServer that creates an <code class="language-plaintext highlighter-rouge">ets</code> table. This is used to connect generated events to registered callbacks for those events. The callback is responsible for doing something with the generated event - such as sending it on to Datadog or Prometheus.</p> <h2 id="listening-for-telemetry-events">Listening for Telemetry Events</h2> <p>There are two functions in the telemetry library for registering your interest in events:</p> <ul> <li><code class="language-plaintext highlighter-rouge">attach/4</code> - used to attach to a single event of interest</li> <li><code class="language-plaintext highlighter-rouge">attach_many/4</code> - used to attach to a list of events of interest</li> </ul> <p>These functions are almost identical. The different is <code class="language-plaintext highlighter-rouge">attach/4</code> takes a single event name as its second parameter. The <code class="language-plaintext highlighter-rouge">attach_many/4</code> takes a list of event names as its second parameter. The other parameters are exactly the same. Your application should use only one of these. It makes sense to use <code class="language-plaintext highlighter-rouge">attach_many/4</code> even if you are currently interested in only one event. Over time you most likely will want to listen to more.</p> <p>Here are the parameters to these functions:</p> <ul> <li>handler_id - this is a unique id. It’s defined as a term. This means it can be any value - a String, an atom, a Map, etc. Ordinarily, developers use either an atom (module name) or a String. The important thing to keep in mind is that it must be unique. That is, your name cannot conflict with any other id registered to receive telemetry events.</li> <li>event_name (<code class="language-plaintext highlighter-rouge">attach/4</code>) or list of event_name (<code class="language-plaintext highlighter-rouge">attach_many/4</code>) - An event name is a unique list of atoms that identify an event. Since this must be unique an event name’s list of atoms usually starts with the application name. For example, <code class="language-plaintext highlighter-rouge">:ecto</code> or <code class="language-plaintext highlighter-rouge">:phoenix</code>. In the case of your own service this would be your app name. That can be found in your mix.exs file. The atoms that follow make the event unique for the application. You’ll want to identify a convention used by your app if you are going to generate telemetry events.</li> <li>handler_function - This is the function that is called by the telemetry library when an event matches the event_name or list of event_name passed in the <code class="language-plaintext highlighter-rouge">attach/4</code> or <code class="language-plaintext highlighter-rouge">attach_many/4</code> call. There’s an example below and some hints on how to write a handler function.</li> <li>handler_config - This is your config data. It’s defined as a term. This means it can be any value that you find useful. Maps are commonly used. But probably the most common thing is to pass nil for this value. It’s not required and unless you want data passed by the telemetry library back to you to handle each event you should just use <code class="language-plaintext highlighter-rouge">nil</code>.</li> </ul> <p>Once you have attached the handler your handler function will start being called when an event is generated. The code path for an event is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>generate event -&gt; telemetry library
                  for each handler for event
                            -&gt; call the handler function
</code></pre></div></div> <p>The basic mechanics of plugging into Ecto’s telemetry events are:</p> <ul> <li>figure out the event names and put them in a list</li> <li>call <code class="language-plaintext highlighter-rouge">:telemetry.attach_many</code> and give the telemetry system a handler function. The handler is a function that takes four parameters: <ul> <li>The event name</li> <li>Measurements (Map)</li> <li>Metadata (Map)</li> <li>Handler Config - this is data that you pass into the telemetry library when informing it that you want to listen for events. In most cases applications do not use this and nil is passed into the telemetry library and it is what is passed to the handler function for this parameter.</li> </ul> </li> </ul> <h2 id="how-and-when-are-telemetry-events-generated-in-ecto">How and When are Telemetry Events Generated in Ecto?</h2> <p>Ecto is the library that Elixir developers use to interact with a relational database. Different databases implement behaviour that allows Ecto to interact with different databases without having all the code inside the ecto library itself. So, for example, there is a <a href="https://hexdocs.pm/postgrex/readme.html">postgrex</a> library for Postgresql and a <a href="https://hexdocs.pm/myxql/readme.html">myxql</a> library for MySQL.</p> <blockquote> <p>Ecto is actually divided into two libraries: ecto and ecto_sql. This is because there are features in Ecto that are very useful for apps that do not use a relational database. For example, it is common to use Ecto to validate parameters for an API.</p> </blockquote> <p>There are two telemetry events generated by ecto.</p> <ul> <li>a Repo initialization event, This occurs when an <code class="language-plaintext highlighter-rouge">Ecto.Repo</code> starts up (its generated by the <code class="language-plaintext highlighter-rouge">Ecto.Repo.Supervisor</code> module in the ecto library). This event always has the same event name. It is <code class="language-plaintext highlighter-rouge">[:ecto, :repo, :init]</code>.</li> <li>a database activity event. This is generated when a database interaction (select, insert, update, delete, etc, etc) occurs on a Repo connection. This event does not have a fixed name. It’s naming is discussed below. This event is generally the only one that developers are interested in. It’s metrics surrounding the app’s interaction with the database. By capturing this data the developer can graph what queries are executing the most, which are the slowest queries, and other useful information. This is described in the Ecto documentation as an “Adapter Specific Event”. This somewhat awkward naming is not that important. I’ll refer to it in this doc as a “Database Activity Event”.</li> </ul> <h2 id="database-activity-event">Database Activity Event</h2> <p>As mentioned previously telemetry events are named. The name is given on generation as the first parameter to <code class="language-plaintext highlighter-rouge">:telemetry.execute/3</code>. It’s pretty clear what the name is for the event generated in <code class="language-plaintext highlighter-rouge">Ecto.Repo.Supervisor</code>. It’s hard-coded as <code class="language-plaintext highlighter-rouge">[:ecto, :repo, :init]</code>.</p> <p>The other telemetry event (the more useful one) has the name of your repo module as the event name, by default. This takes your Repo module name and converts it from camel-case to snake-case. So, if your Ecto repo is called <code class="language-plaintext highlighter-rouge">MyApp.MyRepo</code> the event name is <code class="language-plaintext highlighter-rouge">[:my_app, :my_repo]</code>.</p> <p>You can set the event name yourself by using a <code class="language-plaintext highlighter-rouge">telemetry_prefix</code> on your Ecto Repo definition in your config files. For example, you might set the <code class="language-plaintext highlighter-rouge">telemetry_prefix</code> to <code class="language-plaintext highlighter-rouge">[:my_app, :ecto, :primary_db]</code> for a Repo associated with your primary database and <code class="language-plaintext highlighter-rouge">[:my_app, :ecto, :replica_db]</code> for your replica database. The event that Ecto generates will be your telemetry_prefix concatenated with <code class="language-plaintext highlighter-rouge">[:query]</code>.</p> <h2 id="the-database-activity-event">The Database Activity Event</h2> <p>The activity event passes the following measurements and metadata.</p> <h3 id="measurements">Measurements</h3> <p>The :measurements map may include the following, all given in the :native time unit:</p> <ul> <li>:idle_time - the time the connection spent waiting before being checked out for the query</li> <li>:queue_time - the time spent waiting to check out a database connection</li> <li>:query_time - the time spent executing the query</li> <li>:decode_time - the time spent decoding the data received from the database</li> <li>:total_time - the sum of (queue_time, query_time, and decode_time)️</li> </ul> <h3 id="metadata">Metadata</h3> <ul> <li>:type - the type of the Ecto query. For example, for Ecto.SQL databases, it would be :ecto_sql_query</li> <li>:repo - the Ecto repository (the module name)</li> <li>:result - the query result</li> <li>:params - the dumped query parameters (formatted for database drivers like Postgrex)</li> <li>:cast_params - the casted query parameters (normalized before dumping)</li> <li>:query - the query sent to the database as a string</li> <li>:source - the source the query was made on (may be nil)</li> <li>:stacktrace - the stacktrace information, if enabled, or nil</li> <li>:options - extra options given to the repo operation under :telemetry_options</li> </ul>]]></content><author><name></name></author><category term="elixir"/><category term="telemetry"/><summary type="html"><![CDATA[How to use Ecto's telemetry events]]></summary></entry><entry><title type="html">Open-D Minor Tuning</title><link href="https://fmcgeough.github.io/blog/2024/open-d-minor-tuning/" rel="alternate" type="text/html" title="Open-D Minor Tuning"/><published>2024-08-23T10:13:00+00:00</published><updated>2024-08-23T10:13:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/open-d-minor-tuning</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/open-d-minor-tuning/"><![CDATA[<p>Open D Minor Tuning is not a real popular open tuning. Most people are familiar with Drop-D. Then if you use a slide you most likely know about a tuning from one your favorite slide players (Open D, Open G or Open E). Open D Minor has a haunting tone and is what was used by Skip James to record classics as “Devil Got My Woman” and “Hard Time Killing Floor”. But it’s also been used in more recent music. For example, the following songs use Open D Minor:</p> <ul> <li>“Spoonman” by Soundgarden</li> <li>“Wake Up” by Rage Against The Machine</li> <li>“Whatsername” by Green Day</li> </ul> <p>I tuned the Mavis Mule resonator to Open D Minor for a practice session. Here are a couple of recordings from that. No editing. Just what I grabbed to hear how I sounded. So, pretty much a mess. But it is a fun tuning to try out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-08-23-Resonator-Open-D-Minor-Tuning1.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-08-23-Resonator-Open-D-Minor-Tuning2.mp3" controls=""/> </figure> </div> </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Practice session with Open-D Minor Tuning]]></summary></entry><entry><title type="html">Lowden F-34 koa/sitka</title><link href="https://fmcgeough.github.io/blog/2024/lowden-in-open-g/" rel="alternate" type="text/html" title="Lowden F-34 koa/sitka"/><published>2024-07-26T15:13:00+00:00</published><updated>2024-07-26T15:13:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/lowden-in-open-g</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/lowden-in-open-g/"><![CDATA[<p>On December 31st, 2023 my wife and I were at a party. She was having fun. I was staring at a website. The reason I was staring at the site instead of having fun with friends is that I had visited the site earlier in the day.</p> <p>It was “Bluedog Guitars”. This was a boutique guitar shop in Vancouver, Canada. The store was closing. Apparently they had posted that a while before I visited the site. But it was an “everything must go” sale. And by the time I visted there were only 3 or 4 guitars left out of the original stock of many fine guitars.</p> <p>One of the guitars was a Lowden F-34 with Koa back and sides and a Sitka top. I really liked this guitar and the price was quite low compared to what these guitars go for. So, though I didn’t need another guitar, I bought the guitar.</p> <p>I decided to share some pictures of it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It’s a wonderfully sounding instrument. I like the feel of the neck and its unique sound. It’s great for finger-picking but it holds up fine with strumming.</p> <p>I was over a friend’s house and we were playing bluegrass songs. Like Doc Watson’s version of “Shady Grove”. Shady Grove is a traditional Appalachian song. It’s covered by lots of artists. Its a simple song but, like a lot of bluegrass tunes, provides a means for a lot of improvisation.</p> <p>I had brought my Mavis Mule resonator and the Lowden to my friend’s home. I wanted to let the folks i was visiting see both the Mule and the Lowden. They are cool guitars. I had the Mule tuned to Open-D and tried to play along a bit but eventually switched to the Lowden.</p> <p>It’s been a couple days and I thought “I should really try the Lowden in Open G tuning and with a slide”. So anyway, this is a recording from me playing around with that.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-07-26-lowden-open-g.mp3" controls=""/> </figure> </div> </div> <p>This recording has nothing to do with “Shady Grove”. Other than I had been thinking of it earlier.</p>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="acoustic"/><summary type="html"><![CDATA[Description of My Lowden F-34 koa/sitka]]></summary></entry><entry><title type="html">Black Mountain Slide</title><link href="https://fmcgeough.github.io/blog/2024/black-mountain-slide/" rel="alternate" type="text/html" title="Black Mountain Slide"/><published>2024-07-26T15:13:00+00:00</published><updated>2024-07-26T15:13:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/black-mountain-slide</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/black-mountain-slide/"><![CDATA[<p>The Black Mountain company (Black Mountain picks) makes some great tools for guitarists. I first became aware of their company when I was having thumb pain. I had evidently worked way too hard on a particular bluegrass song. I had gripped the heck out of my pick and managed to make my thumb feel pretty bad. I was looking for something that would allow me to continue to play without putting pressure on my thumb. I found Black Mountain thumb picks.</p> <p>I ordered an assortment of different style thumb picks so I could test a few out and find one that worked for me. These worked great! Even after my poor thumb got a bit of a rest and felt fine I continued to use the thumb picks (along with my regular picks). The thumb picks have a spring inside them so they lock on very securely.</p> <p>A while later I ordered the Black Mountain Slide Ring. This is a cool type of slide that leaves you with all 4 fingers to use for chords (or whatever). This slide also has a spring so you can avoid issues with slide slipping. Its got a nice weight to it and I’ve used it often.</p> <p>I recently saw that they came out with a full-sized slide. The Slide Ring is made of tungsten steel. The full-sized slide is nickel-plated. It also has a spring inside it so you can ensure that it will work well regardless of your finger size. The company sells a small, medium and large. I went with a medium and it works fine on my pinky finger (because of the spring).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-08-05-blackmountain-slide1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-08-05-blackmountain-slide2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Black Mountain Full-Sized Slide </div> <p>I recorded a short video to demonstrate it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/2024-08-05-mule-steel-slide.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Black Mountain Full-Sized Slide on a Mavis Mule Resonator. </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Description of My New Black Mountain Slide]]></summary></entry><entry><title type="html">The ex_sleeplock library</title><link href="https://fmcgeough.github.io/blog/2024/ex-sleeplock/" rel="alternate" type="text/html" title="The ex_sleeplock library"/><published>2024-06-27T12:41:00+00:00</published><updated>2024-06-27T12:41:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/ex-sleeplock</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/ex-sleeplock/"><![CDATA[<p>I finally got around to publishing the <a href="https://hex.pm/packages/ex_sleeplock">ex_sleeplock</a> library to hex.pm. This is a useful library for a particular problem.</p> <h2 id="reason-for-library">Reason for Library</h2> <p>The reason this library got developed was because I was dealing with multiple services that served an API and consumed Kafka messages. Both of these activities required a database connection. Database connections available in limited quantities (set by the pool size). The API should have priority if a decision has to made on handing out a connection. The API should always have an available connection to process a request.</p> <p>It’s clear that a service can have lots of simultaneous requests that it needs to handle. For the services I was working with the service handled many simultaneous requests well. The problem was processing messages from Kafka.</p> <p>The service used the <a href="https://hexdocs.pm/brod/readme.html">brod</a> library. In particular, it used the <a href="https://hexdocs.pm/brod/brod_group_subscriber_v2.html">brod_group_subscriber_v2</a> module to consume messages. brod_group_subscriber_v2 starts a process for each partition that is assigned to this client node.</p> <p>The messages can arrive in parallel. Assume a topic with 64 partitions. The Kafka clients act as a consumer group. So Kafka splits the partitions between each member of that consumer group. Assuming we have 4 clients, for example, it means that 16 messages could arrive “simultaneously”.</p> <h2 id="how-brod-passes-messages-to-an-app">How Brod Passes Messages to An App</h2> <p>Brod provides a behaviour definition that the app must implement. The main callback function is <code class="language-plaintext highlighter-rouge">handle_message/2</code>. This is defined in the brod Erlang code as:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-callback handle_message(brod:message(), State) -&gt;
      {ok, commit, State}
    | {ok, ack, State}
    | {ok, State}.
</code></pre></div></div> <p>When a message arrives for any of brod partition processes the brod code calls the app’s implementation of <code class="language-plaintext highlighter-rouge">handle_message/2</code>. The app is responsible for processing the message and returning a value that lets brod know whether to “commit” the offset of the read message, just “ack” the message or tell Kafka nothing.</p> <p>The callback is typically code that is going to examine the incoming Kafka message and validate it. The code might convert it into something that the app can more easily process. In any case, at some point a processing function is called that is what needs to talk to the database. The processing function is something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def process_incoming_message(message) do
   &lt;message processing logic&gt;
end
</code></pre></div></div> <h2 id="database-pool-size">Database Pool Size</h2> <p>The pool size was typically set to 10 for each pod. With 16 partitions assigned it is easy to hit a situation where the Kafka processing used up all 10 of the connections. And if there is a huge flood of messages this situation might go on for a while. The API could have trouble getting a database connection before a timeout is reached.</p> <h2 id="separate-the-repos">Separate the Repos?</h2> <p>One possible solution is to separate the Ecto Repos. Declare one as the WebRepo and give it the number of connections you think it might want. Declare another as the KafkaRepo and give that Repo its own connections. This works since now the API is using its own connections. However, its also a bit awkward given that there are times when no messages are coming in from Kafka. No connections are actually needed for it. But the API might be getting hit harder than usual. Having the 10 total connections available would be good.</p> <h2 id="solving-the-problem-with-ex_sleeplock">Solving the Problem with ex_sleeplock</h2> <p>To solve this the ex_sleeplock library was created. What this does is create a named process with an application specified level of concurrency. The message processing code did call this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def process_incoming_message(message) do
   &lt;message processing logic&gt;
end
</code></pre></div></div> <p>Instead it became this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def process_incoming_message_throttled(message) do
  ExSleeplock.execute(:kafka_consumer_throttle, fn -&gt; process_incoming_message(message) end)
end
</code></pre></div></div> <p>The Kafka message processor started calling <code class="language-plaintext highlighter-rouge">process_incoming_message_throttled/1</code> instead of <code class="language-plaintext highlighter-rouge">process_incoming_message/1</code>. All the other code remained the same. The end result was the number of processes that could call <code class="language-plaintext highlighter-rouge">process_incoming_message/1</code> was limited to the level of concurrency specified in an app config file.</p> <h2 id="using-the-library">Using the Library</h2> <p>The library is fairly easy to use. You can even configure the locks that you want in our application config and the library will create the processes for each lock when it starts up. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config :ex_sleeplock, locks: [%{name: :kafka_consumer_throttle, num_slots: 2}]
</code></pre></div></div> <p>This configures the library to allow a maximum of two processes to be in the <code class="language-plaintext highlighter-rouge">process_incoming_message/1</code> code at once.</p> <p>The library supervises all the lock processes. So there isn’t extra things to think about or maintain in the code. Which seemed like a good thing as well.</p> <h2 id="so-thats-the-story">So That’s The Story</h2> <p>Anyway, I’m happy to share this library. Its implementation was based off an existing Erlang library called <a href="https://hex.pm/packages/sleeplocks">sleeplocks</a>. We used this at first but we wanted to have the library itself manage the supervision and we wanted some additional things like telemetry events and creation of the locks via a config file. That library is perfectly fine though. And it solves the same problem.</p> <p>If you use the library and want to have it do something else, do things differently or whatever then I’m happy to review pull requests. The repo for the project is <a href="https://github.com/fmcgeough/ex_sleeplock">ex_sleeplock library</a>.</p>]]></content><author><name></name></author><category term="elixir"/><category term="kafka"/><category term="concurrent"/><summary type="html"><![CDATA[Limiting concurrent processes in Elixir]]></summary></entry><entry><title type="html">Oh! Susanna</title><link href="https://fmcgeough.github.io/blog/2024/oh-susannah/" rel="alternate" type="text/html" title="Oh! Susanna"/><published>2024-06-22T10:25:00+00:00</published><updated>2024-06-22T10:25:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/oh-susannah</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/oh-susannah/"><![CDATA[<p>I picked up guitar slides a few months ago. I really enjoy the sound of Delta Blues and slide guitar. I listen to Bukka White - one of the giants of Delta Blues - pretty much every day. I wanted to see if I could teach myself a few things. At least enough to sound like I might know what I’m doing.</p> <p>Making a slide sound okay is definitely not easy. If you are using a standard slide (whether glass, steel, brass, or ceramic) then you have to pick a finger to use for the slide. That finger becomes unavailable for regular chording. It messes you up and its something you have to get past. You need to find a new way of playing an instrument you may have played for a while.</p> <p>One innovation in slide guitar is the slide ring. This is a slide that is like a larger ring. It fits inbetween the knuckles of your middle finger but doesn’t impede using that finger for regular chords. It does take a while to get used to the feeling of it though. I bought a slide ring from Black Mountain Picks. They sell slide rings, regular sized slides and innovative thumb picks that have a spring. This makes the thumb pick fit well and stay in place. It also reduces the wear on the pick since the spring absorbs some of the shock.</p> <p>There are some great modern slide players. One of my favorites is Joey Landreth. I listened to him on a podcast (I can’t recall off-hand what podcast it was) and he talked about learning slide. He said one of the best things to do when you are starting out is to take simple songs and practice them using the slide. “Amazing Grace” is a good one. Its a straightforward and fairly slow song and it sounds wonderful with a slide in open-D tuning.</p> <p>In open-D tuning you change your strings by taking the low E and tuning it to D. The next two strings stay the same. The G string is tuned down a 1/2 step to F#. The B string is tuned down to A. The high E is tuned to D.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E -&gt; D
A -&gt; A
D -&gt; D
G -&gt; F#
B -&gt; A
E -&gt; D
</code></pre></div></div> <p>Open-G tuning means changes your tuning to take the low E to D, the A to G, and then the next three strings (D, G, B) remain the same. The high E is tuned to D.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>E -&gt; D
A -&gt; G
D -&gt; D
G -&gt; G
B -&gt; A
E -&gt; D
</code></pre></div></div> <p>Open tunings work really well with slide and both these tunings are ones I use. Another simple song I use to practice slide is “Oh! Susanna”. This is a Stephen Foster song from 1848. It’s among the most popular American songs ever written. Its mostly major pentatonic. Its a simple song where the key is easily changed. Pete Seeger did a banjo version in what amounts to Open-G on a guitar.</p> <p>Here’s some slide practice in Open-G where I ended up with some inspiration from Oh! Susanna.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-06-oh-susannah-open-g.mp3" controls=""/> </figure> </div> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Oh, I come from Alabama
With my banjo on my knee
I'm going to Louisiana
My true love for to see
It rained all night the day I left
The weather it was dry
The sun so hot, I froze to death
Susanna, don't you cry

Oh, Susanna
Don't you cry for me
For I come from Alabam
With my banjo on my knee
Oh, Susanna
Don't you cry for me
For I come from Alabama
With my banjo on my knee
</code></pre></div></div> <p>Later in that same practice I retuned to Open-D (on my Mavis Mule) and recorded this (which is pretty far from Oh! Susanna but I named it that anyway since it came out of the same practice session):</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-06-oh-susanna-open-d.mp3" controls=""/> </figure> </div> </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="electric"/><category term="slide"/><summary type="html"><![CDATA[Mavis Mule and Ring Slide]]></summary></entry><entry><title type="html">Elxiir Unit Tests and Iterating a Single Test</title><link href="https://fmcgeough.github.io/blog/2024/macros-ini-unit-tests/" rel="alternate" type="text/html" title="Elxiir Unit Tests and Iterating a Single Test"/><published>2024-06-19T11:30:00+00:00</published><updated>2024-06-19T11:30:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/macros-ini-unit-tests</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/macros-ini-unit-tests/"><![CDATA[<p>One of the strengths of the Elixir language is a powerful first-class macro language. The creator of Elixir, José Valim, based the development of Elixir macros (in part) on how Lisp macros work. Macros are a form of metaprogramming. It’s writing code that, in turn, writes code.</p> <p>It’s a good idea to get at least some familiarity with Elixir macros. If nothing else you will run into libraries (like ExUnit, Ecto) that make use of them and the Elixir language itself defines many functions using macros. Ecto, the database ORM for Elixir, makes extensive use of macros to define a DSL to simplify dealing with relational databases.</p> <h2 id="the-test-macro-in-the-ex_unit-library">the test macro in the ex_unit library</h2> <p>The unit test framework that is used for Elixir is <a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit</a>. If you look at the ExUnit doc you can see that it makes use of the macro language to define the primitives used in Elixir’s unit tests. For example, “describe” and “test” are both macros in the ExUnit.Case module. Here is how <code class="language-plaintext highlighter-rouge">test</code> is defined (as of June 2024). You can see it uses <code class="language-plaintext highlighter-rouge">defmacro</code>. Its interesting (and probably a bit confusing) when you recognize that defmacro is also a macro.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defmacro test(message) do
    %{module: mod, file: file, line: line} = __CALLER__

    quote bind_quoted: binding() do
      name = ExUnit.Case.register_test(mod, file, line, :test, message, [:not_implemented])
      def unquote(name)(_), do: flunk("Not implemented")
    end
  end
</code></pre></div></div> <h2 id="breaking-down-the-test-macro">Breaking down the test macro</h2> <p>Let’s consider (in general) how macros work with Elixir. When your code is compiled it is converted to an AST (this is an abstract syntax tree. An AST is your code converted to data). The places where the code is actually a macro are identified. Once the AST is generated the macro is expanded. This can be a recursive process. But eventually everything is converted to an AST. At that point the AST can be converted to the byte code that executes in the VM.</p> <p>In the <code class="language-plaintext highlighter-rouge">test</code> macro above a signle parameter is passed. This is the name of the unit test. The first thing the test macro does is use the <code class="language-plaintext highlighter-rouge">__CALLER__</code> macro to get the module running the test, its file, and the line number of the test.</p> <p>Then <code class="language-plaintext highlighter-rouge">test</code> does a quote block. As you maybe can guess <code class="language-plaintext highlighter-rouge">quote</code> is also a macro. It takes two arguments: <code class="language-plaintext highlighter-rouge">opts</code> and <code class="language-plaintext highlighter-rouge">block</code>. The <code class="language-plaintext highlighter-rouge">opts</code> in this case are <code class="language-plaintext highlighter-rouge">bind_quoted: binding()</code>. This option passes a binding to the macro. Whenever a binding is given, <code class="language-plaintext highlighter-rouge">unquote/1</code> is automatically disabled. The call <code class="language-plaintext highlighter-rouge">binding(context \\ nil)</code> returns the binding for the given context as a keyword list. In the returned result, keys are variable names and values are the corresponding variable values. If the given context is nil (by default it is and it is in how the test macro is written), the binding for the current context is returned.</p> <p>Inside the do block a call is made to <code class="language-plaintext highlighter-rouge">ExUnit.Case.register_test</code>. This is what will check that the name of your test is actually unique. It’s probably good to point out that the String that you use for your test can be a maximum of 255 characters. If you give a String longer than that you’ll get a compile error that looks something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>== Compilation error in file test/account_test.exs ==
** (SystemLimitError) the computed name of a test (which includes its type, the name of its parent describe block if present, and the test name itself) must be shorter than 255 characters
</code></pre></div></div> <h2 id="using-a-comprehension-above-a-test">using a comprehension above a test</h2> <p>One use of macros that you might see (or use yourself) is to define a comprehension outside a test declaration. This allows you to write a single test that uses each of the comprehension values. So, instead of writing a number of unit tests that end up having the same code you write the test once and make it data-driven. The easiest way to understand this is with an example.</p> <p>Suppose you have an Ecto.Schema for a database table in your app. It has some required fields. If those fields are not provided when calling the <code class="language-plaintext highlighter-rouge">Ecto.Changeset</code> function <code class="language-plaintext highlighter-rouge">changeset/2</code> you want the changeset to be invalid. I’ll use a contrived example to demonstrate how I’d develop that code and use a macro to generate unique tests. The example is an <code class="language-plaintext highlighter-rouge">accounts</code> table. We’ll require that when building an <code class="language-plaintext highlighter-rouge">Ecto.Changeset</code> that <code class="language-plaintext highlighter-rouge">:account_id</code> and <code class="language-plaintext highlighter-rouge">account_state</code> are required. All the other fields are optional. Here’s the module defining the <code class="language-plaintext highlighter-rouge">Ecto.Schema</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Account do
  @moduledoc """
  Ecto.Schema for the accounts table
  """
  use Ecto.Schema
  import Ecto.Changeset

  schema "accounts" do
    field(:account_id, :string)
    field(:account_state, :string)
    field(:url, :string)
    field(:owner_email, :string)
    field(:account_score, :integer)
    field(:current_billing_status, :string)
    field(:ui_schema, :string)

    timestamps()
  end

  @doc """
  What fields are used in this table (excludes default timestamp fields)?
  """
  def fields do
    [:account_id, :account_state, :url, :owner_email, :account_score, :current_billing_status, :ui_scheme]
  end

  @doc """
  What fields are required (not null) in this table?
  """
  def required do
    [:account_id, :account_state]
  end

  def changeset(struct, params \\ %{}) do
    struct
    |&gt; cast(params, fields())
    |&gt; validate_required(required())
  end
end
</code></pre></div></div> <p>If we want to test that we get invalid Changesets when we don’t provide the required fields we could have a test like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule AccountTest do
  use ExUnit.Case

  @valid_account_params %{account_id: "123", account_state: "active", url: "http://example.com", owner_email: "test@example.com"}

  for required_field &lt;- Account.required() do
    test "error is generated when '#{required_field}' field is missing" do
      params = Map.delete(@valid_account_params, unquote(required_field))
      changeset = Account.changeset(%Account{}, params)
      refute changeset.valid?
      assert changeset.errors == [{unquote(required_field), {"can't be blank", [validation: :required]}}]
    end
  end
end
</code></pre></div></div> <p>This lets us test each field independently. If the test fails it will tell us the name of the field that failed (along with the failing line). For example, lets change the code to add in a field that is not required.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule AccountTest do
  use ExUnit.Case

  # for required_field &lt;- Account.required() do
  #   test "error is generated when '#{required_field}' field is missing" do
  #     params = Map.delete(@valid_account_params, unquote(required_field))
  #     changeset = Account.changeset(%Account{}, params)
  #     refute changeset.valid?
  #     assert changeset.errors == [{unquote(required_field), {"can't be blank", [validation: :required]}}]
  #   end
  # end

  for required_field &lt;- Account.required() ++ [:url] do
    test "error is generated when '#{required_field}' field is missing" do
      params = Map.delete(@valid_account_params, unquote(required_field))
      changeset = Account.changeset(%Account{}, params)
      refute changeset.valid?
      assert changeset.errors == [{unquote(required_field), {"can't be blank", [validation: :required]}}]
    end
  end
end
</code></pre></div></div> <p>When <code class="language-plaintext highlighter-rouge">mix test</code> is run we see the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mix test
  1) test error is generated when 'url' field is missing (AccountTest)
     test/account_test.exs:16
     Expected false or nil, got true
     code: refute changeset.valid?
     stacktrace:
       test/account_test.exs:19: (test)
</code></pre></div></div> <p>The error line (19) is for the line <code class="language-plaintext highlighter-rouge">refute changeset.valid?</code> in our unit test file. The first line tells us that the <code class="language-plaintext highlighter-rouge">url</code> field is what caused the problem.</p> <p>So, what is going on here? Well, the comprehension takes each value in turn and uses that as input to the <code class="language-plaintext highlighter-rouge">test</code> macro. The <code class="language-plaintext highlighter-rouge">required_field</code> value becomes available in the unit test string and in the test block itself. In the test string <code class="language-plaintext highlighter-rouge">"error is generated when '#{required_field}' field is missing"</code> no interpolation is needed. This is because the string interpolation is inside the context of the macro itself. The test block executes in its own context so you need to use <code class="language-plaintext highlighter-rouge">unquote(required_field)</code> to get actual value. If you tried to just use <code class="language-plaintext highlighter-rouge">required_field</code> you’ll get a compiler error. <code class="language-plaintext highlighter-rouge">undefined function required_field/0</code>.</p> <p>If you wanted you could output the binding just before the <code class="language-plaintext highlighter-rouge">test</code> line:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  for required_field &lt;- Account.required() do
    IO.inspect(binding(), label: "binding")
    test "error is generated when '#{required_field}' field is missing" do
      params = Map.delete(@valid_account_params, unquote(required_field))
      changeset = Account.changeset(%Account{}, params)
      refute changeset.valid?
      assert changeset.errors == [{unquote(required_field), {"can't be blank", [validation: :required]}}]
    end
  end
</code></pre></div></div> <p>Since we have two required fields (<code class="language-plaintext highlighter-rouge">:account_id</code> and <code class="language-plaintext highlighter-rouge">:account_state</code>) this outputs:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>binding: [required_field: :account_id]
binding: [required_field: :account_state]
</code></pre></div></div> <h2 id="rewrite-without-the-comprehension">Rewrite without the comprehension</h2> <p>This same unit test could be rewritten easily without this approach. But let’s add in the same issue as the “bad” test and check the output when <code class="language-plaintext highlighter-rouge">mix test</code> is run.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule AccountTest do
  use ExUnit.Case

  @valid_account_params %{account_id: "123", account_state: "active", url: "http://example.com", owner_email: "test@example.com"}

  test "error is generated when a required field is missing" do
    for required_field &lt;- Account.required() ++ [:url] do
      params = Map.delete(@valid_account_params, required_field)
      changeset = Account.changeset(%Account{}, params)
      refute changeset.valid?
      assert changeset.errors == [{required_field, {"can't be blank", [validation: :required]}}]
    end
  end
end
</code></pre></div></div> <p>When <code class="language-plaintext highlighter-rouge">mix test</code> is run we see the following:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mix test

  1) test error is generated when a required field is missing (AccountTest)
     test/account_test.exs:15
     Expected false or nil, got true
     code: refute changeset.valid?
     stacktrace:
       test/account_test.exs:19: anonymous fn/2 in AccountTest."test error is generated when a required field is missing"/1
       (elixir 1.14.2) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/account_test.exs:16: (test)
</code></pre></div></div> <p>With that output its not possible to see the field that caused the failure. We can change the <code class="language-plaintext highlighter-rouge">refute</code> line to <code class="language-plaintext highlighter-rouge">refute changeset.valid?, "Removing '#{required_field}' didn't make changeset invalid"</code> so that the field is output when that line fails. That gives us:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  1) test error is generated when a required field is missing (AccountTest)
     test/account_test.exs:15
     Removing 'url' didn't make changeset invalid
     code: for required_field &lt;- Account.required() ++ [:url] do
     stacktrace:
       test/account_test.exs:19: anonymous fn/2 in AccountTest."test error is generated when a required field is missing"/1
       (elixir 1.14.2) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/account_test.exs:16: (test)
</code></pre></div></div> <p>So that output tells us what we want to know. When the <code class="language-plaintext highlighter-rouge">url</code> field is removed it does not make the changeset invalid.</p> <h2 id="recap">Recap</h2> <p>Elixir macros are very powerful. You should not write a macro without thinking through a couple of things:</p> <ul> <li>are you sure you are going to be able to maintain the macro. Is the macro going to be maintainable for other developers?</li> <li>are you sure that the macro makes developers lives easier long term? Could you get the same value from just a regular function?</li> </ul> <p>Using a comprehension to pass data into a test to avoid repeating code by making the test data-driven is a technique that you might want to consider if it meets your use case.</p>]]></content><author><name></name></author><category term="elixir"/><category term="ex_unit"/><summary type="html"><![CDATA[What does it mean when I have a test block in Elixir?]]></summary></entry><entry><title type="html">Never make it home by seven</title><link href="https://fmcgeough.github.io/blog/2024/been-too-long-at-the-fair/" rel="alternate" type="text/html" title="Never make it home by seven"/><published>2024-06-16T10:25:00+00:00</published><updated>2024-06-16T10:25:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/been-too-long-at-the-fair</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/been-too-long-at-the-fair/"><![CDATA[<p>In the early 1970s a singer-songwriter named Jeff Zoss was playing at the Passim’s club in Cambridge. Bonnie Raitt’s manager, Dick Waterman, happened to be in the club. Zoss played “Been too long at the fair” and other songs. After the show Waterman asked Zoss for a tape of the song to play for Raitt. It was included on her second album (along with another Zoss song “I Gave My Love A Candle”). This was called “Give It Up”. Its an amazing album but Raitt didn’t achieve her breakout commercial success until years later with the “Nick of Time” album in 1989.</p> <p>Passim’s was an amazing Boston institution and an incredible number of artists performed there. I think I saw a couple dozen shows there when I lived in Boston. I never saw Jeff Zoss perform there but his songwriting is incredible. I heard Bonnie Raitt’s version of “Been Too Long At the Fair” before I heard the original. I thought it was incredibly beautiful. I’m glad I also got to see Bonnie Raitt perform. She put on a great show (this was also in Boston but much later).</p> <p>You can see a YouTube video of Jeff Zoss (and Jeff Adkins) performing the song on British TV in 2016. https://www.youtube.com/watch?v=RaAdtAw1jrg. And there are multiple Bonnie Raitt versions on YouTube (of course). But the remastered version from the second album is well worth a listen. https://www.youtube.com/watch?v=MKgNgGnpaCo. The history of <a href="https://en.wikipedia.org/wiki/Club_Passim">Club Passim</a> is on Wikipedia.</p> <p>Anyway, at some point I recorded the song on my phone during practice sessions. It was one of my electrics and has a ton of atmospheric reverb going on. I found it on a thumb drive and thought I’d post it if only to point out that its my favorite Bonnie Raitt song. That probably has to do with both that its a beautiful song and when I heard it. Raitt’s voice and the production were unusual for the time and the song is just something else.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-06-been-too-long-at-the-fair.mp3" controls=""/> </figure> </div> </div> <p>There’s another song called “(Have I Stayed) Too Long at the Fair” written by Billy Barnes and recorded by Barbra Streisand. Going to the fair and staying just a bit too long is an old metaphor. There’s even the old English nursery rhyme “Johnny’s So Long at the Fair” from the 1700s. The phrase “it’s possible to stay too long at the Fair” was used by author Joan Didion in her essay “Goodbye to All That” that appears in “Slouching Towards Bethlehem”.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Jesus cried, wept and died
I guess he went up to heaven
I've been downtown such a long, long time
I'll never make it home by seven
Won't you come and take me home
I've been too long at the fair
And Lord, I just can't stand it anymore
</code></pre></div></div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="electric"/><category term="pedal"/><summary type="html"><![CDATA[Recording using the Strymon Clouburst reverb pedal]]></summary></entry><entry><title type="html">And sometimes I use a guitar pedal</title><link href="https://fmcgeough.github.io/blog/2024/strymon-clouburst/" rel="alternate" type="text/html" title="And sometimes I use a guitar pedal"/><published>2024-06-08T10:25:00+00:00</published><updated>2024-06-08T10:25:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/strymon-clouburst</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/strymon-clouburst/"><![CDATA[<p>I sometimes wish I was more fluent in guitar pedals. I’m just not. But I do have a couple of cool pedals that I’ve had some good times with. One is the <a href="https://www.strymon.net/product/cloudburst">Strymon Cloudburst</a>. Its a reverb pedal with interesting atmospheric effects. People that work at Strymon made a great video (probably multiple) demonstrating its use. Go watch them. It’s super cool.</p> <p>This is me. Using the Shabat Lion GB into a Strymon Cloudburst pedal and into the <a href="https://3rdpower.com/products/amps/wooly-coats-spanky-mkii/">3rd Power MK II Spanky amp</a>. This is an amazing amp. I liked it from the first time I plugged in.</p> <p>I was using the neck-pickup on the Shabat. I was recording with my iPhone. It definitely is atmospheric and was fun to play.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-06-shabat_neck_pickup.mp3" controls=""/> </figure> </div> </div> <p>This reminded of something I did a few years when Game of Thrones was still on. When Arya was running in the dark to go kill the Ice King I figured what she really needed was some background music. :-) So I recorded this.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-06-08-game-of-thrones.mp3" controls=""/> </figure> </div> </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="electric"/><category term="pedal"/><summary type="html"><![CDATA[Recording using the Strymon Clouburst reverb pedal]]></summary></entry><entry><title type="html">First Guitar</title><link href="https://fmcgeough.github.io/blog/2024/first-guitar/" rel="alternate" type="text/html" title="First Guitar"/><published>2024-06-07T10:25:00+00:00</published><updated>2024-06-07T10:25:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/first-guitar</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/first-guitar/"><![CDATA[<p>After moving to Atlanta in 1990 I bought a guitar from <a href="https://www.maplestreetguitars.com/">Maple Street Guitars</a>. This is a wonderful guitar shop near public transportation (Marta). They carry both acoustic and electric guitars. The folks that work there are friendly and extremely knowledgeable. You’ll see postings about one or more of them appearing in music venues around town.</p> <p>Maple Street carries Taylor guitars and I bought a Taylor 310. Taylor doesn’t make these anymore. It’s a terrific guitar though. Its Sapele back and sides and Sitka Spruce top. It wasn’t very expensive at the time and they are relatively inexpensive now if you want to pick up one used.</p> <p>Sapele is part of the Meliaceae family - just like Honduran Mahogany. It has a similar type of sound and is less expensive (and probably more sustainable). )</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024_taylor_310_front.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024_taylor_310_back.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Taylor 310 front and back </div> <p>I have this guitar hanging downstairs by my couch so I can pick it up whenever the mood strikes me. Here’s a couple of small samples.</p> <p>One is a recording using Open-G tuning and a ceramic slide from <a href="https://therockslide.com/">The Rockslide</a>. I got a couple of different slides from them while I was trying to figure out what worked best for me. They are really well crafted. I use this particular slide on my ring finger. And this is just random stuff I was fiddling around with.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024_taylor_310_open_g_slide.mp3" controls=""/> </figure> </div> </div> <div class="caption"> Open-G with a ceramic slide </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-06-10-taylor-310.mp3" controls=""/> </figure> </div> </div> <div class="caption"> Random clip in standard tuning </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="acoustic"/><summary type="html"><![CDATA[Description of My Taylor 310]]></summary></entry></feed>