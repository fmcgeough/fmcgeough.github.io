<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-16T15:33:00+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Elixir and Documentation</title><link href="https://fmcgeough.github.io/blog/2024/using-elixir-doc/" rel="alternate" type="text/html" title="Elixir and Documentation"/><published>2024-10-16T10:00:00+00:00</published><updated>2024-10-16T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/using-elixir-doc</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/using-elixir-doc/"><![CDATA[<p>I started learning about Elixir in 2016. One of the first things that I liked about it was the good-looking documentation. Examining important modules like <a href="https://hexdocs.pm/elixir/Process.html">Process</a>, <a href="https://hexdocs.pm/elixir/GenServer.html">GenServer</a>, or <a href="https://hexdocs.pm/elixir/Enum.html">Enum</a> was a pleasure. There was a nice description of what the module provided and clear doc for each public function. The doc for functions would include example or explanatory code that was well formatted and easy to read.</p> <p>I thought I’d try and summarize what I liked about the Elixir doc system when I first encountered it. The images shown below are from recent doc but you can “time-travel” back to previous versions of Elixir doc by selecting a version from the navigation. I believe this was added around 2019 (Elixir version 1.8).</p> <h2 id="elixirs-doc-vs-javas-doc">Elixir’s Doc vs Java’s Doc</h2> <p>I think what I liked about what I saw (over Java and Javadoc that I was working with in 2016) was it appeared it was written to be read. A big part of that was the format and flow. For example, here’s the doc for Collections in Java JDK vs Enum in Elixir.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-java-collections.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Java Collections </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-elixir-enum.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Elixir Collections </div> <p>On the face of it these are presenting similar information. A name, a description, followed by different types of details. There’s navigation for both.</p> <p>The Java doc navigation shows the list of all packages in one frame and a list of all the available classes in the current package in another. The Elixir doc, on the other hand, has a tabbed navigation. One is “Modules” providing all the modules that are available in the library and other is “Pages”.</p> <p>The “Pages” tab has all sorts of goodies. It’s got:</p> <ul> <li>API Reference - has a list of linked modules with a single sentence description</li> <li>Changelog (for the version you are looking at)</li> <li>Getting Started - probably the biggest section in “Pages” with coverage of topics that don’t fit into doc for an individual module. These are general guides to language usage. For example, there’s a section on “Basic Types” and “Anonymous Functions”.</li> <li>Cheatsheets</li> <li>Anti-Patterns - this is relatively new list of things not to do</li> <li>Meta-Programming - one of Elixir’s strength’s is support for meta-programming. This allows developers to create DSL (Domain Specific Languages) that can simplify and clarify code</li> <li>Mix &amp; OTP - Mix is Elixir’s general purpose (and exensible) build tool. OTP is the system provided by the VM with core functionality and patterns that powers both Erlang and Elixir</li> <li>References - conventions, guidelines and more</li> </ul> <p>The Elixir “Modules” tab was highlighted when I got to Enum. Enum appears in the modules documentation with three subheadings: Summary, Types, Functions. This is providing navigation that isn’t available in Javadoc. You can expand the functions and click on any of them and the right-hand panel goes to the function and it’s doc.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-elixir-enum-nav-expanded.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Elixir Module Navigation </div> <p>The code parts of the doc in Elixir (@specs, Examples, etc) show with a grey background and in a non-serif font. The Javadoc just has the font change. I find the Elixir version easier to read.</p> <p>In both a function has a description. In Elixir this is broken into two pieces: a summary that appears first, followed by a break and then the actual description. In Javadoc the description is however many paragraphs of text are needed to describe the function. For example, for both a Java Collection and Enum there is a min function. For Elixir the description is “Returns the minimal element in the enumerable according to Erlang’s term ordering”. For Javadoc its “Returns the minimum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. Furthermore, all elements in the collection must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the collection)”.</p> <p>Both of these are providing useful information but it’s easy to see that the Elixir doc is an easier on-ramp to learning what the code provides. The Javadoc provides lots of useful information however it definitely reads like it was written by a lawyer. My preference is for the Elixir style.</p> <p>The Java doc appears crowded. There’s links everywhere. By contrast the Elixir doc is quite clean.</p> <h2 id="elixir-doc-vs-other-modern-languages">Elixir Doc vs Other Modern Languages</h2> <p>You might think that Elixir doc might be better but that’s because it was invented rather recently. However, it’s more than that. You can look at another couple of “recent” languages and see that their doc is not as clear and easy to use as Elixir. I’ll use Rust and Go.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-rust-collections.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Rust Collections </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-go-collections.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="caption"> Go Collections </div> I'm not saying these languages are not useful (by any stretch). They are both amazing languages. But their target audience seems to be quite different. And, in both cases, I think it's fair to say that the doc is provided as a reference. That is, if you already know how everything works but need some piece of individual information then it's useful. Trying to learn by looking at this doc is the wrong approach. There are quite good books and blog posts that can help in that regard. The ability to go to source code from documentation was something I was familiar with in Go before I ever looked at Elixir. I was happy that the Elixir creators added this capability. I find it quite useful. ## iex and Documentation Elixir comes with a repl like Python or Ruby. The repl is called iex. When you are developing locally and using [iex](https://hexdocs.pm/iex/IEx.html) you can access documentation. It does require that you "know" what you are looking for but provides a bit of help in that regard. As an example let's look at DateTime. If you are using DateTime in the iex repl and forget what functions are available you can enter `DateTime.` and hit `<tab>`. All the functions are displayed. <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-iex_module_functions.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> Since DateTime has a large number of functions, all of the possible functions are not displayed. You can use `<pg-up>` or `<pg-down>` to show all the functions. To get help on any individual function you can use `h` followed by the function name (and possibly arity if there are multiple functions with same name but different arity). <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-iex-function-help.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> This extensive help is available in iex for not only the core Elixir software but any important library that you have a dependency on (Phoenix, Ecto, etc) when you are working on your own project. One last thing is that there is tab completion for finding a module as well. So if I type "D" and `tab` then I get Date, DateTime, Dict, Duration, and DynamicSupervisor. This is not only useful for lookup but things like this that save having to type are always welcome if you develop software for a living. ## Core Elixir Doc There is a Documentation page on the main Elixir site at [docs.html](https://elixir-lang.org/docs.html). Elixir is broken into 6 different applications: - Elixir - standard library - EEx - templating library - ExUnit - unit test library - IEx - interactive shell - Logger - built-in Logger - Mix - build tool The page displays links for multiple Elixir versions and indicates what the supported Erlang/OTP versions are for each Elixir version. You can visit the [DateTime doc](https://hexdocs.pm/elixir/DateTime.html) and see that the [convert/2 function](https://hexdocs.pm/elixir/DateTime.html#convert/2) covered above. Notice that the doc that appears on that page is the same doc that shows up in iex when you ask for help on the function. ## Library doc and hex.pm Libraries for both Erlang and Elixir are available via [hex.pm](https://hex.pm/). The same tool that produced the Elixir core library documentation is used by library authors (ex_doc). The library used to generate doc - ex_doc - is also going to be in hex.pm. Let's examine a fundamental Elixir library - [plug](https://hex.pm/packages/plug). This is the basis for how the Phoenix web framework works. If you search for plug in hex.pm you can navigate to its page. You'll see a lot of information on this main page. - Links - Online documentation (library documentation). Next to this link is a little image that lets you download all the library doc to your local system as a .tar.gz file. - GitHub (where code is actually stored) - Downloads - Displays a graph of how many times the library has been downloaded. It also shows general info for number of downloads in certain time frames (yesterday, last week, all time). - Versions - Each published version is displayed here with the version number, date published and links to the documentation for that particular version. - Dependencies - A library may use other libraries. If so this section lists off what libraries this library is dependent on and what the version is of the required library. Optional dependencies such as libraries used for testing the library not listed. This list is meant to give you an overview of what libraries your deployed code will have if you use the library. - Recent Activity - This shows important recent events for the library. - Config - This section shows you how to install the library for your project. It includes what you'd add to your mix.exs file (or rebar.config/erlang.mk if you are using Erlang) - Checksum - This has the checksum for the library that was published - Build Tools - This lists what is used to build the library. This will be `mix` for Elixir libraries or `rebar3` for Erlang libraries (ordinarily). - Owners - This shows the list of developers that are the "owners" of the library. - Publisher - This shows the individual who is allowed to publish a new version of the library - Dependants - This shows libraries that are dependent on this library. In the case of the `plug` library this is a very long list so the text ends with "..." indicating that there are more available than are listed. You can click on the last library listed and get a paged list of dependencies. The [plug library documentation page](https://hexdocs.pm/plug/readme.html) looks like this: <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-plug_documentation.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> There are a few general characteristics of the generated doc that are important to note: - the left hand navigation consists of two tabs: 1) Pages; 2) Modules. The Pages contains various text that supports the library and describes use cases. The Modules tab lists the modules that are documented in the library. - if you want to resize the left-hand navigation there is a small widget at the bottom right of the navigation that allows dragging the left hand navigation to widen or narrow it. - The search functionality is full-text JS based. Here are some tips: - Multiple words (such as foo bar) are searched as OR - Use _ anywhere (such as fo_) as wildcard - Use + before a word (such as +foo) to make its presence required - Use - before a word (such as -foo) to make its absence required - Use : to search on a particular field (such as field:word). The available fields are title, doc and type - Use WORD^NUMBER (such as foo^2) to boost the given word - Use WORD~NUMBER (such as foo~2) to do a search with edit distance on word - next to the search entry there is a widget that allows you to change the theme (along with a couple of other settings). - to the right of module or functions there is a widget `&lt;&gt;` that can be clicked on. It brings you to the location in the source code (in GitHub, ordinarily) where the doc occurs. This is quite handy for navigating to source code if you are curious about how something is implemented. ## Wrap Up I was genuinely impressed when I started looking at Elixir back in 2016. It's clear that there was a set of goals related to documentation when the language was developed. I found the doc quite useful compared to other languages that I was looking at or working with at the time. The images shown are from documentation now (not 2016). Many of the same things were already in place in Elixir back then. I liked the layout (which has improved quite a bit from 2016). I appreciated the organization of the material. If I found any issues in the docuemntation I was able to get a pull request merged rather quickly (usually in a couple hours). These are all impressions before I tried using the documentation system myself. I'll write another post covering writing documentation in Elixir. </pg-down></pg-up></tab></div>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Exploring functionality available in Elixir Documentation]]></summary></entry><entry><title type="html">Novo Serus S</title><link href="https://fmcgeough.github.io/blog/2024/serus-s/" rel="alternate" type="text/html" title="Novo Serus S"/><published>2024-10-03T10:00:00+00:00</published><updated>2024-10-03T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/serus-s</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/serus-s/"><![CDATA[<p>A few years ago I was in <a href="https://righteousguitars.com/">Righteous Guitars</a> in Roswell Georgia. It’s a store that has a bunch of different makers of wonderful guitars. As they note on their website: “We pride ourselves in having the finest instruments around and treat each one with the realization that it is someone’s dream guitar. If you are looking for an instrument that will speak to your creativity and provide a lifetime of enjoyment, the wait is over”.</p> <p>I had heard of <a href="https://www.novoguitars.com/">Novo Guitars</a>. It’s a small team of people building cool guitars in Nashville, Tennessee. They are the only guitars designed and built by Dennis Fano. It was a newer company at that point and Righteous Guitars was working with them, spec’ing out guitars and then selling them (and working with customers to get their orders into Novo).</p> <p>I tried the Novo Serus S they had. This is a strat type instrument. It has locking tuners, great pickups (2 Throbak single coil pickups and a Throbak SE 101 humbucker) in an incredibly light (for an electric guitar) roasted pine body. I ended up buying it. Some pictures of it are below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-03-serus-s-front.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-10-03-serus-s-back.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Novo Serus S </div> <p>I found a short video of me fooling around with it so I figured I’d upload that as well.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/2024-10-03-serus-s.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Novo Serus S </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[My Novo Serus S]]></summary></entry><entry><title type="html">Collings 290</title><link href="https://fmcgeough.github.io/blog/2024/collings-290/" rel="alternate" type="text/html" title="Collings 290"/><published>2024-09-24T19:00:00+00:00</published><updated>2024-09-24T19:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/collings-290</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/collings-290/"><![CDATA[<p>Single cut Collings 290. In aged Pelham Blue w/Throbak 52-54 P90s. Mahogany neck and body. Bought from Music Emporium in Lexington, Massachusetts in 2021. I believe that the Music Emporium is the largest reseller of Collings guitars.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-09-collings-290-front.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-09-collings-290-back.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Colllings 290 front and back </div> <p>This guitar was named for the scenic 290 highway that winds past the Collings shop though the Texas Hill Country, the 290 is a modern day tribute to the original working man’s rock’n roll guitar.</p> <p>Practice session. Random samples. I generally turn on the Voice Memo app on my laptop and let it run and then listen back later to see how messed up I sounded.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-09-24-collings290-open-c.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-09-24-collings290-2.mp3" controls=""/> </figure> </div> </div> <div class="caption"> Collings 290 </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[My Colllings 290]]></summary></entry><entry><title type="html">Elixir And Design Patterns</title><link href="https://fmcgeough.github.io/blog/2024/elixir-and-design-patterns/" rel="alternate" type="text/html" title="Elixir And Design Patterns"/><published>2024-09-22T11:00:00+00:00</published><updated>2024-09-22T11:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/elixir-and-design-patterns</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/elixir-and-design-patterns/"><![CDATA[<p>Have you ever wondered about the answers you’ve given when someone asks you “what do you do?”. If you are a software developer you may respond “I write software”. Or if you know your company’s goals you might say “I write software that …insert one of the cooler sounding goals that you are aware of. Its when you are talking to someone else who spends their days editing, compiling, testing, debugging, releasing that you get into actual details. What is it that I do all day?</p> <p>I’m interested in how companies create new software to solve a non-trivial problem. From my perspective there are several factors that contribute to a successful effort to solve it. One question I want to explore and hopefully answer is “is this a new problem or one that has already been solved?”. If its a problem that has already been solved then I want to look at any previous solutions and answer the question: “is there a solution that is well understood as superior to others?”. If there is one that is regarded as superior then I will use it (I’ll also want to know why).</p> <p>Is there a name for this type of thing? That is, a problem and a well understood general solution to the problem? Yes, its called a design pattern. Practically, a design pattern is “when I see problem xyz, I should use code that resembles abc”.</p> <p>Some sources for design patterns are:</p> <ul> <li>a design pattern that your organization has created. This tend to be large structural patterns. For example, your organziation may say “if any data needs to be stored it must be stored in a Postgres database” or “if any API is created it must adhere to the best REST API practices and include…”.</li> <li>a design pattern that you have used before successfully to solve other similar problems. After you solve even your first problem you start building an internal mental catalog (if not a library) of what works and what doesn’t.</li> <li>a design pattern created or influenced by the particular language, framework or tool you are using. If you are using Elixir and Phoenix (or other functional languages) then how you construct a solution is going to be different from a solution written in an object-oriented language.</li> <li>a design pattern book or paper that you think fits the problem. You can use a tool like ChatGPT (or similar) to describe the problem that you are trying to solve and ask it to design patterns that may be appropriate.</li> </ul> <p>There has been a lot written about software design patterns. Software design patterns have been the subject of active discussions and numerous books since around 1977. There are two design patterns books that you will see referenced a lot. The first is “The Timeless Way of Building” by Christopher Alexander. Although this is a book about architecture it’s had a big impact on creative thinking in a number of fields. The second book is software-centric. It’s called “Design Patterns: Elements of Reusable Object-Oriented Software” by Erich Gamma, Richard Helm,Ralph Johnson, and John Vlissides (published by Addison-Wesley). These four authors were referred to as the “Gang of Four” (GoF). The book was released in 1994. (there’s all sorts of other books, articles, papers of course but these two are frequently cited).</p> <figure> <picture> <img src="/assets/img/2024-09-design-patterns.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>A software design pattern is a description of a well-defined pattern. It is not an implementation that you can just copy/paste into your code. There are plenty of links to implementations for various languages that you can find with a simple search once you find a pattern that looks like it fits the problem you are trying to solve.</p> <p>“Singleton” is an example of a design pattern. In the “Design Patterns” book this is described as “Ensure a class only has one instance, and provide a global point of access to it”.</p> <p>The description of the pattern may include a sample implementation. The “Design Patterns” book was written from a C++ perspective (Java was not released by Sun Microsystems to the world until 1995 - the year after the GoF book was published). So examples in that book are using C++. It’s much more likely that you’ll see Java example code nowadays.</p> <p>In “Design Patterns” a design pattern has a number of common elements. I’ve listed them below. As mentioned the GoF book was written from the perspective of a C++ developer. This means that a number of the common elements are specific to object-oriented software. However, if you review this list you can perhaps see that a lot of the concepts can be applied to functional programs as well. The book is well worth reviewing even if you program entirely in a functional language.</p> <ul> <li>clear name - a description name that allows developers to use the term when discussing how it should or could be used in the software they are working on.</li> <li>context - from the GoF book the defined contexts are: creational, structural and behavioral.</li> <li>intent - what problem is this pattern solving? what are its goals?</li> <li>motivation - sometimes referred to as forces. Using a design pattern arises out of addressing common problems encountered when building systems. This explains why and when the pattern is ordinarily applied.</li> <li>applicability - a continuation of motivation but with an emphasis on the situations where the pattern is going to be the most effective.</li> <li>structure - the guts of the pattern. This may include class or interactive diagrams. <ul> <li>participants - key classes and objects in the pattern and what role they have in the pattern.</li> <li>collaborations - how the classes and objects interact</li> </ul> </li> <li>consequences - a discussion of the benefits and drawbacks to using the pattern.</li> <li>implementation - a concrete implementation may be provided in a particular language.</li> <li>known uses - description of any “real life” uses of the pattern that already exist</li> <li>related patterns - list of other patterns that this pattern may rely on or that may rely on this pattern.</li> </ul> <p>Pattern discussions led to the development of the <a href="https://c2.com/ppr/titles.html">Portland Pattern Repository</a>. This used the WikiWikiWeb (this was the first user editable website - wiki - created by Ward Cunningham in 1995) to gather documentation on understood patterns. The Hillside Group also gathered patterns together in their own <a href="https://hillside.net/patterns/patterns-catalog">pattern catalog</a>. There are numerous other pattern resources around the Internet and a number of other books that I’d recommend:</p> <ul> <li>“Refactoring: Improving the Design of Existing Code” by Martin Fowler</li> <li>“Domain-Driven Design: Tackling Complexity in the Heart of Software” by Eric Evans</li> <li>“Head First Design Patterns” by Eric Freeman and Bert Bates</li> <li>“The Art of Software Security Assessment” by Mark Dowd, John McDonald, and Justin Schuh</li> </ul> <p>Once the idea of pattterns became widely accepted the concept of an anti-pattern arose. An anti-pattern in software engineering, project management, and business processes is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive. In software the first use of the term seemed to be in 1995 by computer programmer Andrew Koenig. It seemed to get its first big public boost with the publication of the book Anti Patterns by The “Upstart Gang of Four”: William Brown, Raphael Malveau, Skip McCormick, and Tom Mowbray.</p> <figure> <picture> <img src="/assets/img/2024-09-antipatterns_book.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>All of this is great and there is a lot of material to read and videos to watch on YouTube that can make you a better engineer and help you get better at problem solving and create better solutions. However, the bulk of it (almost all) is written from an object-oriented perspective (first C+++ and then Java). Translations of the patterns to other object-oriented languages (like Ruby) are pretty straightforward. That’s not the case for a functional language like Elixir. I think functional programming does eliminate or greatly simplify a number of design patterns. So, are design patterns necessary for functional programming languages?</p> <p>For me the answer is yes. If nothing else it helps to talk about the solution you are working on in a general way. For example, you may have state that you want to store in your application that should be stored as a “Singleton” Design pattern. The way you’d approach creating a singleton would be quite different from the same thing created in Java but the concept is the same. Someone with a background in design patterns can understand what it is you are describing and why you chose to use this pattern. There are also patterns that you are sure to use. For example, if you have an application that calls an API you may need a “Circuit Breaker” pattern. To protect your API you may want to utilize a “Throttle” pattern.</p> <p>What resources on design patterns are available for an Elixir developer? It’s a bit frustrating for people new to Elixir or functional programming in general. If you do a search in Github for “Design Patterns Java” you get 17.6k results. Do that same search for Elixir and you get 11.</p> <p>Recently, more work is in process to explain the role of design patterns in Elixir. For example, a section on Antipatterns was added to the standard Elixir documentation. <a href="https://hexdocs.pm/elixir/main/code-anti-patterns.html">Anti Patterns</a>. There is a book called <a href="https://elixirpatterns.dev/">Elixir Patterns</a> that is in development and will be released soon. José Valim gave a talk at ElixirConf EU 2024 on design patterns. Hopefully all of this work continues and accelerates. Here are some other links that may be useful.</p> <ul> <li><a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/">Design Modeling Made Functional</a></li> <li><a href="https://www.youtube.com/watch?v=agkXUp0hCW8">Gang of None</a></li> <li><a href="https://fsharpforfunandprofit.com/fppatterns/">Functional Programming Design Patterns</a></li> <li><a href="https://arxiv.org/pdf/2307.07069">Typed Design Patterns for the Functional Era</a></li> </ul>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Elixir and using Design Patterns]]></summary></entry><entry><title type="html">Bluegrass Music</title><link href="https://fmcgeough.github.io/blog/2024/bluegrass/" rel="alternate" type="text/html" title="Bluegrass Music"/><published>2024-09-13T10:00:00+00:00</published><updated>2024-09-13T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/bluegrass</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/bluegrass/"><![CDATA[<p>I didn’t grow up listening to bluegrass music or going to bluegrass festivals. My bluegrass exposure up until my early twenties can be summed up as:</p> <ul> <li>listening to Flatt &amp; Scruggs “The Ballad of Jed Clampett” on the Beverly<br/> Hillbillies (Jerry Scoggins is singing on that)</li> <li>happening to step into the family room where Dad was watching Hee-Haw<br/> (before quickly leaving because it seemed more embarrassing than funny).</li> </ul> <p>I’m specifically leaving out a bunch of music that I did listen to that wasn’t bluegrass but was definitely inspired or influenced by bluegrass. It wasn’t that I didn’t <em>like</em> bluegrass. I just never heard it. Nobody I knew was interested in it. I never saw bluegrass albums. I wouldn’t have been able to pick a Martin D-28 from a Gibson J-45 out of a lineup. I’m doubtful whether I could identify a mandolin.</p> <p>I joined the Coast Guard after high school. After I left the Coast Guard I lived in New England. Surprisingly, New England was actually a hotbed of bluegrass music. There was a famous recording company called “Rounder Records” and this was founded in 1970 in Somerville, Massachusetts.</p> <p>There were a number of women that I met who really liked bluegrass music. So I started listening to some of the classics I’d never been exposed to. Like “Will the Circle Be Unbroken” by The Nitty Gritty Dirt Band. It was on that album that I first heard Doc Watson.</p> <p>Doc Watson was blind from a young age (I didn’t know this at the time). He was an amazing flatpicker from North Carolina. After hearing him on the album I saw that he was coming to Boston to play at the Sanders Theater at Harvard University. This is a great venue (acoustically anyway) for music. After he was introduced he was led to his chair center stage by a young lady (that’s when I realized that “Holy shit! He’s blind!”). He played a great concert and after that I went out and bought any of his albums I could find.</p> <p>Doc Watson led me to all sorts of other players like Bill Monroe (generally considered the Father of Bluegrass), Tony Rice (a bluegrass guitar player with amazing proficiency), Old and In the Way (a band Jerry Garcia played banjo in), and Norman Blake (by the way, Norman Blake played dobro on the album “Will the Circle Be Unbroken”). I continue to enjoy bluegrass music to this day and it’s exciting to see a resurgence of interest in bluegrass. First with the Cohen Brothers movie “O Brother, Where are Thou” and then, more recently, with the popularity of Billy Strings.</p> <p>I moved to Atlanta in 1990. Met my (future) wife and we had two daughters. This was how I met Jeff Mosier. One of his daughters and one of our daughters were friends so they’d have play dates and get together at either our place or their place. I knew Jeff was a musician but to me he was just a terrific and patient father and all-around good guy. I had no idea he had played with Phish, the Allman Brothers, etc. Or that he had been part of the iconic Atlanta band “Aquarium Rescue Unit”. Jeff was someone, thanks to his Grandma, who went to bluegrass festivals from a young age. Sitting around a campfire till 2 or 3 am and sharing songs and licks.</p> <p>In 2024, we saw he was playing at a venue in Roswell Georgia called Mimosa Hall. This isn’t that far from us so we got tickets. And in May 2024 we saw him and his brother play. Jeff played the banjo and his brother played his grandmother’s Martin D-35 from the 1990s. It was awesome to finally hear him! He has a very interesting approach to the banjo. And even though we haven’t seen him for years he gave both my wife and I a big hug. So still an incredibly nice human being. I recorded a little snippet of one song they played but mostly I just sat and listened (with a small audience) to him play and tell stories. We were like 10 feet from the music - which is ideal for this type of music.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-05-09-jeff-mosier-roswell.mp3" controls=""/> </figure> </div> </div> <div class="caption"> Jeff Mosier, Mimosa Hall, Roswell, GA May 2024 </div> <p>I’ve gotten into trying to play guitar myself over the years but was always very busy with work and family and never had much time for it. But I’ve got a bit more time now and so I’m trying to learn something beyond some basic blues riffs and the pentatonic scale. I’ll even occasionally try to play bluegrass (Note: I’m not very good at it at the moment). I have a Mavis Mule resonator guitar and I had tuned it down to Open-C. This is C-G-C-G-C-E (from lowest string to highest). I was fooling around with it and recorded this snippet of a “version” (not a good one) of Norman Blake’s classic bluegrass tune “Randall Collins”. This instrument is probably not anyone’s first choice for bluegrass but that didn’t bother me. Everything I play on any of my instruments gives me an opportunity to learn and grow.</p> <p>If you are interested you should definitely check out Norman Blake. His music is phenomenal. And you should try and listen to all different styles of music. Each one has something special to touch our hearts and teach us.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-09-13-randall-collins.mp3" controls=""/> </figure> </div> </div> <div class="caption"> Mavis Mule Resonator in Open - C </div> <h2 id="links">Links</h2> <p>Here are some Spotify links to bluegrass (or bluegrass influenced) albums I enjoy:</p> <ul> <li><a href="https://open.spotify.com/album/7KoAd8Jt2udhxxRZ2uiiee?si=KZW2Yz9vTpeM9Z4AYO5_lQ">Norman Blake, Whiskey Before Breakfast</a></li> <li><a href="https://open.spotify.com/album/2ikwlUUIe2EiOO2gDZjOJb?si=acNLq_YeQPeRnksQUbMtiw">Tony Rice, Church Street Blues</a></li> <li><a href="https://open.spotify.com/album/2zCsaLXYPKqJ0WKKAOLWvx?si=aumcG23GTQ-k9pXm6Q1_xg">Old and In the Way, That High Lonesome Sounds</a></li> <li><a href="https://open.spotify.com/album/3HDyUNqZY6ffpGHm370MdX?si=mCG8tDc_TL-eem24nqY9Wg">Doc Watson, The Essential Doc Watson</a></li> <li><a href="https://open.spotify.com/album/1dfvcFHSox0YKcPMxDrLIs?si=ElZsuZHNT4aJn4c7nXWuEQ">Nitty Gritty Dirt Band, Will the Circle Be Unbroken</a></li> <li><a href="https://open.spotify.com/album/3YH8rxsSyINBfebMRtbCBf?si=xylZOD4NTAq8osGbaUA3pg">Billy Strings, Billy Strings EP</a></li> <li><a href="https://open.spotify.com/album/4yoRGOx7QTGiMftU2ap1sv?si=-xvsIHX1T5-089FsMSo91g">Bill Monroe, The Essential Collection</a></li> <li><a href="https://open.spotify.com/album/7gzX88qS3Vx2r87g5pbdfJ?si=aFomh-tBQT-80IX0X5Zdbg">O Brother, Where Art Thou, Soundtrack</a></li> <li><a href="https://open.spotify.com/album/4jxokHekH1qSad1DcC82ku?si=Byh9MyEPTUajvtBISlkc2w">Grateful Dead, Workingman’s Dead</a></li> </ul>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Trying to play bluegrass on my Mavis Mule resonator]]></summary></entry><entry><title type="html">Elixir and Ecto’s telemetry events</title><link href="https://fmcgeough.github.io/blog/2024/ecto-telemetry/" rel="alternate" type="text/html" title="Elixir and Ecto’s telemetry events"/><published>2024-09-02T12:00:00+00:00</published><updated>2024-09-02T12:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/ecto-telemetry</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/ecto-telemetry/"><![CDATA[<blockquote> <p>Telemetry is a lightweight library for dynamic dispatching of events, with a focus on metrics and instrumentation. Any Erlang or Elixir library can use telemetry to emit events. Application code and other libraries can then hook into those events and run custom handlers.</p> </blockquote> <p>I created a simple sample Elixir project to demonstrate how to use Ecto’s telemetry events. It’s available in <a href="https://github.com/fmcgeough/demo_telemetry">github</a>.</p> <p>The project shows how to:</p> <ul> <li>use telemetry_prefix on your repo to change the name of the event</li> <li>use telemetry_options with your queries to allow you to easily identify what database activity has occurred in your metrics handler</li> <li>what event name is if you do not use telemetry_prefix for your repo</li> </ul> <p>The sections below provide information that might be helpful when you are first using Ecto telemetry.</p> <h2 id="what-is-telemetry-what-is-a-telemetry-event">What is Telemetry? What is a Telemetry Event?</h2> <p>Telemetry, as a general concept, has been around quite a while. It refers to the gathering of measurements (and other information) at or near the point of what is being measured. Then automatically transmitting that information to a system that allows analysis of the measurements. Sometimes you will see the term “telemeter” used to describe a device used to capture measurements.</p> <blockquote> <p>A telemeter is a physical device used in telemetry. It consists of a sensor, a transmission path, and a display, recording, or control device. Electronic devices are widely used in telemetry and can be wireless or hard-wired, analog or digital. Other technologies are also possible, such as mechanical, hydraulic and optical.</p> </blockquote> <p>Early telemetry systems may seem primitive to us but they were revolutionary at the time. For example, early steam engines performed measurements using a mercury pressure gauge. The gauge indicated the measurement and could be read at a short distance. Our modern use of telemetry involves transmitting measurements data in large volumes from multiple points to a common analysis system where graphs, charts, gauges and general queries over measurement data is possible.</p> <p>A telemetry event is a measurement (or measurements) at a specific point in time and given a timestamp and a name. Telemetry events can become a history (of sorts) for your system.</p> <h2 id="why-do-i-want-telemetry">Why do I want Telemetry?</h2> <p>Embracing telemetry allows monitoring your software. You can use the measurements to evaluate and monitor the general health of your software. You can use it to spot trends that require investigation and evaluation. For example, it’s important to know if APIs provided by your service are suddenly 50% slower. That’s something that probably needs immediate investigation! And it’s easily visible if you are using telemetry.</p> <p>In the context of Ecto, using it’s telemetry events can give you:</p> <ul> <li>how many times is a particular query executed over a time interval?</li> <li>what is the current speed of a query?</li> <li>what are the trends over time for number of executions and speed of queries?</li> </ul> <h2 id="how-does-telemetry-work-in-elixir">How does Telemetry work in Elixir?</h2> <p>In Elixir and Erlang telemetry is generated by the <a href="https://hex.pm/packages/telemetry">telemetry library</a>. All libraries and applications generating telemetry events use the telemetry library.</p> <blockquote> <p>There are some Erlang libraries that do not use the telemetry library. This is because the telemetry library and it’s conventions were not around when the library was first written. For a number of libraries telemetry events have been added, but its possible you will use a library that does not generate telemetry events. In some cases the library may generate its own version of telemetry events that you can coerce into the telemetry system.</p> </blockquote> <p>In Elixir (and Erlang) telemetry events can have both measurements and metadata. Metadata provides data that adds meaning to the measurement. For example, in an Ecto database activity telemetry event the measurement data tells you how long some SQL took to execute. The metadata tells you the Repo used for the SQL.</p> <p>An event is named using a List of atoms. That is, the name identifies the general category of the event. That is, we may have an event named <code class="language-plaintext highlighter-rouge">[:my_app, :sonar_system, :ping]</code> that is used to report some sonar ping event. This is its name but there can be multiple telemetry events of this kind generated, each with its own timestamp.</p> <p>Ecto, Phoenix and other libraries you may use have a dependency on the telemetry library. When your app starts the telemetry library starts a GenServer that creates an <code class="language-plaintext highlighter-rouge">ets</code> table (see src/telemetry_handler_table.erl in the telemetry library). This is used to connect generated events to registered callbacks for those events. The callback is responsible for doing something with the generated event - such as sending it on to Datadog or Prometheus.</p> <h2 id="how-do-i-listen-for-telemetry-events">How Do I Listen for Telemetry Events?</h2> <p>There are two functions in the telemetry library for registering your interest in events:</p> <ul> <li><code class="language-plaintext highlighter-rouge">attach/4</code> - used to attach to a single event of interest</li> <li><code class="language-plaintext highlighter-rouge">attach_many/4</code> - used to attach to a list of events of interest</li> </ul> <p>These functions are almost identical. The different is <code class="language-plaintext highlighter-rouge">attach/4</code> takes a single event name as its second parameter. The <code class="language-plaintext highlighter-rouge">attach_many/4</code> takes a list of event names as its second parameter. The other parameters are exactly the same. Your application should use only one of these. It makes sense to use <code class="language-plaintext highlighter-rouge">attach_many/4</code> even if you are currently interested in only one event. Over time you most likely will want to listen to more.</p> <p>Here are the parameters to these functions:</p> <ul> <li>handler_id - this is a unique id. It’s defined as a term. This means it can be any value - a String, an atom, a Map, etc. Ordinarily, developers use either an atom (module name) or a String. The important thing to keep in mind is that it must be unique. That is, your name cannot conflict with any other id registered to receive telemetry events.</li> <li>event_name (<code class="language-plaintext highlighter-rouge">attach/4</code>) or list of event_name (<code class="language-plaintext highlighter-rouge">attach_many/4</code>) - An event name is a unique list of atoms that identify an event. Since this must be unique an event name’s list of atoms usually starts with the application name. For example, <code class="language-plaintext highlighter-rouge">:ecto</code> or <code class="language-plaintext highlighter-rouge">:phoenix</code>. In the case of your own service this would be your app name. That can be found in your mix.exs file. The atoms that follow make the event unique for the application. You’ll want to identify a convention used by your app if you are going to generate telemetry events.</li> <li>handler_function - This is the function that is called by the telemetry library when an event matches the event_name or list of event_name passed in the <code class="language-plaintext highlighter-rouge">attach/4</code> or <code class="language-plaintext highlighter-rouge">attach_many/4</code> call. There’s an example below and some hints on how to write a handler function.</li> <li>handler_config - This is your config data. It’s defined as a term. This means it can be any value that you find useful. Maps are commonly used. But probably the most common thing is to pass nil for this value. It’s not required and unless you want data passed by the telemetry library back to you to handle each event you should just use <code class="language-plaintext highlighter-rouge">nil</code>.</li> </ul> <p>Once you have attached the handler your handler function will start being called when an event is generated. The code path for an event is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>generate event -&gt; telemetry library
                  for each handler for event
                            -&gt; call the handler function
</code></pre></div></div> <p>The basic mechanics of plugging into Ecto’s telemetry events are:</p> <ul> <li>figure out the event names and put them in a list</li> <li>call <code class="language-plaintext highlighter-rouge">:telemetry.attach_many</code> and give the telemetry system a handler function. The handler is a function that takes four parameters: <ul> <li>The event name</li> <li>Measurements (Map)</li> <li>Metadata (Map)</li> <li>Handler Config - this is data that you pass into the telemetry library when informing it that you want to listen for events. In most cases applications do not use this and nil is passed into the telemetry library and it is what is passed to the handler function for this parameter.</li> </ul> </li> </ul> <h2 id="how-and-when-are-telemetry-events-generated-in-ecto">How and When are Telemetry Events Generated in Ecto?</h2> <p>Ecto is the library that Elixir developers use to interact with a relational database. Different databases implement behaviour that allows Ecto to interact with different databases without having all the code inside the ecto library itself. So, for example, there is a <a href="https://hexdocs.pm/postgrex/readme.html">postgrex</a> library for Postgresql and a <a href="https://hexdocs.pm/myxql/readme.html">myxql</a> library for MySQL.</p> <blockquote> <p>Ecto is actually divided into two libraries: ecto and ecto_sql. This is because there are features in Ecto that are very useful for apps that do not use a relational database. For example, it is common to use Ecto to validate parameters for an API.</p> </blockquote> <p>There are two telemetry events generated by ecto.</p> <ul> <li>a Repo initialization event, This occurs when an <code class="language-plaintext highlighter-rouge">Ecto.Repo</code> starts up (its generated by the <code class="language-plaintext highlighter-rouge">Ecto.Repo.Supervisor</code> module in the ecto library). This event always has the same event name. It is <code class="language-plaintext highlighter-rouge">[:ecto, :repo, :init]</code>.</li> <li>a database activity event. This is generated when a database interaction (select, insert, update, delete, etc, etc) occurs on a Repo connection. This event does not have a fixed name. It’s naming is discussed below. This event is generally the only one that developers are interested in. It’s metrics surrounding the app’s interaction with the database. By capturing this data the developer can graph what queries are executing the most, which are the slowest queries, and other useful information. This is described in the Ecto documentation as an “Adapter Specific Event”. This somewhat awkward naming is not that important. I’ll refer to it in this doc as a “Database Activity Event”.</li> </ul> <h2 id="database-activity-event">Database Activity Event</h2> <p>As mentioned previously telemetry events are named. The name is given on generation as the first parameter to <code class="language-plaintext highlighter-rouge">:telemetry.execute/3</code>. It’s pretty clear what the name is for the event generated in <code class="language-plaintext highlighter-rouge">Ecto.Repo.Supervisor</code>. It’s hard-coded as <code class="language-plaintext highlighter-rouge">[:ecto, :repo, :init]</code>.</p> <p>The other telemetry event (the more useful one) has the name of your repo module as the event name, by default. This takes your Repo module name and converts it from camel-case to snake-case. So, if your Ecto repo is called <code class="language-plaintext highlighter-rouge">MyApp.MyRepo</code> the event name is <code class="language-plaintext highlighter-rouge">[:my_app, :my_repo]</code>.</p> <p>You can set the event name yourself by using a <code class="language-plaintext highlighter-rouge">telemetry_prefix</code> on your Ecto Repo definition in your config files. For example, you might set the <code class="language-plaintext highlighter-rouge">telemetry_prefix</code> to <code class="language-plaintext highlighter-rouge">[:my_app, :ecto, :primary_db]</code> for a Repo associated with your primary database and <code class="language-plaintext highlighter-rouge">[:my_app, :ecto, :replica_db]</code> for your replica database. The event that Ecto generates will be your telemetry_prefix concatenated with <code class="language-plaintext highlighter-rouge">[:query]</code>.</p> <h2 id="what-data-is-in-a-database-activity-event">What Data is In A Database Activity Event?</h2> <p>The activity event passes the following measurements and metadata.</p> <h3 id="measurements">Measurements</h3> <p>The :measurements map may include the following, all given in the :native time unit:</p> <ul> <li>:idle_time - the time the connection spent waiting before being checked out for the query</li> <li>:queue_time - the time spent waiting to check out a database connection</li> <li>:query_time - the time spent executing the query</li> <li>:decode_time - the time spent decoding the data received from the database</li> <li>:total_time - the sum of (queue_time, query_time, and decode_time)️</li> </ul> <h3 id="metadata">Metadata</h3> <ul> <li>:type - the type of the Ecto query. For example, for Ecto.SQL databases, it would be :ecto_sql_query</li> <li>:repo - the Ecto repository (the module name)</li> <li>:result - the query result</li> <li>:params - the dumped query parameters (formatted for database drivers like Postgrex)</li> <li>:cast_params - the casted query parameters (normalized before dumping)</li> <li>:query - the query sent to the database as a string</li> <li>:source - the source the query was made on (may be nil)</li> <li>:stacktrace - the stacktrace information, if enabled, or nil</li> <li>:options - extra options given to the repo operation under :telemetry_options</li> </ul>]]></content><author><name></name></author><category term="elixir"/><category term="telemetry"/><summary type="html"><![CDATA[How to use Ecto's telemetry events]]></summary></entry><entry><title type="html">Open-D Minor Tuning</title><link href="https://fmcgeough.github.io/blog/2024/open-d-minor-tuning/" rel="alternate" type="text/html" title="Open-D Minor Tuning"/><published>2024-08-23T10:13:00+00:00</published><updated>2024-08-23T10:13:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/open-d-minor-tuning</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/open-d-minor-tuning/"><![CDATA[<p>Open D Minor Tuning is not a real popular open tuning. Most people are familiar with Drop-D. Then if you use a slide you most likely know about a tuning from one your favorite slide players (Open D, Open G or Open E). Open D Minor has a haunting tone and is what was used by Skip James to record classics as “Devil Got My Woman” and “Hard Time Killing Floor”. But it’s also been used in more recent music. For example, the following songs use Open D Minor:</p> <ul> <li>“Spoonman” by Soundgarden</li> <li>“Wake Up” by Rage Against The Machine</li> <li>“Whatsername” by Green Day</li> </ul> <p>I tuned the Mavis Mule resonator to Open D Minor for a practice session. Here are a couple of recordings from that. No editing. Just what I grabbed to hear how I sounded. So, pretty much a mess. But it is a fun tuning to try out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-08-23-Resonator-Open-D-Minor-Tuning1.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-08-23-Resonator-Open-D-Minor-Tuning2.mp3" controls=""/> </figure> </div> </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Practice session with Open-D Minor Tuning]]></summary></entry><entry><title type="html">Lowden F-34 koa/sitka</title><link href="https://fmcgeough.github.io/blog/2024/lowden-in-open-g/" rel="alternate" type="text/html" title="Lowden F-34 koa/sitka"/><published>2024-07-26T15:13:00+00:00</published><updated>2024-07-26T15:13:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/lowden-in-open-g</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/lowden-in-open-g/"><![CDATA[<p>On December 31st, 2023 my wife and I were at a party. She was having fun. I was staring at a website. The reason I was staring at the site instead of having fun with friends is that I had visited the site earlier in the day.</p> <p>It was “Bluedog Guitars”. This was a boutique guitar shop in Vancouver, Canada. The store was closing. Apparently they had posted that a while before I visited the site. But it was an “everything must go” sale. And by the time I visted there were only 3 or 4 guitars left out of the original stock of many fine guitars.</p> <p>One of the guitars was a Lowden F-34 with Koa back and sides and a Sitka top. I really liked this guitar and the price was quite low compared to what these guitars go for. So, though I didn’t need another guitar, I bought the guitar.</p> <p>I decided to share some pictures of it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-07-26-lowden5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It’s a wonderfully sounding instrument. I like the feel of the neck and its unique sound. It’s great for finger-picking but it holds up fine with strumming.</p> <p>I was over a friend’s house and we were playing bluegrass songs. Like Doc Watson’s version of “Shady Grove”. Shady Grove is a traditional Appalachian song. It’s covered by lots of artists. Its a simple song but, like a lot of bluegrass tunes, provides a means for a lot of improvisation.</p> <p>I had brought my Mavis Mule resonator and the Lowden to my friend’s home. I wanted to let the folks i was visiting see both the Mule and the Lowden. They are cool guitars. I had the Mule tuned to Open-D and tried to play along a bit but eventually switched to the Lowden.</p> <p>It’s been a couple days and I thought “I should really try the Lowden in Open G tuning and with a slide”. So anyway, this is a recording from me playing around with that.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/2024-07-26-lowden-open-g.mp3" controls=""/> </figure> </div> </div> <p>This recording has nothing to do with “Shady Grove”. Other than I had been thinking of it earlier.</p>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="acoustic"/><summary type="html"><![CDATA[Description of My Lowden F-34 koa/sitka]]></summary></entry><entry><title type="html">Black Mountain Slide</title><link href="https://fmcgeough.github.io/blog/2024/black-mountain-slide/" rel="alternate" type="text/html" title="Black Mountain Slide"/><published>2024-07-26T15:13:00+00:00</published><updated>2024-07-26T15:13:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/black-mountain-slide</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/black-mountain-slide/"><![CDATA[<p>The Black Mountain company (Black Mountain picks) makes some great tools for guitarists. I first became aware of their company when I was having thumb pain. I had evidently worked way too hard on a particular bluegrass song. I had gripped the heck out of my pick and managed to make my thumb feel pretty bad. I was looking for something that would allow me to continue to play without putting pressure on my thumb. I found Black Mountain thumb picks.</p> <p>I ordered an assortment of different style thumb picks so I could test a few out and find one that worked for me. These worked great! Even after my poor thumb got a bit of a rest and felt fine I continued to use the thumb picks (along with my regular picks). The thumb picks have a spring inside them so they lock on very securely.</p> <p>A while later I ordered the Black Mountain Slide Ring. This is a cool type of slide that leaves you with all 4 fingers to use for chords (or whatever). This slide also has a spring so you can avoid issues with slide slipping. Its got a nice weight to it and I’ve used it often.</p> <p>I recently saw that they came out with a full-sized slide. The Slide Ring is made of tungsten steel. The full-sized slide is nickel-plated. It also has a spring inside it so you can ensure that it will work well regardless of your finger size. The company sells a small, medium and large. I went with a medium and it works fine on my pinky finger (because of the spring).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-08-05-blackmountain-slide1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/2024-08-05-blackmountain-slide2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Black Mountain Full-Sized Slide </div> <p>I recorded a short video to demonstrate it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/2024-08-05-mule-steel-slide.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Black Mountain Full-Sized Slide on a Mavis Mule Resonator. </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Description of My New Black Mountain Slide]]></summary></entry><entry><title type="html">The ex_sleeplock library</title><link href="https://fmcgeough.github.io/blog/2024/ex-sleeplock/" rel="alternate" type="text/html" title="The ex_sleeplock library"/><published>2024-06-27T12:41:00+00:00</published><updated>2024-06-27T12:41:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/ex-sleeplock</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/ex-sleeplock/"><![CDATA[<p>I finally got around to publishing the <a href="https://hex.pm/packages/ex_sleeplock">ex_sleeplock</a> library to hex.pm. This is a useful library for a particular problem.</p> <h2 id="reason-for-library">Reason for Library</h2> <p>The reason this library got developed was because I was dealing with multiple services that served an API and consumed Kafka messages. Both of these activities required a database connection. Database connections available in limited quantities (set by the pool size). The API should have priority if a decision has to made on handing out a connection. The API should always have an available connection to process a request.</p> <p>It’s clear that a service can have lots of simultaneous requests that it needs to handle. For the services I was working with the service handled many simultaneous requests well. The problem was processing messages from Kafka.</p> <p>The service used the <a href="https://hexdocs.pm/brod/readme.html">brod</a> library. In particular, it used the <a href="https://hexdocs.pm/brod/brod_group_subscriber_v2.html">brod_group_subscriber_v2</a> module to consume messages. brod_group_subscriber_v2 starts a process for each partition that is assigned to this client node.</p> <p>The messages can arrive in parallel. Assume a topic with 64 partitions. The Kafka clients act as a consumer group. So Kafka splits the partitions between each member of that consumer group. Assuming we have 4 clients, for example, it means that 16 messages could arrive “simultaneously”.</p> <h2 id="how-brod-passes-messages-to-an-app">How Brod Passes Messages to An App</h2> <p>Brod provides a behaviour definition that the app must implement. The main callback function is <code class="language-plaintext highlighter-rouge">handle_message/2</code>. This is defined in the brod Erlang code as:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-callback handle_message(brod:message(), State) -&gt;
      {ok, commit, State}
    | {ok, ack, State}
    | {ok, State}.
</code></pre></div></div> <p>When a message arrives for any of brod partition processes the brod code calls the app’s implementation of <code class="language-plaintext highlighter-rouge">handle_message/2</code>. The app is responsible for processing the message and returning a value that lets brod know whether to “commit” the offset of the read message, just “ack” the message or tell Kafka nothing.</p> <p>The callback is typically code that is going to examine the incoming Kafka message and validate it. The code might convert it into something that the app can more easily process. In any case, at some point a processing function is called that is what needs to talk to the database. The processing function is something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def process_incoming_message(message) do
   &lt;message processing logic&gt;
end
</code></pre></div></div> <h2 id="database-pool-size">Database Pool Size</h2> <p>The pool size was typically set to 10 for each pod. With 16 partitions assigned it is easy to hit a situation where the Kafka processing used up all 10 of the connections. And if there is a huge flood of messages this situation might go on for a while. The API could have trouble getting a database connection before a timeout is reached.</p> <h2 id="separate-the-repos">Separate the Repos?</h2> <p>One possible solution is to separate the Ecto Repos. Declare one as the WebRepo and give it the number of connections you think it might want. Declare another as the KafkaRepo and give that Repo its own connections. This works since now the API is using its own connections. However, its also a bit awkward given that there are times when no messages are coming in from Kafka. No connections are actually needed for it. But the API might be getting hit harder than usual. Having the 10 total connections available would be good.</p> <h2 id="solving-the-problem-with-ex_sleeplock">Solving the Problem with ex_sleeplock</h2> <p>To solve this the ex_sleeplock library was created. What this does is create a named process with an application specified level of concurrency. The message processing code did call this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def process_incoming_message(message) do
   &lt;message processing logic&gt;
end
</code></pre></div></div> <p>Instead it became this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def process_incoming_message_throttled(message) do
  ExSleeplock.execute(:kafka_consumer_throttle, fn -&gt; process_incoming_message(message) end)
end
</code></pre></div></div> <p>The Kafka message processor started calling <code class="language-plaintext highlighter-rouge">process_incoming_message_throttled/1</code> instead of <code class="language-plaintext highlighter-rouge">process_incoming_message/1</code>. All the other code remained the same. The end result was the number of processes that could call <code class="language-plaintext highlighter-rouge">process_incoming_message/1</code> was limited to the level of concurrency specified in an app config file.</p> <h2 id="using-the-library">Using the Library</h2> <p>The library is fairly easy to use. You can even configure the locks that you want in our application config and the library will create the processes for each lock when it starts up. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config :ex_sleeplock, locks: [%{name: :kafka_consumer_throttle, num_slots: 2}]
</code></pre></div></div> <p>This configures the library to allow a maximum of two processes to be in the <code class="language-plaintext highlighter-rouge">process_incoming_message/1</code> code at once.</p> <p>The library supervises all the lock processes. So there isn’t extra things to think about or maintain in the code. Which seemed like a good thing as well.</p> <h2 id="so-thats-the-story">So That’s The Story</h2> <p>Anyway, I’m happy to share this library. Its implementation was based off an existing Erlang library called <a href="https://hex.pm/packages/sleeplocks">sleeplocks</a>. We used this at first but we wanted to have the library itself manage the supervision and we wanted some additional things like telemetry events and creation of the locks via a config file. That library is perfectly fine though. And it solves the same problem.</p> <p>If you use the library and want to have it do something else, do things differently or whatever then I’m happy to review pull requests. The repo for the project is <a href="https://github.com/fmcgeough/ex_sleeplock">ex_sleeplock library</a>.</p>]]></content><author><name></name></author><category term="elixir"/><category term="kafka"/><category term="concurrent"/><summary type="html"><![CDATA[Limiting concurrent processes in Elixir]]></summary></entry></feed>