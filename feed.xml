<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-12T16:19:45+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">John Hammond and Wicked Grin</title><link href="https://fmcgeough.github.io/blog/2025/tom-waits-2-19/" rel="alternate" type="text/html" title="John Hammond and Wicked Grin"/><published>2025-08-12T11:57:00+00:00</published><updated>2025-08-12T11:57:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/tom-waits-2-19</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/tom-waits-2-19/"><![CDATA[<p>Wicked Grin is the twenty-eighth studio album from blues singer John P. Hammond. The album is a collection of songs written by Hammond’s friend Tom Waits, who produced the project. It was released in March 2001. It’s a wonderful album. Here’s the track listing.</p> <table> <thead> <tr> <th style="text-align: left">Title</th> <th style="text-align: center">Writer(s)</th> <th style="text-align: right">Length</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">“2:19”</td> <td style="text-align: center">Kathleen Brennan, Tom Waits</td> <td style="text-align: right">4:42</td> </tr> <tr> <td style="text-align: left">“Heartattack and Vine”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">4:40</td> </tr> <tr> <td style="text-align: left">“Clap Hands”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">3:59</td> </tr> <tr> <td style="text-align: left">“‘Til the Money Runs Out”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">4:02</td> </tr> <tr> <td style="text-align: left">“16 Shells From a Thirty-Ought Six”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">4:37</td> </tr> <tr> <td style="text-align: left">“Buzz Fledderjohn”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">4:14</td> </tr> <tr> <td style="text-align: left">“Get Behind the Mule”</td> <td style="text-align: center">Kathleen Brennan, Tom Waits</td> <td style="text-align: right">5:54</td> </tr> <tr> <td style="text-align: left">“Shore Leave”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">2:58</td> </tr> <tr> <td style="text-align: left">“Fannin Street”</td> <td style="text-align: center">Kathleen Brennan, Tom Waits, Huddie Ledbetter</td> <td style="text-align: right">4:48</td> </tr> <tr> <td style="text-align: left">“Jockey Full of Bourbon”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">3:32</td> </tr> <tr> <td style="text-align: left">“Big Black Mariah”</td> <td style="text-align: center">Tom Waits</td> <td style="text-align: right">4:09</td> </tr> <tr> <td style="text-align: left">“Murder in the Red Barn”</td> <td style="text-align: center">Kathleen Brennan, Tom Waits</td> <td style="text-align: right">5:56</td> </tr> <tr> <td style="text-align: left">“I Know I’ve Been Changed”</td> <td style="text-align: center">Traditional</td> <td style="text-align: right">2:19</td> </tr> </tbody> </table> <p>The first song on the album is “2:19”. It’s a droning song in A minor and I thought it’d be great for slide guitar practice on my Mule Mavis resonator.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-08-12-2-19.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> Mule Mavis and 2:19 </div> <p>The phrase “wicked grin” appears in the lyrics of “2:19”, specifically in the line: “She didn’t bring my whiskey, she didn’t bring my gin. She had a hat full of feathers and a wicked grin.”</p> <p>I used a ceramic Rock Slide and finger-picked through a Wooly Coats amp and recorded it with my iPhone.</p>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[John Hammond's versions of Tom Wait's songs]]></summary></entry><entry><title type="html">Yamaha THR30 II Wireless Amp</title><link href="https://fmcgeough.github.io/blog/2025/yamaha-thrii-amp/" rel="alternate" type="text/html" title="Yamaha THR30 II Wireless Amp"/><published>2025-07-25T12:45:00+00:00</published><updated>2025-07-25T12:45:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/yamaha-thrii-amp</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/yamaha-thrii-amp/"><![CDATA[<p>I recently sold a boutique amp. It was the Carr Super Bee 1x12. It was an awesome amp and sounded great. I bought it when it first came out and used it quite a bit. But I had stopped using it as much and I wanted to sell it to someone who could use it more. Since I then had a bit of cash I decided to buy a Yamaha THR30 II Wireless Amp, along with the Line 6 Relay G10T.</p> <p>Yamaha was one of the first companies to introduce a desktop amp. It’s meant to be an at home tool. This one is the second generation.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-07-25-yamaha_thr30.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Yamaha THR30 II Wireless Amp </div> <p>I bought a white one. They also come in black and cream color. I purchased it through Sweetwater (the magical Indiana music store). Details on the amp:</p> <ul> <li>30-watt, 1-channel 2 x 3.5-inch</li> <li>Internal rechargeable battery or AC power</li> <li>iOS and Android apps, Windows/OS X apps</li> <li>USB 2 connection that allows 2 channels of recording and 2 channels of playback from computer</li> <li>Headphone output</li> <li>Built in effects (reverb, chorus, flanger, phaser, tremolo, echo, compressor)</li> <li>Selection of amp sounds and mic choices (dynamic, tube, and condenser)</li> <li>Built in tuner</li> <li>Built in Line 6 receiver that works with Line 6 Relay G10T</li> <li>Input jack for guitar cable and also to recharge the Line 6 Relay G10T</li> </ul> <p>The amp works fine with an acoustic. Yamaha also sells a desktop amp that is meant for acoustic-electric - THR30IIA.</p> <p>The effects can be setup and saved from controls on the unit itself or via the app THR Remote. The app connects to the amp via bluetooth. There is a Bluetooth button on the unit. You press it down for 3 seconds to enable pairing. I had no issues with this. The app has a quirky user experience but I didn’t find it that hard to figure out.</p> <p>I plugged the amp into AC power and plugged the Line 6 Relay G10T into the input port and left it alone for a couple hours. This ensures that both amp and wireless transmitter are charged. The transmitter will blink red when it’s not charged nearly enough, then green blinking when its charged enough and solid green when its fully charged.</p> <p>Once everything is charged you’ll need to update software for both the amp and the Line 6 Relay G10T. To do this you’ll need to hook up your computer via USB. The port on the Yamaha will need a USB-B male connector. You’ll need to install the <a href="https://usa.yamaha.com/support/updates/thr_remote_mac.html">THR Remote App</a> from the Yamaha website. You’ll probably also want to install the <a href="https://o.steinberg.net/en/support/downloads_hardware/yamaha_steinberg_usb_driver.html">Yamaha Steinberg USB Driver</a>. The Yamaha doc indicates that they want the USB cable to be 3 feet or less. I was able to use a 6 Feet USB 2.0 Type-A Male to Type-B Male Connection Cable from PWR+. It’s compatibility list did not mention the THR30II amp. It had “Yamaha Digital Piano, Roland Music Workstation, Donner DEP 10 20 45 DDP-80 88 Key Digital Pianos, Alesis, Korg, Casio Keyboard, AKAI Professional, Arturia KeyLab MiniLab, Midiplus, Nektar Impact, Novation, M-Audio MIDI Controller, Native Drum Controller, Pioneer, Hercules DJControl Inpulse, Numark DJ Mixer, Behringer U-Phoria, PreSonus AudioBox Audio Interface, Microphone, Studio Equipment to a Laptop, Computer (Mac PC) and other devices with a USB-B port”. With this big of a list I figured it probably would work and it did. I plugged it into a Anker dongle to convert from USB 2.0 Type-A to USB-C for my MacBook Pro.</p> <p>Here’s the process I followed to install the Steinberg USB driver.</p> <ol> <li>Turn computer off - shutdown.</li> <li>Press and hold power button until computer boots in safe mode.</li> <li>Press on “Options”</li> <li>Select your user profile (enter password)</li> <li>Go to Utilities menu and select “Startup Security Utility” and select your Disc. It will ask for your password again.</li> <li>Select “Security Policy”. This will most likely be set to “Full Security” if you’ve never messed with this before. Change to “Reduced Security” radio button and check the checkbox identified as “Allow user management of kernel extensions from identified developers”.</li> <li>Click OK and you’ll have to enter your password again.</li> <li>Restart (from menu)</li> <li>Start Steinberg driver install. At the end of the install a dialog will appear “System Extension Updated”. You’ll need to go to “Privacy &amp; Security System Settings” to indicate that the Yamaha driver can be used.</li> </ol> <p>After this I installed the THR Remote app. There were no special steps needed for this.</p> <p>To hook up the USB cable</p> <ol> <li>Remove the transmitter from the input port on the amp</li> <li>Power on the THR30II amp. Make sure you are plugged into AC power. You don’t want it powering down half-way through the upgrade.</li> <li>Plug in the USB cable to amp</li> <li>Plug in USB cable to computer</li> <li>Start THR Remote app</li> </ol> <p>The software should identify the amp and indicate that it must be upgraded. It gives you instructions. It takes a few minutes.</p> <p>Once the amp is updated it’s time to upgrade the transmitter.</p> <ol> <li>Stop the THR Remote app on computer</li> <li>Unplug the USB cable from computer</li> <li>Plug in the transmitter to the amp input port</li> <li>Plug in USB cable to computer</li> <li>Start THR Remote app</li> </ol> <p>The software should identify the Line 6 transmitter and indicate that it must be upgraded. It gives you instructions. It takes a few minutes.</p> <p>Note: if you don’t need an upgrade then the THR Remote app will just announce that it can see the amp.</p> <p>Once that was all done I powered on the amp and set it to Acoustic and plugged in the Line 6 Relay G10T to my old acoustic that has a pickup in it. Messed about with the knobs to allow me to hear the guitar and recorded a brief snippet on my phone to ensure it worked.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-07-25-yamaha-thr30-acoustic.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> iPhone Recorded Sample of Acoustic with Yamaha THR30II Wireless Amp </div> <p>I fiddled around with the effects for a while to ensure that they all seemed to work. I’ll work with recording to Mac later and post about my experience with that.</p> <p>All in all it’s a nice tool. It’s got a good sound and the effects are fine. The 4 to 5 hour battery life when unplugged is convenient. You can bring it to a friend’s house and not worry about power cables. The Line 6 transmitter, sold separately, is essential I think. It gets rid of the need for a guitar cable and increases the odds that you’ll use the amp more often.</p> <p>The amp is good looking and small enough to leave out in your living room. It has a nice orange tube-like glow when turned on.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-07-25-yamaha-thr30-in-living-room.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Yamaha THR30 II In Living Room </div>]]></content><author><name></name></author><category term="guitar"/><summary type="html"><![CDATA[Details on Yamaha THR30 desktop amplifier]]></summary></entry><entry><title type="html">Authorization</title><link href="https://fmcgeough.github.io/blog/2025/permission-checking/" rel="alternate" type="text/html" title="Authorization"/><published>2025-07-01T00:00:00+00:00</published><updated>2025-07-01T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/permission-checking</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/permission-checking/"><![CDATA[<p>I have had various people ask me about authorization. I figured I’d write a blog post to explain the three main types that you are likely to run into and include examples of how they work. I also wanted to mention some of the areas where authorization can be the most painful.</p> <h2 id="basics">Basics</h2> <ul> <li>Authorization is not authentication. They are related but should not be considered to be one and the same thing. Authentication is verifying that a subject is who they are purporting to be. That has to happen before making authorization decisions. Discussions of authorization can get confusing because you can hear Auth and think that the discussion is on authorization but it’s instead on authentication. A good way of differentiating these activities is to use AuthN for authentication and AuthZ for authorization.</li> <li>Authorization is deciding whether or not a subject (user / program as identified by authentication) can perform an action on an object (resource / user)</li> </ul> <h2 id="common-types-of-authorization">Common Types of Authorization</h2> <p>The most common approaches to authorization:</p> <ul> <li>Role Based Access Control (RBAC). A set of roles are associated with permissions to perform some action on some resource. Users (an actual user or a program) are associated with these roles. This is a popular way of managing authorizations. It’s advantages are that it is not too hard to understand and is fairly easy to administer.</li> <li>Attribute Based Control (ABAC). Organizations can find that RBAC is too limiting for complex data models. In ABAC you consider one or more security attributes to decide on authorization. There are four main categories of attributes: <ul> <li>subject (user) attributes. For example, username, age, id, job title, organization, job role</li> <li>resource (object) attributes. Indicate what would be acted upon.</li> <li>action. Indicates what action the subject wishes to take (view, modify, delete)</li> <li>environmental. This is a common consideration in ABAC systems that you do not see in RBAC systems. Time, device, location are all environmental attributes.</li> </ul> </li> <li>Relationship-based Access Control (ReBac). The concept behind ReBAC authorization systems is that by following a chain of relationships one can determine access. Both Facebook and Google are using a form of ReBac. Google’s ReBAC system is implemented in a tool called Zanzibar. Zanzibar implements not just a ReBAC system but it covers infrastructure that is particular to Google and utilizes “in house” tools. Google published a paper describing the system and a number of companies have built implementations of the system described in the paper using tools like Cockroach DB.</li> <li>Policy Based Control (PBAC). In a policy based authorization system there are generally two components: 1) a policy engine that contains policy rules and data; 2) a policy language that allows defining how authorization is decided. The most common PBAC system is Open Policy Agent (OPA). It’s policy language is called Rego.</li> </ul> <h2 id="example-of-role-based-rbac-authorization">Example of Role Based (RBAC) Authorization</h2> <p>Here’s an example of a multi-account RBAC authorization system. In this system an account (business) is a high-level entity containing users (either actual people or computer programs) that interact with the account. Each user within an account has one role. Users are assigned to one of the following roles on creation:</p> <ul> <li>owner - has the ability to do anything within the account they are assigned. They can create, update, delete users as well as any other objects in the account. They can interact with the payment system and authorize additions or removals of features that change the billing for an account.</li> <li>admin - slightly less capabilities than an “owner” role. For example, a user with an admin role can view billing info but is not allowed to modify it.</li> <li>user - a role that allows the user to interact with objects in an account. There may be limits on what the user is allowed to create, update or delete.</li> <li>spectator - a role that only allows a user to view information in an account.</li> </ul> <p>A set of roles of this nature is fairly typical of role based system. All decision making is based on the user’s role. There is no other information used to make a decision on whether a user is allowed to perform an action or not.</p> <h2 id="example-of-attribute-based-abac-authorization">Example of Attribute based (ABAC) Authorization</h2> <p>An ABAC system might be an extension to a RBAC system. That is, a user is still assigned a role, however, there are other attributes besides the role that are used to determine whether a user is allowed to perform an action.</p> <p>For example, there could be a system where the location of a user is important to consider. Imagine that we allow the “user” role to do all the same things that they do in the RBAC system described above. However, the “user” is only authorized to do those actions if they are in the “office” or from recognized secure devices. That is, they cannot access data remotely.</p> <p>One of the reasons to use an ABAC system instead of RBAC is because in an RBAC system you can end up with “role explosion”. That is, the business needs more granularity for particular situations. A new role is created whenever this need arises and instead of an easy to understand set of 5-8 roles you end up with many more. This ends up making it almost impossible for either customers or internal developers to understand how authorization decision making is done.</p> <h2 id="example-of-a-relationship-based-rebac-authorization">Example of a Relationship based (ReBac) Authorization</h2> <p>In a ReBac system everything is a graph. In practice, most authorization systems done with RBAC or ABAC can fit into a graph model.</p> <p>For example, consider an organization made up of various groups. Each group may have sub-groups. Each group (or sub-group) creates folders and documents within those folders. A user can be a member of more than one group (or sub-group). Access is granted to a group, a sub-group or a user for folders and documents.</p> <p>You can see that this problem is a graph by its nature. A user has a relationship to a group. A group has a relationship with sub-groups. A sub-group has a relationship to folders. And folders contain documents. To determine authorization you need to navigate the graph. This graph is the schema for the authorization decision.</p> <p>AuthZed is a company that sells a ReBac solution. They have an <a href="https://play.authzed.com/">online playground</a> that you can use to examine several examples of instances of how ReBac is used.</p> <h2 id="policy-based-pbac-authorization">Policy Based (PBAC) Authorization</h2> <p>PBAC (and OPA in particular) are wonderful tools when the amount of data needed to make decisions is fairly small. OPA uses an in-memory database. If the problem you are trying to solve involves hundreds (or even tens) of megabytes then its unlikely that PBAC will work well for you. The OPA project has an <a href="https://play.openpolicyagent.org/">OPA Playground</a> to allow investigating how OPA performs authorizations. There is also <a href="https://www.openpolicyagent.org/docs">excellent documentation</a>.</p> <h2 id="common-authorization-acronyms">Common authorization acronyms</h2> <p>Like any technical area authorization has it’s own set of acronyms.</p> <ul> <li>AuthN - authentication</li> <li>AuthZ - authorization</li> <li>CIAM - Customer Identity and Access Management. This is used to describe the combination of AuthN and AuthZ.</li> <li>Discretionary Access Control (DAC) - files and directories had read, write and execute permissions. This was the development of the earliest Unix system. The core concept of permissions involves three categories: owner, group, and others, each with read, write, and execute permissions. Access control lists (ACL) was used as a mechanism to hand out permissions.</li> <li>Mandatory Access Control (MAC) - Honeywell’s SCOMP and NSA’s Blacker, focused on achieving multilevel security (MLS) for military applications. This system applied security labels to subjects (users/processes) and objects (files/data). For example, labels could be “Top Secret,” “Secret,” “Confidential”. An administrator places objects into these labeled categories. It was meant to protect classified information.</li> <li>Access Control List (ACL). This is a means of controlling access to files, directories and network endpoints. The cloud service providers use ACL’s in their cloud networking. For example, in Azure there are Network Security Groups (NSG) and in AWS there are Security Groups and Network Access Control List (NACL). These are both implementations of an ACL.</li> <li>Identity and Access Management (IAM) is a security framework that manages digital identities and controls user access to resources. It ensures that the right individuals have appropriate access to the necessary resources when they need them, enhancing security and operational efficiency. IAM involves establishing user identities, authenticating them, and authorizing access to specific resources, like applications, data, and devices.</li> </ul> <h2 id="problem-areas">Problem Areas</h2> <ul> <li>Authorization ends up being using throughout a full stack application: backend services, Javascript/Typescript Web UI, smart phone applications, However, each is on it’s own release cycle and, generally, use their own tools and languages.</li> <li>Subject authorizations can change over time</li> <li>Resources can change over time</li> <li>Allowed actions on resources can change over time</li> <li>Authorization has to be speedy enough to not be noticeable</li> <li>Customers need to understand how to use what you provide in order to safeguard their system</li> <li>Developers need to know how to add new permissions as new functionality is added</li> <li>Marketing and sales need to know that the authorizations provided align with the sales goals for the company</li> </ul> <h3 id="feature-flags-and-authorization">Feature Flags and Authorization</h3> <p>Feature flags are not authorization. But the topics are related. Feature flags are (traditionally) used to hide a new feature from the majority of users in a system. A few users are allowed access to the new feature to ensure that it works as expected. A rollout of some kind occurs to provide the feature to a larger and larger percentage of users. Ultimately, the new feature is completely released and the feature flag goes away.</p> <p>That’s one of the key differences between feature flags and authorization. A created feature flag will ultimately not exist once it’s served its purpose. Authorization, on the other hand, is fundamental to business processes. It’s not a short-lived thing.</p> <p>Generally, in a code path, a feature flag is checked before an authorization check occurs. This is not required but is the general practice since it provides an optimization. There’s no sense checking authorization if a user should not access a code path.</p> <p>It’s important to review feature flags to ensure that they are not used as a replacement for authorizations. A feature flag that exists for an extended period of time is a sign that your authorization system is potentially subverted.</p> <h3 id="scrolling">Scrolling</h3> <p>If an end user is looking at a large set of data does the code have to authorize each and every item that they are examining. If this is the case it presents scaling problems that make it impossible to present an efficient system.</p> <p>For example, if an end user is examining a spreadsheet with hundreds of thousands of cells a system would be unusable if a view authorization was needed for every single cell in the spreadsheet. Authorization systems must be configured to authorize at a higher level. If your system must authorize at an extreme level of granularity then it most likely will fail in various ways.</p> <h3 id="authorization-and-customer-charges">Authorization and Customer Charges</h3> <p>If your system is sold to customers and charges are based on “level of access” then you must continuously be aware of authorization overlap. That is, you may have an RBAC system that authorizes a “user” to perform certain actions and a “manager” to perform more actions on resources. However, as new resources and actions are introduced in the system or a monolith is split into microservices the original intent can easily be lost. A “user” may be able to do as much (if not more) than a “manager”. Customers can discover this and “game the system” so that they are charged less than what was planned when the system was first designed.</p> <p>It’s important to review authorizations as new resources or actions are added to an existing system to ensure that authorizations align with a billing model.</p> <h3 id="authorizations-and-microservices">Authorizations and Microservices</h3> <p>Microservices provide additional authorization challenges. An end user wants to perform an action on some resource. Is this allowed? The problem is that the original receiver of the request may turn around and make calls to one or more microservices in order to accomplish the request. Do each of these microservices perform authorization checks? Are there conflicts that can arise where an operation is “half done” because one microservice authorizes but another does not? Are each of the microservices “in sync” on what is authorized and what is not?</p> <p>It’s important to look at the resources and actions on those resources and determine exactly what occurs to accomplish the action. You need to determine whether you have any instances in your system where an action can be “half done”. These scenarios must be removed from your system.</p> <h2 id="references">References</h2> <ul> <li><a href="https://tsapps.nist.gov/publication/get_pdf.cfm?pub_id=916402">NIST Model for Role Based Access Control (RBAC)</a></li> <li><a href="https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-162.pdf">Guide to Attribute Based Access Control (ABAC) Definition and Consideration</a></li> <li><a href="https://zanzibar.tech/">AuthZed Annotated Google Zanzibar Paper (ReBAC)</a></li> <li><a href="https://www.researchgate.net/profile/Carrie-Gates-2/publication/240787391_Access_Control_Requirements_for_Web_20_Security_and_Privacy/links/540e6f670cf2d8daaacd4adf/Access-Control-Requirements-for-Web-20-Security-and-Privacy.pdf">Access Control Requirements for Web 2.0 Security and Privacy (ReBAC)</a></li> <li><a href="https://www.openpolicyagent.org">Open Policy Agent</a></li> <li><a href="https://authzed.com/">AuthZed</a></li> </ul>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Types of Authorization]]></summary></entry><entry><title type="html">Continuing to Improve on Slide</title><link href="https://fmcgeough.github.io/blog/2025/continued-slide/" rel="alternate" type="text/html" title="Continuing to Improve on Slide"/><published>2025-06-20T10:25:00+00:00</published><updated>2025-06-20T10:25:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/continued-slide</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/continued-slide/"><![CDATA[<p>I keep working at slide guitar. A typical session with the slide is a few minutes of warming up. Just get my fingers working again until the slide feels right. I’ll then work on specific techniques or transitions and attempt a couple of songs.</p> <p>A lot of slide playing is as an accompanying instrument. When I get a chance I play with other people where they can carry the melody and I just get to add some accents. Playing lead with slide is challenging!</p> <p>I record the session on my phone and then break it up into snippets (if I’m feeling like doing the work). These are a couple of audio files from today’s practice.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-06-20-exercise.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> Open-D, Mule Mavis, just getting my fingers working at start of practice </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/AngelFromMontgomery.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> Open-G, Mule Mavis, Angel From Montgomery </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><category term="acoustic"/><summary type="html"><![CDATA[More work on slide guitar]]></summary></entry><entry><title type="html">Recent Books</title><link href="https://fmcgeough.github.io/blog/2025/reading/" rel="alternate" type="text/html" title="Recent Books"/><published>2025-06-01T00:00:00+00:00</published><updated>2025-06-01T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/reading</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/reading/"><![CDATA[<h2 id="to-the-list">To the list</h2> <p>This is a list of books I’ve read since March 1st, 2025.</p> <ul> <li>Midnight Black (Gray Man, #14) by Mark Greaney</li> <li>Debt: The First 5,000 Years by David Graeber</li> <li>Network Effect (The Murderbot Diaries, #5) by Martha Wells</li> <li>Exit Strategy (The Murderbot Diaries, #4) by Martha Wells</li> <li>Rogue Protocol (The Murderbot Diaries, #3) by Martha Wells</li> <li>The Sirens’ Call: How Attention Became the World’s Most Endangered Resource by Chris Hayes</li> <li>Glory Be (Glory Broussard Mystery, #1), Edgar AwardWinner, 2024 by Danielle Arceneaux</li> <li>Lessons in Chemistry by Bonnie Garmus</li> <li>Greenteeth by Molly O’Neill</li> <li>Dead in the Frame: A Pentecost and Parker Mystery by Stephen Spotswood</li> <li>The Day of the Triffids by John Wyndham</li> <li>Prussian Blue (Bernie Gunther, #12) by Philip Kerr</li> <li>Beekeeping for Dummies by Howland Blackiston</li> <li>The Postman by David Brin</li> <li>A Quiet Flame (Bernie Gunther, #5) by Philip Kerr</li> <li>The Variable Man by Philip K Dick</li> <li>Everything Must Go: The Stories We Tell About the End of the World by Dorian Lynskey</li> <li>The Forgotten Room (Jeremy Logan, #4) by Lincoln Child</li> <li>The Strange Case of Jane O. by Karen Thompson Walker</li> <li>Terminal Freeze (Jeremy Logan #2) by Lincoln Child</li> <li>Will the Circle be Unbroken: Country Music in America by Paul Kingsbury and Alanna Nash</li> <li>I’m Starting to Worry About This Black Box of Doom by Jason Pargin</li> <li>Been Wrong So Long It Feels Like Right: A King Oliver Novel by Walter Mosley</li> <li>Swag by Elmore Leonard</li> <li>The Third Gate (Jeremy Logan, #3) by Lincoln Child</li> <li>Observer by Robert Lanza, Nancy Kress</li> <li>Chrysalis (Jeremy Logan, #6)by Lincoln Child</li> <li>The Man Who Fell to Earth by Walter Tevis</li> <li>The Dogs of Riga (Kurt Wallander, #2) by Henning Mankell</li> <li>Six Days of the Condor by James Grady</li> <li>Sentinel (Armored, #2) by Mark Greaney</li> </ul> <h2 id="currently-reading">Currently Reading</h2> <ul> <li>The Undoing Project by Michael Lewis</li> <li>The Case of the Missing Maid by Rob Osler</li> <li>A Swim in a Pond in the Rain by George Saunders</li> <li>Sidney Chambers and the Shadow of Death by James Runcie</li> </ul> <h2 id="the-wallander-novels">the Wallander novels</h2> <p>I like all the Wallander novels. They were written by Swedish novelist Henning Mankell. The books were turned into a British television series broadcast from 2008 to 2016. The series follows the general outline of the novels. Kenneth Branagh played Inspector Kurt Wallender. The series is also excellent. In addition, there is a “Young Wallender” series on Netflix. There are two seasons of that series which is not a prequel. Rather, they placed the character into modern times. Some fans of the original novels objected to this.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/TheDogsOfRiga.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Swedish cover of The Dogs of Riga </div> <h2 id="best-books-this-year">Best Books This Year</h2> <p>“I’m Starting to Worry About This Black Box of Doom” is the best fiction that I’ve read this year, followed by “Greenteeth”. “The Sirens’ Call: How Attention Became the World’s Most Endangered Resource” is the best non-fiction I’ve read this year.</p> <h2 id="pbs-and-grantchester">PBS and Grantchester</h2> <p>We donated to PBS. If you donate $60+ you get PBS Passport. This gives you access to quite a bit of previously aired PBS content. We’ve been watching the “Grantchester” series and I decided to read the first novel for the series.</p> <p>I caught a few older “Austin City Limits” too.</p> <h2 id="murderbot">Murderbot</h2> <p>The Murderbot novels are great fun. It’s humorous sci-fi. The stories are written by American author Martha Wells. She’s the winner of four Hugo Awards, two Nebula Awards and three Locus Awards.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/All_Systems_Red_-_The_Murderbot_Diaries_1_(cover).jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>In the series a security robot (secbot) is the narrator. Secbots are owned by some mega-corporation. They provide security for space explorations but also spy on the explorers for the mega-corporation. A secbot has a “governor unit” that can punish the secbot if they do not obey a human’s order (“punish” can be total destruction in some cases). The narrating secbot manages to hack it’s governor unit which allows it to escape it’s protection enslavement. The secbot renames itself murderbot, although this is a private name that it rarely shares with others. Murderbot enjoys downloading and enjoying interplanetary soap operas. As it spends more time with a series of caring entities (both humans and artificial intelligences), it develops genuine friendships and emotional connections, which it finds inconvenient.</p> <p>There is a quite good Apple+ series based on the first novel available to stream. It premiered on May 16, 2025.</p> <h2 id="lessons-in-chemistry">Lessons in Chemistry</h2> <p>This is another book that has an Apple+ series. The core of the story from the novel is there but they took the story in some different directions. Both the novel and the series are good.</p> <h2 id="six-days-of-the-condor">Six Days of the Condor</h2> <p>This is what the movie “Three Days of the Condor” was based on. Its a first novel that was way more successful than the author could have imagined. The directory Sydney Pollack tightened up the story to condense events into three days because he thought that would work better for the movie. The movie is available in various places including the <a href="https://archive.org/details/turner_video_748">Internet Archive</a>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/Six_Days_of_the_Condor.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The plot (of the movie and book) is that there is a small organization in the CIA that reads books looking for plots and counterplots. All this information is fed into a computer and used to analyze against actual CIA discovered events. The main character, Ronald Malcolm, stumbles upon a plot involving a secret organization within the CIA. As it turns out, this is an actual organization. When his report is sent “up the chain” the plotters send hit men to eliminate the entire reading group (it’s a small group). Ronald Malcolm escapes the assassination while everyone else in the office is murdered. He stumbles through various attempts on his life, uncovers the secret CIA sub group and ultimately publicly reveals their existence.</p> <p>The name “Condor” is Ronald Malcolm’s codename.</p> <p>One of the interesting things about this is that high ranking members of the government in the Soviet Union watched the movie. They thought it was describing a real CIA book reading group so they formed their own (much larger) group to do the tasks described in the movie.</p> <p>In the movie Ronald Malcolm is renamed to Joe Turner.</p>]]></content><author><name></name></author><category term="reading"/><summary type="html"><![CDATA[List of books I've read so far in 2025]]></summary></entry><entry><title type="html">Simple Ecto query pipelines</title><link href="https://fmcgeough.github.io/blog/2025/simple-ecto-pipelines/" rel="alternate" type="text/html" title="Simple Ecto query pipelines"/><published>2025-05-31T00:00:00+00:00</published><updated>2025-05-31T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/simple-ecto-pipelines</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/simple-ecto-pipelines/"><![CDATA[<p>The Ecto library is the means used by Elixir developers to interact with a relational database. One of the first things you might want to do when using Ecto is to query a database. This is a simple example showing how you can use a pipeline and a list of options to provide fairly robust querying capabilities for a single table.</p> <h2 id="example-table">Example Table</h2> <p>Assume we have a “contacts” table in a Postgres database with an auto-generated id primary key.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Column    |              Type
-------------+--------------------------------
 id          | bigint                         |
 first_name  | character varying(255)         |
 last_name   | character varying(255)         |
 inserted_at | timestamp(0) without time zone |
 updated_at  | timestamp(0) without time zone |
Indexes:
    "contacts_pkey" PRIMARY KEY, btree (id)
</code></pre></div></div> <h2 id="elixir-ecto-schema">Elixir Ecto Schema</h2> <p>The schema file in Elixir looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Ectyl.Database.Contact do
  use Ecto.Schema
  import Ecto.Changeset

  schema "contacts" do
    field :first_name, :string
    field :last_name, :string

    timestamps(type: :utc_datetime)
  end

  @doc false
  def changeset(contact, attrs) do
    contact
    |&gt; cast(attrs, [:first_name, :last_name])
    |&gt; validate_required([:first_name, :last_name])
  end
end
</code></pre></div></div> <h2 id="requirements">Requirements</h2> <p>We want to write a module that lets developers:</p> <ul> <li>get all the contacts</li> <li>query on first name, last name or both to return only matching rows</li> <li>sort by first name, last name or both</li> <li>paginate</li> </ul> <h2 id="building-a-pipelined-function">Building a Pipelined Function</h2> <p>The way to do this is use a pipeline. Each step in the pipeline builds an Ecto.Query. We’ll allow the caller to pass opts in to a function but provide a default that gives no opts.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Ectyl.Contacts do
  @moduledoc """
  The Contacts context.
  """

  import Ecto.Query, warn: false
  alias Ectyl.Database.Repo

  alias Ectyl.Database.Contact

  @contacts_fields Contact.__schema__(:fields)
  @directions [:asc, :desc]
  @operators [:like, :in, :not_in, :begins_with, :ends_with]

  @doc """
  Returns the list of contacts.

  ## Examples

      iex&gt; Ectyl.Contacts.list_contacts()
      [%Contact{}, ...]

  ## Options
  - `:filters` - A list of filters to apply to the query. Each filter can be a tuple of `{field, value}` or `{field, value, operator}`.
    Supported operators are `:like`, `:in`, `:not_in`, `:begins_with`, and `:ends_with`. Supported fields are those defined in `Contact.__schema__(:fields)`
  - `:sort` - A list of tuples for sorting, where each tuple is `{field, direction}`. Supported fields are those defined in `Contact.__schema__(:fields)` and directions are `:asc` or `:desc`.
  - `:page` - The page number for pagination (default is 1).
  - `:page_size` - The number of contacts per page (default is 10).
  """
  def list_contacts(opts \\ []) do
    contacts_base_query()
    |&gt; apply_filters(opts)
    |&gt; apply_sorting(opts)
    |&gt; apply_pagination(opts)
    |&gt; Repo.all()
  end
</code></pre></div></div> <h2 id="building-a-base-ectoquery">Building a Base Ecto.Query</h2> <p>The first step in the pipeline is to get the “base” <code class="language-plaintext highlighter-rouge">Ecto.Query</code>. This is the datatype that is passed to each function in the pipeline.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp contacts_base_query do
    from(c in Contact)
  end
</code></pre></div></div> <h2 id="applying-filters">Applying Filters</h2> <p>The Ecto.Query built by that function is passed into the <code class="language-plaintext highlighter-rouge">apply_filters/2</code> function along with the <code class="language-plaintext highlighter-rouge">opts</code> provided by the caller:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp apply_filters(query, opts) do
    opts
    |&gt; options(:filters)
    |&gt; Enum.filter(fn
      {field, _value} when field in @contacts_fields -&gt; true
      {field, _value, operator} when field in @contacts_fields and operator in @operators -&gt; true
      _ -&gt; false
    end)
    |&gt; Enum.reduce(query, fn
      {field, value}, acc -&gt;
        from c in acc, where: field(c, ^field) == ^value

      {field, value, :begins_with}, acc -&gt;
        from c in acc, where: like(field(c, ^field), ^"#{value}%")

      {field, value, :ends_with}, acc -&gt;
        from c in acc, where: like(field(c, ^field), ^"%#{value}")

      {field, value, :like}, acc -&gt;
        from c in acc, where: like(field(c, ^field), ^"%#{value}%")

      {field, value, :in}, acc -&gt;
        from c in acc, where: field(c, ^field) in ^value

      {field, value, :not_in}, acc -&gt;
        from c in acc, where: field(c, ^field) not in ^value

      _, acc -&gt;
        acc
    end)
  end
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">apply_filters/2</code> function extracts the <code class="language-plaintext highlighter-rouge">:filters</code> from the <code class="language-plaintext highlighter-rouge">opts</code> and defaults to an empty list. It then filters the list to ensure that the parameters are in the correct format. The check ensures that only fields that are in the schema are used. If an operator is used it must be one of the supported options. If an element in the list does not meet the criteria it is discarded. The function then uses an <code class="language-plaintext highlighter-rouge">Enum.reduce/4</code> where the <code class="language-plaintext highlighter-rouge">Ecto.Query</code> is used as an accumulator. Any alteration of the criteria builds a new <code class="language-plaintext highlighter-rouge">Ecto.Query</code> which becomes the updated accumulator.</p> <h2 id="applying-sorting">Applying Sorting</h2> <p>The <code class="language-plaintext highlighter-rouge">apply_sorting/2</code> function is similar.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp apply_sorting(query, opts) do
    opts
    |&gt; options(:sort)
    |&gt; Enum.filter(fn {field, direction} -&gt; field in @contacts_fields and direction in @directions end)
    |&gt; Enum.reduce(query, fn {field, direction}, acc -&gt;
      from c in acc, order_by: [{^direction, field(c, ^field)}]
    end)
  end
</code></pre></div></div> <p>The function extracts the <code class="language-plaintext highlighter-rouge">sort</code> options and defaults to an empty list. It then filters the list to ensure parameters are in the right format. Again, the <code class="language-plaintext highlighter-rouge">Ecto.Query</code> is used as the accumulator and sorts added build an updated <code class="language-plaintext highlighter-rouge">Ecto.Query</code> accumulator.</p> <h2 id="apply-pagination">Apply Pagination</h2> <p>The final function in the pipeline is <code class="language-plaintext highlighter-rouge">apply_pagination</code>. In this case the function will use pagination regardless of whether or not the caller specified <code class="language-plaintext highlighter-rouge">:page</code> or <code class="language-plaintext highlighter-rouge">:page_size</code>.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp apply_pagination(query, opts) do
    page = opts[:page] || 1
    page_size = opts[:page_size] || 10

    query
    |&gt; offset(^((page - 1) * page_size))
    |&gt; limit(^page_size)
  end
</code></pre></div></div> <h2 id="execute-query">Execute Query</h2> <p>The final step is to pass the <code class="language-plaintext highlighter-rouge">Ecto.Query</code> to <code class="language-plaintext highlighter-rouge">Repo.all</code> to return results. In this case the list contains <code class="language-plaintext highlighter-rouge">[%Contact{}, ...]</code>.</p> <h2 id="problems-with-this-approach">Problems with this Approach</h2> <p>This is a trivial example. Although it is providing fairly robust capabilities (filters, sorting, pagination) it falls apart if we want to join to other tables (for example, lets assume there’s a phone_numbers table that has a foreign key to contacts to allow a contact to have any number of phone numbers). The reason this probably does not work is that we might want to filter on the phone number (for example, give me all the contacts in area code 678) but there’s no means of indicating what table a filter applies to. There’s a similar situation with sorting. I’ll create another post to indicate how that might be handled.</p> <p>There is some checking of the parameters provided but there is no notification (logging, telemetry) to indicate that the function received bad input. In most cases you would want to have that. I think it’s generally fine to have the code proceed if the input data can be cleaned up but I’d want to know that some part of the codebase is passing input data that will never work.</p> <h2 id="benefits-of-this-approach">Benefits of this Approach</h2> <p>Pipelining to build an <code class="language-plaintext highlighter-rouge">Ecto.Query</code> is a powerful tool that lets you write modules that provide filtering, sorting and pagination in a way that is fairly powerful while being easy to read and maintain.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[How to use Ecto pipelines to allow flexibility in queries]]></summary></entry><entry><title type="html">Atkin White Rice</title><link href="https://fmcgeough.github.io/blog/2025/atkin-white-rice/" rel="alternate" type="text/html" title="Atkin White Rice"/><published>2025-05-26T10:00:00+00:00</published><updated>2025-05-26T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/atkin-white-rice</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/atkin-white-rice/"><![CDATA[<p>On Christmas Eve I had a proximal fracture of my right humerus. This means the break was in the upper part of the humerus. It was just below the head of the humerus that fits into the shoulder socket. This was both frustrating and painful.</p> <p>I broke it by slipping on some ice that was on the sidewalk just next door to our house. I had been out for about a 2 mile walk. It was a coldish day. The temperature was below freezing. However, the skies were clear. It hadn’t rained recently. As a result I wasn’t paying close enough attention to the sidewalk when I got back from my walk. There was a sprinkler system leak onto the sidewalk. It froze into a thin smooth ice surface. Then I went down like Charlie Brown trying to kick the football with Lucy as the holder.</p> <p>Falls are the most common reason for a proximal fracture. Since its a large bone there is significant pain. I lay for a few seconds figuring out how to get myself back up since my right arm was useless at this point. I managed to get back up and got back home. My wife took me over to the hospital for an x-ray to confirm that it was broken. Thankfully, the bone wasn’t displaced so no surgery was needed.</p> <p>However, these fractures take quite a long time to heal. I was in a sling for 4-5 weeks and then began physical therapy. Ultimately I actually had to use a bone stimulator (Exogen Ultrasound device) to encourage bone growth to get the break sealed up. This seemed to work fine and the last x-ray showed that the bone was healed. The bone healing is not the end of things though. It will take another few months to get the strength back in my upper arm and the level of flexibility that I had before the break.</p> <p>One of the hardest parts of this whole process is that I was unable to play guitar. A couple weeks after the sling came off I could manage to play an electric because it had a thinner body and I could get my arm around it without significant pain. However, even with the electric, I could only play for 5 or 10 minutes at a time.</p> <p>During all this downtime from guitar playing I was listening to a lot of new music and watching many guitar YouTube videos. It was on YouTube that I discovered Atkin Guitars. Atkin Guitars was founded in Canterbury, England, in 1995. They build a number of models that are homages to pre-war Gibson and Martin guitars. They also built a tribute guitar that was a copy of Tony Rice’s D-28 (serial # 58957).</p> <p>The reason Atkin Guitars built a tribute for this particular guitar is because it is famous in the world of acoustic guitars. Here’s some of the details of its story.</p> <p>The Tony Rice guitar was originally built in 1935. It has Brazilian rosewood back and sides and an Adirondack top. All of these guitars that are still around and in decent shape have an incredible sound and are worth quite a bit. In 1935 it would have sold for around $100. As far as I know between its build in 1935 and 1959 there’s no story of who owned the guitar and how badly it was treated.</p> <p>We do know that the guitar had seen some rough times. In 1959 fifteen year old bluegrass guitarist Clarence White bought the guitar for $25. It was really beat up and awaiting repairs. Some previous owner had whittled the soundhole to widen it (there some accounts that say Clarence White whittled this but according to Fretboard Journal it was “some anonymous whittler”). The original fingerboard was gone. It had been replaced with an ebony board that being held on with tape! He bought it and brought it home to his father. White’s father - who was a very good guitar repair person - declared it a lost cause. But White was determined. He took the guitar to luthier Milt Owen. Owen said he could make it playable for another $25. He found an old Gretsch blank with 22 frets that became the fingerboard. The guitar had been brought back to life.</p> <p>When Owen gave the guitar back to White he cautioned that he had set the guitar up with light gauge strings and that is what should be used on the guitar. He said putting heavy gauge strings on it would cause it to “belly up”. “Bellying” refers to bowing of the soundboard of an acoustic guitar. The constant tension applied by the strings causes the bridge to rotate forward towards the neck; resulting in the warping of the top (especially behind the bridge), a slight drop at the sound hole and a raised action.</p> <p>White seemingly immediately ignored this advice. So after just a year of use the action was incredibly high and it was almost unplayable. It was at this point that 9 year old music prodigy Tony Rice ran into the guitar at a music show in southern California. White let Rice play the guitar for as long as he wanted that day and Rice was impressed with the sound. He said “The only thing I knew was that it looked like hell but it sounded like a million bucks to a 9-year-old kid!” At some time later, as the guitar had become even more unplayable, White leaned the guitar against a tree and shot it with his pellet gun.</p> <p>Finally, in 1965, the guitar was sold (or given) to his friend Joe Miller in 1965. The story I heard is that he used the D-28 as collateral for a loan to a get a Telecaster. In any case, it’s new owner (Miller) left the guitar under his bed for 9 years.</p> <p>In 1975 a grown Tony Rice was playing with the New South. He and fiddler Bobby Sloan chatted about Clarence White (who had passed away in 1973). Sloan brought up White’s D-28 and said he had sold it to Joe Miller. Rice decided he’d really like to own that guitar. He only had Joe Miller’s name, knew that he lived in Southern California and knew that his family had a chain of liquor stores. Using that info he tracked down the right Joe Miller. He told him he’d like to buy the D-28. Miller was aware of Tony Rice’s talents and agreed to sell the guitar. The guitar was appraised and sold to Rice for $550. The guitar was eventually put back in working shape by Richard Hoover (who would co-found Santa Cruz Guitars later).</p> <p>While Tony Rice owned the guitar in 1993 he lived with his wife in Crystal River, Florida. A hurricane hit in the middle of the night and they were evacuated without a chance to grab anything (including the D-28). The home flooded. The guitar was under water for a couple hours before it was retrieved but it no longer sounded like it used to. Five years later a man named Harry Sparks slowly dried out the guitar. This caused a lot of the bracings to come loose. Eventually luthier and friend Snuffy Smith reglued all the bracings and got it back to its former glory.</p> <p>This guitar became legendary. It was used on any number of famous recordings. The enlarged soundhole gave it a unique volume and projection. There is a Tony Rice album called “58957: The Bluegrass Guitar Collection” where the guitar is used on 21 different bluegrass songs. He was joined on that album by Doc Watson, Sam Bush, Norman Blake, and many other masterful musicians.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://upload.wikimedia.org/wikipedia/commons/4/42/Tony_Rice_RockyGrass.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Tony Rice and His Legendary D-28 </div> <p>There are a number of guitar makers who have crafted replicas of Rice’s iconic guitar. Santa Cruz has a Tony Rice model. So does Bourgeois, Martin, Huss &amp; Dalton, Collins and, the aforementioned, Atkin Guitars.</p> <p>After watching lots of Atkin Guitar videos and hearing a number of artists playing various models I decided I’d try and trade my Lowden F-34 guitar and get the Atkin Tony Rice model. The Lowden was amazing but I really wanted the Atkin model.</p> <p>Atkin Guitars decided to name their replica the “White Rice” model as an homage to both Clarence White and Tony Rice. They sell it with both a Madagascar rosewood back and sides and one with Indian rosewood. I found one at Music Emporium in Boston Massachusetts with the Madagascar rosewood, worked out a trade for my Lowden (and forked over some more $$$) and got the Atkin Guitar.</p> <p>It’s only been recently that I’ve been able to play the new guitar for more than a couple minutes. It’s amazing and easily the best acoustic I own. I’d like to get another Atkin Guitars model at some point. Maybe their homage to the Gibson J-45.</p> <p>The Atkin White Rice I purchased has:</p> <ul> <li>Madagascar Rosewood Back &amp; Sides</li> <li>Torrefied Adirondack Spruce Top</li> <li>Ebony Bridge and Fingerboard</li> <li>Nickel Gotoh Tuners</li> <li>Scalloped Forward Shifted Bracing</li> <li>Aged Nitrocellulose Lacquer</li> <li>Nut Width is 1 11/16”</li> <li>Neck carve is Medium C</li> <li>Scale length 25 1/2”</li> <li>String spacing 2 3/16”</li> </ul> <p>There are no inlays on the guitar. There were none on the original Tony Rice D-28.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-05-26-front-atkin-white-rice.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-05-26-back-atkin-white-rice.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-05-26-side-atkin-white-rice.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Atkin White Rice Custom Madagascar </div>]]></content><author><name></name></author><category term="guitar"/><summary type="html"><![CDATA[My new D-28 style guitar]]></summary></entry><entry><title type="html">Elixir - Iex History</title><link href="https://fmcgeough.github.io/blog/2025/iex-history/" rel="alternate" type="text/html" title="Elixir - Iex History"/><published>2025-04-19T00:00:00+00:00</published><updated>2025-04-19T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/iex-history</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/iex-history/"><![CDATA[<p>There are any number of notes around showing how to enable history in iex (the Elixir language repl). You need to set a system environment variable for this to work. Add the following line:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export ERL_AFLAGS="-kernel shell_history enabled"
</code></pre></div></div> <p>to either <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> (for bash users) or <code class="language-plaintext highlighter-rouge">~/.zshev</code> (for zsh users).</p> <p>You may need to completely exit iTerm if using OS X to enable iex history after setting up this environment variable.</p> <p>This enables history in both iex and erl (Erlang repl). Note: the history is shared between iex and erl.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[How to enable history for Elixir iex]]></summary></entry><entry><title type="html">Elixir Dependencies</title><link href="https://fmcgeough.github.io/blog/2025/elixir-dependencies/" rel="alternate" type="text/html" title="Elixir Dependencies"/><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/elixir-dependencies</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/elixir-dependencies/"><![CDATA[<p>Elixir is a dynamic, functional language for building scalable and maintainable applications. When you build applications you are going to use libraries. Libraries can be either open source like Phoenix or privately created libraries. This post is some general notes on Elixir and dependency management. Please check the actual Elixir documentation (for your particular version) to get the most accurate answers to any questions.</p> <ul> <li>https://hexdocs.pm/mix/1.1.1/Mix.Tasks.Deps.html</li> <li>https://hexdocs.pm/hex/Mix.Tasks.Hex.Outdated.html</li> <li>https://hexdocs.pm/hex/Mix.Tasks.Hex.Audit.html</li> <li>https://hexdocs.pm/elixir/dependencies-and-umbrella-projects.html</li> </ul> <h2 id="where-do-dependencies-come-from">Where Do Dependencies Come From?</h2> <p>A mix.exs file exists for a mix project. The file defines a module and the module has the statement: <code class="language-plaintext highlighter-rouge">use Mix.Project</code>. Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Xyz.MixProject do
  use Mix.Project

  &lt;etc, etc&gt;
</code></pre></div></div> <p>See <a href="https://hexdocs.pm/mix/1.18.3/Mix.Project.html">Mix.Project</a> for detailed information. An implementation of a <code class="language-plaintext highlighter-rouge">project/0</code> function is required in the module. This function returns a keyword list representing configuration for the project. One of keyword items is <code class="language-plaintext highlighter-rouge">:deps</code>. This is a list of dependencies of this project. Defaults to <code class="language-plaintext highlighter-rouge">[]</code>.</p> <p>Dependencies are specified in a particular way (described below). When dependencies are fetched mix creates a mix.lock file. This file has the final resolved dependency information and is what is used for building your software.</p> <h2 id="project-structure">Project Structure</h2> <p>The mix.exs and mix.lock files exist in different places and with slightly different rules depending on the choice of project structure.</p> <p>It’s probably useful to go over project structure before talking about library dependencies since you may run into three project organizations in Elixir. The project organization has an impact on the mechanics of dependency management.</p> <h3 id="flat-project">Flat Project</h3> <p>The first type of project is flat/standard. This is the type of structure that you get if you invoke <code class="language-plaintext highlighter-rouge">mix phx.new</code>. For a Phoenix web app generated with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix phx.new --no-html --no-live --no-tailwind \
    --no-esbuild --no-mailer xyz
</code></pre></div></div> <p>you’d get a general directory structure like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/xyz
  mix.exs
  mix.lock
  /lib
    /xyz
    /xyz_web
</code></pre></div></div> <p>In a flat structure all the dependencies are put in the top-level mix.exs file. Performing a <code class="language-plaintext highlighter-rouge">mix deps.get</code> creates and populates the <code class="language-plaintext highlighter-rouge">mix.lock</code> file.</p> <h3 id="umbrella-project">Umbrella Project</h3> <p>The second type of project is an umbrella project. You can generate a Phoenix app as an umbrella project using the <code class="language-plaintext highlighter-rouge">--umbrella</code> option. For a Phoenix web app generated with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix phx.new --no-html --no-live --no-tailwind \
  --no-esbuild --no-mailer --umbrella xyz
</code></pre></div></div> <p>you’d get a general directory structure like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/xyz
  mix.exs
  mix.lock
  /apps
    /xyz
      mix.exs
    /xyz_web
      mix.exs
</code></pre></div></div> <p>In an umbrella structure the top-level mix.exs file has a <code class="language-plaintext highlighter-rouge">deps/0</code> function. However, the deps are available only for this project and cannot be accessed from applications inside the <code class="language-plaintext highlighter-rouge">apps/</code> folder. For example, you might add a dependency on credo so you can run credo over all the source code contained in the multiple subdirectories under <code class="language-plaintext highlighter-rouge">apps/</code></p> <p>The dependencies for the deliverable are contained in the mix.exs files for the two apps subdirectories xyz and xyz_web. Note that you can have as many “apps” as you want in the <code class="language-plaintext highlighter-rouge">apps/</code> directory. Each directory would have its own mix.exs file. The two shown above are generated by default. The <code class="language-plaintext highlighter-rouge">xyz</code> directory is meant to hold “business logic”. The <code class="language-plaintext highlighter-rouge">xyz_web</code> directory is meant to hold “all the code dealing with web requests”.</p> <p>The umbrella project structure is recognized by mix. When you <code class="language-plaintext highlighter-rouge">mix deps.get</code> from the command line a <code class="language-plaintext highlighter-rouge">mix.lock</code> file is created in the top-level directory. This file will contain dependencies for all the <code class="language-plaintext highlighter-rouge">apps/</code> subdirectories in your project.</p> <h3 id="poncho-project">Poncho Project</h3> <p>The third project type is a poncho project. Poncho projects are common in embedded Elixir (Nerves) projects. You may also find this approach in Phoenix code. In a poncho app the top-level mix.exs uses a path to indicate where code is. That means that could separate code into different directories but you are not required to have it all under an “apps” directory.</p> <p>Unlike an umbrella project, a poncho project will usually have a mix.lock file in each of the subdirectories referenced in the top-level mix.exs file. The subdirectories are compiled more like library dependencies.</p> <p>To compile the project each of your local directories that are under your project directory. Then go to the top level project directory to build the release. You don’t have the ability to run <code class="language-plaintext highlighter-rouge">mix test</code> from the top level and have it run <code class="language-plaintext highlighter-rouge">mix test</code> on all the code in all of your directories.</p> <h2 id="version-information">Version Information</h2> <p>Elixir projects are required to follow the version format outlined in the <a href="https://semver.org/">SemVer 2.0 schema</a>. A version is identified by three numbers: MAJOR.MINOR.PATCH.</p> <p>There is additional information in the Elixir documentation on how to handle pre-releases and build information:</p> <blockquote> <p>Pre-releases are supported by optionally appending a hyphen and a series of period-separated identifiers immediately following the patch version. Identifiers consist of only ASCII alphanumeric characters and hyphens ([0-9A-Za-z-]).</p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"1.0.0-alpha.3"
</code></pre></div></div> <blockquote> <p>Build information can be added by appending a plus sign and a series of dot-separated identifiers immediately following the patch or pre-release version. Identifiers consist of only ASCII alphanumeric characters and hyphens ([0-9A-Za-z-]):</p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"1.0.0-alpha.3+20130417140000.amd64"
</code></pre></div></div> <p>SemVer naming actually has rules. These rules are not enforced by Elixir but it’s important to know what they are and to know whether dependencies you are using are observing the rules. The rules are important because developers, in general, expect them to be observed. Here are the rules:</p> <p>Given a version number MAJOR.MINOR.PATCH, increment the:</p> <ul> <li>MAJOR version when you make incompatible API changes</li> <li>MINOR version when you add functionality in a backward compatible manner</li> <li>PATCH version when you make backward compatible bug fixes</li> </ul> <p>Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable.</p> <p>Assuming all your dependent libraries are following these rules you can make a choice on how much risk to introduce in managing your dependencies via a dependent’s requirements.</p> <h2 id="dependencies-and-requirements">Dependencies and Requirements</h2> <p>When you specify that your code depends on a library you setup a requirement for it. One part of the requirement is where the library can be found: hex.pm, github, etc. Another part is which version of the library you want. To specify the version you can use the common comparison operators such as &gt;, &gt;=, &lt;, &lt;=, and ==. These work just like you’d imagine. Here’s some examples:</p> <table> <thead> <tr> <th style="text-align: left">Requirement</th> <th style="text-align: center">Meaning</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">{:phoenix, “== 1.7.20”}</td> <td style="text-align: center">Only version 1.7.20 is allowed</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&gt;= 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is 1.7.20 or greater</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&gt; 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is greater than 1.7.20</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&lt;= 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is less than or equal to 1.7.20</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&lt; 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is less than 1.7.20</td> </tr> </tbody> </table> <p>Requirements also support <code class="language-plaintext highlighter-rouge">and</code> and <code class="language-plaintext highlighter-rouge">or</code> for complex conditions:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      # 2.0.0 and later until 2.1.0
      "&gt;= 2.0.0 and &lt; 2.1.0"
</code></pre></div></div> <p>This is such a common requirement that there is a “special” operator to express it: “~&gt;”.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    # 2.0.0 and later until 2.1.0
    "~&gt; 2.0.0"
</code></pre></div></div> <p>The “~&gt;” operator indicates that the highest least-significant digit version of the library can be used. So, in the example, “~&gt; 2.0.0” means that “2.0.0”, “2.0.1”, “2.0.2”, etc can be used but “2.1.0” cannot.</p> <p>This means if you only specify MAJOR and MINOR digits you are allowing any MINOR digit but the MAJOR must match. So “~&gt; 2.0” means that “2.0.0”, “2.1.7”, “2.5.4” are all acceptable.</p> <p>The most common case is to specify down to the PATCH. This allows bug fixes but blocks backward compatible changes.</p> <p>Your approach needs to examine whether the library you are dependent on is actually following the SemVer rules. Most (if not all) of them will.</p> <h3 id="options-for-requirements">Options for Requirements</h3> <p>There are a number of options available when specifying a requirement for a dependency. Here are some common options you’ll see (for a complete list of options consult the <a href="https://hexdocs.pm/mix/1.1.1/Mix.Tasks.Deps.html">Mix.Tasks.Dep documentation</a>).</p> <ul> <li><code class="language-plaintext highlighter-rouge">:optional</code> - this marks the dependency as optional. In such cases, the current project will always include the optional dependency but any other project that depends on the current project won’t be forced to use the optional dependency. However, if the other project includes the optional dependency on its own, the requirements and options specified here will also be applied. Optional dependencies will not be started by the application. You should consider compiling your projects with the mix compile –no-optional-deps –warnings-as-errors during test, to ensure your project compiles without warnings even if optional dependencies are missing</li> <li><code class="language-plaintext highlighter-rouge">:only</code> - the dependency is made available only in the given environments, useful when declaring dev- or test-only dependencies</li> <li><code class="language-plaintext highlighter-rouge">:override</code> - if set to true the dependency will override any other definitions of itself by other dependencies</li> </ul> <h3 id="overriding-a-library-dependency">Overriding a Library Dependency</h3> <p>You can run into issues where one library you are using requires one version of a library while a second library requires a different version. The requirements are in conflict and the app won’t compile unless you intervene.</p> <p>One way to intervene is to specify the version to use in your app’s dependencies using the option <code class="language-plaintext highlighter-rouge">override: true</code>. Be aware that if you override across a MAJOR version you may cause serious issues with your app. It’s important to understand why a library has specified an older version of a library. In many cases its simply that the library specifying the older version is not being maintained or not maintained at a rate that aligns with the other library you are using. However, that is not necessarily the case.</p> <h2 id="mixlock">Mix.lock</h2> <p>The mix.lock file is generated when you run <code class="language-plaintext highlighter-rouge">mix deps.get</code>. This is the file that contains all of the dependencies for the project. It includes not only the dependencies declared in your mix.exs file but also all of the dependencies of your libraries. For example, for a Phoenix generated project the mix.lock file looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%{
  "bandit": {:hex, :bandit, "1.6.8", "be6fcbe01a74e6cba42ae35f4085acaeae9b2d8d360c0908d0b9addbc2811e47", [:mix], [{:hpax, "~&gt; 1.0", [hex: :hpax, repo: "hexpm", optional: false]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:thousand_island, "~&gt; 1.0", [hex: :thousand_island, repo: "hexpm", optional: false]}, {:websock, "~&gt; 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "4fc08c8d4733735d175a007ecb25895e84d09292b0180a2e9f16948182c88b6e"},
  "castore": {:hex, :castore, "1.0.12", "053f0e32700cbec356280c0e835df425a3be4bc1e0627b714330ad9d0f05497f", [:mix], [], "hexpm", "3dca286b2186055ba0c9449b4e95b97bf1b57b47c1f2644555879e659960c224"},
  "db_connection": {:hex, :db_connection, "2.7.0", "b99faa9291bb09892c7da373bb82cba59aefa9b36300f6145c5f201c7adf48ec", [:mix], [{:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "dcf08f31b2701f857dfc787fbad78223d61a32204f217f15e881dd93e4bdd3ff"},
  "decimal": {:hex, :decimal, "2.3.0", "3ad6255aa77b4a3c4f818171b12d237500e63525c2fd056699967a3e7ea20f62", [:mix], [], "hexpm", "a4d66355cb29cb47c3cf30e71329e58361cfcb37c34235ef3bf1d7bf3773aeac"},
  "dns_cluster": {:hex, :dns_cluster, "0.1.3", "0bc20a2c88ed6cc494f2964075c359f8c2d00e1bf25518a6a6c7fd277c9b0c66", [:mix], [], "hexpm", "46cb7c4a1b3e52c7ad4cbe33ca5079fbde4840dedeafca2baf77996c2da1bc33"},
  "ecto": {:hex, :ecto, "3.12.5", "4a312960ce612e17337e7cefcf9be45b95a3be6b36b6f94dfb3d8c361d631866", [:mix], [{:decimal, "~&gt; 2.0", [hex: :decimal, repo: "hexpm", optional: false]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "6eb18e80bef8bb57e17f5a7f068a1719fbda384d40fc37acb8eb8aeca493b6ea"},
  "ecto_sql": {:hex, :ecto_sql, "3.12.1", "c0d0d60e85d9ff4631f12bafa454bc392ce8b9ec83531a412c12a0d415a3a4d0", [:mix], [{:db_connection, "~&gt; 2.4.1 or ~&gt; 2.5", [hex: :db_connection, repo: "hexpm", optional: false]}, {:ecto, "~&gt; 3.12", [hex: :ecto, repo: "hexpm", optional: false]}, {:myxql, "~&gt; 0.7", [hex: :myxql, repo: "hexpm", optional: true]}, {:postgrex, "~&gt; 0.19 or ~&gt; 1.0", [hex: :postgrex, repo: "hexpm", optional: true]}, {:tds, "~&gt; 2.1.1 or ~&gt; 2.2", [hex: :tds, repo: "hexpm", optional: true]}, {:telemetry, "~&gt; 0.4.0 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "aff5b958a899762c5f09028c847569f7dfb9cc9d63bdb8133bff8a5546de6bf5"},
  "expo": {:hex, :expo, "1.1.0", "f7b9ed7fb5745ebe1eeedf3d6f29226c5dd52897ac67c0f8af62a07e661e5c75", [:mix], [], "hexpm", "fbadf93f4700fb44c331362177bdca9eeb8097e8b0ef525c9cc501cb9917c960"},
  "gettext": {:hex, :gettext, "0.26.2", "5978aa7b21fada6deabf1f6341ddba50bc69c999e812211903b169799208f2a8", [:mix], [{:expo, "~&gt; 0.5.1 or ~&gt; 1.0", [hex: :expo, repo: "hexpm", optional: false]}], "hexpm", "aa978504bcf76511efdc22d580ba08e2279caab1066b76bb9aa81c4a1e0a32a5"},
  "hpax": {:hex, :hpax, "1.0.2", "762df951b0c399ff67cc57c3995ec3cf46d696e41f0bba17da0518d94acd4aac", [:mix], [], "hexpm", "2f09b4c1074e0abd846747329eaa26d535be0eb3d189fa69d812bfb8bfefd32f"},
  "jason": {:hex, :jason, "1.4.4", "b9226785a9aa77b6857ca22832cffa5d5011a667207eb2a0ad56adb5db443b8a", [:mix], [{:decimal, "~&gt; 1.0 or ~&gt; 2.0", [hex: :decimal, repo: "hexpm", optional: true]}], "hexpm", "c5eb0cab91f094599f94d55bc63409236a8ec69a21a67814529e8d5f6cc90b3b"},
  "mime": {:hex, :mime, "2.0.6", "8f18486773d9b15f95f4f4f1e39b710045fa1de891fada4516559967276e4dc2", [:mix], [], "hexpm", "c9945363a6b26d747389aac3643f8e0e09d30499a138ad64fe8fd1d13d9b153e"},
  "phoenix": {:hex, :phoenix, "1.7.20", "6bababaf27d59f5628f9b608de902a021be2cecefb8231e1dbdc0a2e2e480e9b", [:mix], [{:castore, "&gt;= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix_pubsub, "~&gt; 2.1", [hex: :phoenix_pubsub, repo: "hexpm", optional: false]}, {:phoenix_template, "~&gt; 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~&gt; 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~&gt; 2.7", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:plug_crypto, "~&gt; 1.2 or ~&gt; 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:websock_adapter, "~&gt; 0.5.3", [hex: :websock_adapter, repo: "hexpm", optional: false]}], "hexpm", "6be2ab98302e8784a31829e0d50d8bdfa81a23cd912c395bafd8b8bfb5a086c2"},
  "phoenix_ecto": {:hex, :phoenix_ecto, "4.6.3", "f686701b0499a07f2e3b122d84d52ff8a31f5def386e03706c916f6feddf69ef", [:mix], [{:ecto, "~&gt; 3.5", [hex: :ecto, repo: "hexpm", optional: false]}, {:phoenix_html, "~&gt; 2.14.2 or ~&gt; 3.0 or ~&gt; 4.1", [hex: :phoenix_html, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.9", [hex: :plug, repo: "hexpm", optional: false]}, {:postgrex, "~&gt; 0.16 or ~&gt; 1.0", [hex: :postgrex, repo: "hexpm", optional: true]}], "hexpm", "909502956916a657a197f94cc1206d9a65247538de8a5e186f7537c895d95764"},
  "phoenix_html": {:hex, :phoenix_html, "4.2.1", "35279e2a39140068fc03f8874408d58eef734e488fc142153f055c5454fd1c08", [:mix], [], "hexpm", "cff108100ae2715dd959ae8f2a8cef8e20b593f8dfd031c9cba92702cf23e053"},
  "phoenix_live_dashboard": {:hex, :phoenix_live_dashboard, "0.8.6", "7b1f0327f54c9eb69845fd09a77accf922f488c549a7e7b8618775eb603a62c7", [:mix], [{:ecto, "~&gt; 3.6.2 or ~&gt; 3.7", [hex: :ecto, repo: "hexpm", optional: true]}, {:ecto_mysql_extras, "~&gt; 0.5", [hex: :ecto_mysql_extras, repo: "hexpm", optional: true]}, {:ecto_psql_extras, "~&gt; 0.7", [hex: :ecto_psql_extras, repo: "hexpm", optional: true]}, {:ecto_sqlite3_extras, "~&gt; 1.1.7 or ~&gt; 1.2.0", [hex: :ecto_sqlite3_extras, repo: "hexpm", optional: true]}, {:mime, "~&gt; 1.6 or ~&gt; 2.0", [hex: :mime, repo: "hexpm", optional: false]}, {:phoenix_live_view, "~&gt; 0.19 or ~&gt; 1.0", [hex: :phoenix_live_view, repo: "hexpm", optional: false]}, {:telemetry_metrics, "~&gt; 0.6 or ~&gt; 1.0", [hex: :telemetry_metrics, repo: "hexpm", optional: false]}], "hexpm", "1681ab813ec26ca6915beb3414aa138f298e17721dc6a2bde9e6eb8a62360ff6"},
  "phoenix_live_view": {:hex, :phoenix_live_view, "1.0.5", "f072166f87c44ffaf2b47b65c5ced8c375797830e517bfcf0a006fe7eb113911", [:mix], [{:floki, "~&gt; 0.36", [hex: :floki, repo: "hexpm", optional: true]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix, "~&gt; 1.6.15 or ~&gt; 1.7.0", [hex: :phoenix, repo: "hexpm", optional: false]}, {:phoenix_html, "~&gt; 3.3 or ~&gt; 4.0", [hex: :phoenix_html, repo: "hexpm", optional: false]}, {:phoenix_template, "~&gt; 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~&gt; 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.15", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4.2 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "94abbc84df8a93a64514fc41528695d7326b6f3095e906b32f264ec4280811f3"},
  "phoenix_pubsub": {:hex, :phoenix_pubsub, "2.1.3", "3168d78ba41835aecad272d5e8cd51aa87a7ac9eb836eabc42f6e57538e3731d", [:mix], [], "hexpm", "bba06bc1dcfd8cb086759f0edc94a8ba2bc8896d5331a1e2c2902bf8e36ee502"},
  "phoenix_template": {:hex, :phoenix_template, "1.0.4", "e2092c132f3b5e5b2d49c96695342eb36d0ed514c5b252a77048d5969330d639", [:mix], [{:phoenix_html, "~&gt; 2.14.2 or ~&gt; 3.0 or ~&gt; 4.0", [hex: :phoenix_html, repo: "hexpm", optional: true]}], "hexpm", "2c0c81f0e5c6753faf5cca2f229c9709919aba34fab866d3bc05060c9c444206"},
  "plug": {:hex, :plug, "1.17.0", "a0832e7af4ae0f4819e0c08dd2e7482364937aea6a8a997a679f2cbb7e026b2e", [:mix], [{:mime, "~&gt; 1.0 or ~&gt; 2.0", [hex: :mime, repo: "hexpm", optional: false]}, {:plug_crypto, "~&gt; 1.1.1 or ~&gt; 1.2 or ~&gt; 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4.3 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "f6692046652a69a00a5a21d0b7e11fcf401064839d59d6b8787f23af55b1e6bc"},
  "plug_crypto": {:hex, :plug_crypto, "2.1.0", "f44309c2b06d249c27c8d3f65cfe08158ade08418cf540fd4f72d4d6863abb7b", [:mix], [], "hexpm", "131216a4b030b8f8ce0f26038bc4421ae60e4bb95c5cf5395e1421437824c4fa"},
  "postgrex": {:hex, :postgrex, "0.20.0", "363ed03ab4757f6bc47942eff7720640795eb557e1935951c1626f0d303a3aed", [:mix], [{:db_connection, "~&gt; 2.1", [hex: :db_connection, repo: "hexpm", optional: false]}, {:decimal, "~&gt; 1.5 or ~&gt; 2.0", [hex: :decimal, repo: "hexpm", optional: false]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:table, "~&gt; 0.1.0", [hex: :table, repo: "hexpm", optional: true]}], "hexpm", "d36ef8b36f323d29505314f704e21a1a038e2dc387c6409ee0cd24144e187c0f"},
  "telemetry": {:hex, :telemetry, "1.3.0", "fedebbae410d715cf8e7062c96a1ef32ec22e764197f70cda73d82778d61e7a2", [:rebar3], [], "hexpm", "7015fc8919dbe63764f4b4b87a95b7c0996bd539e0d499be6ec9d7f3875b79e6"},
  "telemetry_metrics": {:hex, :telemetry_metrics, "1.1.0", "5bd5f3b5637e0abea0426b947e3ce5dd304f8b3bc6617039e2b5a008adc02f8f", [:mix], [{:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "e7b79e8ddfde70adb6db8a6623d1778ec66401f366e9a8f5dd0955c56bc8ce67"},
  "telemetry_poller": {:hex, :telemetry_poller, "1.1.0", "58fa7c216257291caaf8d05678c8d01bd45f4bdbc1286838a28c4bb62ef32999", [:rebar3], [{:telemetry, "~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "9eb9d9cbfd81cbd7cdd24682f8711b6e2b691289a0de6826e58452f28c103c8f"},
  "thousand_island": {:hex, :thousand_island, "1.3.11", "b68f3e91f74d564ae20b70d981bbf7097dde084343c14ae8a33e5b5fbb3d6f37", [:mix], [{:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "555c18c62027f45d9c80df389c3d01d86ba11014652c00be26e33b1b64e98d29"},
  "websock": {:hex, :websock, "0.5.3", "2f69a6ebe810328555b6fe5c831a851f485e303a7c8ce6c5f675abeb20ebdadc", [:mix], [], "hexpm", "6105453d7fac22c712ad66fab1d45abdf049868f253cf719b625151460b8b453"},
  "websock_adapter": {:hex, :websock_adapter, "0.5.8", "3b97dc94e407e2d1fc666b2fb9acf6be81a1798a2602294aac000260a7c4a47d", [:mix], [{:bandit, "&gt;= 0.6.0", [hex: :bandit, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~&gt; 2.6", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:websock, "~&gt; 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "315b9a1865552212b5f35140ad194e67ce31af45bcee443d4ecb96b5fd3f3782"},
}
</code></pre></div></div> <p>You can see lots of libraries that are not in the project’s <code class="language-plaintext highlighter-rouge">deps/0</code> list. For example, castore and plug.</p> <p>Its an interesting file to look at. Our <code class="language-plaintext highlighter-rouge">deps/0</code> list contains:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:phoenix, "~&gt; 1.7.20"}
</code></pre></div></div> <p>The mix.lock file has:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"phoenix": {:hex, :phoenix, "1.7.20", \
"6bababaf27d59f5628f9b608de902a021be2cecefb8231e1dbdc0a2e2e480e9b", [:mix], \
[{:castore, "&gt;= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, \
{:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, \
{:phoenix_pubsub, "~&gt; 2.1", [hex: :phoenix_pubsub, repo: "hexpm", optional: \
false]}, {:phoenix_template, "~&gt; 1.0", [hex: :phoenix_template, repo: "hexpm", \
optional: false]}, {:phoenix_view, "~&gt; 2.0", [hex: :phoenix_view, repo: \
"hexpm", optional: true]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", \
optional: false]}, {:plug_cowboy, "~&gt; 2.7", [hex: :plug_cowboy, repo: "hexpm", \
optional: true]}, {:plug_crypto, "~&gt; 1.2 or ~&gt; 2.0", [hex: :plug_crypto, repo: \
"hexpm", optional: false]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, \
repo: "hexpm", optional: false]}, {:websock_adapter, "~&gt; 0.5.3", [hex: \
:websock_adapter, repo: "hexpm", optional: false]}], "hexpm", \
"6be2ab98302e8784a31829e0d50d8bdfa81a23cd912c395bafd8b8bfb5a086c2"}
</code></pre></div></div> <p>The mix.lock entry starts with the library name (“phoenix”:). It then has a tuple indicating the library is pulled from hex.pm and it has the version of the library that was indicated in the mix.exs file (in this particular case).</p> <p>As shown in the section on “Dependencies and Requirements” the version that ends up in the mix.lock file can be different from the version specified in the mix.exs file. It will meet the requirements that you specify. If the requirements cannot be met then the build fails.</p> <p>The information in the mix.lock file is used during the build process. It isn’t used to indicate how the code is actually deployed. In the mix.exs file you can specify releases under the project. This is a list allowing multiple entries. Each entry specifies something that can be released independently. You can look at the doc for ‘mix release’ for more information.</p> <h2 id="ci-and-dependencies">CI and Dependencies</h2> <p>For applications I recommend that developers check in the mix.lock file for your application. Your CI builds should use:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix deps.get --check-locked
</code></pre></div></div> <p>The documentation for <a href="https://hexdocs.pm/mix/1.18.3/Mix.Tasks.Deps.Get.html#module-command-line-options">mix deps.get</a> command line options indicates that this will raise if performing the get of the dependency would result in a change to the mix.lock file.</p> <p>The reason to do this is to ensure that what you build and deploy matches what developers are using in their own environments to test their code. It catches changes that are unexpected. After figuring out the change and deciding its fine you can update your mix.lock file to resolve the issue. If the change might cause a problem then you’ll have to use a tighter restriction on the fetched dependencies so that your production code uses the version you want.</p> <h2 id="dependency-conflicts">Dependency Conflicts</h2> <p>If your app is dependent on libraries and libraries are dependent on other libraries then there can be conflicts. These occur when a requirement for a library in one mix.exs file conflicts with the requirement in another. For example, here are two statements that have a conflict that the compiler cannot resolve.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:phoenix, "&lt; 1.7"}
{:phoenix, "&gt;= 1.7.6"}
</code></pre></div></div> <p>The Phoenix library cannot be both below version 1.7 and greater than or less than 1.7.6. The compile will fail.</p> <p>It is up to the developer to resolve these type of conflicts. The app can only have one version of the Phoenix library loaded.</p> <p>It is possible to force an override in your application’s mix.exs if you have issues like this. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:phoenix, "&gt;= 1.7.6", override: true}
</code></pre></div></div> <p>This generally requires an investigation to ensure you are not just going to break a library when you override to force a version the library has not declared as compatible.</p> <h2 id="checking-if-dependencies-are-up-to-date">Checking If Dependencies Are Up To Date</h2> <p>There is a built in command in mix to allow you to check if your dependency is up to date:</p> <p><code class="language-plaintext highlighter-rouge">mix hex.outdated</code></p> <p>As long as the dependencies you use are in hex.pm this will output information that tells you that a library is “Up-to-date”, “Update possible” or “Update not possible”.</p> <p>If this outputs “Update not possible” then it means that you cannot get the most current library without modifying your requirement specification for the library. That is, you’ll have to edit your mix.exs file manually.</p> <p>It’s important to run this on a consistent basis to be aware of when your dependencies are falling behind the current releases. Keeping your dependencies up to date will save you lots of heartache.</p> <p>It’s important to review a CHANGELOG.md for a library (assuming it has one) before updating a dependency. Although its important to keep your dependencies updated, its much more important to ensure that your application actually functions. Be careful. Read through the changes done to a library and test thoroughly in a non-production environment before updating your dependency.</p> <h2 id="my-library-is-abandoned">My Library Is Abandoned</h2> <p>Open source software is wonderful. But if you are writing an app you might use a library that has only a single maintainer. This might work perfectly well when you first deploy your application. But it can be multiple years later and you are still using the version that you originally depended on because no releases have been done for the library.</p> <p>I’d suggest attempting to contact the library author. Add issues to their project to indicate why its important that the library is updated. Create pull requests to perform the needed updates.</p> <p>If the library author seems unreachable then you really have to fork the repo and begin developing and maintaining the software out of the new repo. I’d add to the README.md file to indicate what you are doing and why. I’d keep the library public so you might possibly also be able to leverage other folks in the Elixir open source community. At this point you are no longer using hex.pm and will have to reference the github location in your library requirement.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Some notes about Elixir dependencies]]></summary></entry><entry><title type="html">Writing Confusing Code in Elixir</title><link href="https://fmcgeough.github.io/blog/2025/making-confusing-code/" rel="alternate" type="text/html" title="Writing Confusing Code in Elixir"/><published>2025-03-14T14:11:00+00:00</published><updated>2025-03-14T14:11:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/making-confusing-code</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/making-confusing-code/"><![CDATA[<p>I got into the Elixir language fairly early on. I was working at a company that used Java and Scala and was pretty bored. I was, in truth, also aggravated at the quality of the code that I’d see produced. The code would solve the problem, true. But it solved it in a way that made the code hard to look at. And hard to look at code is generally not going to be maintained well.</p> <p>Looking at Elixir code and beginning to write it was great. I thought, foolishly, that here was a language that would eliminate this type of code. It was so easy to write code that was great to read. The fact that it was built around immutability eliminated a whole swath of problems that I’d seen. It was so much easier to write code that solved problems with a collection of worker processes. And, importantly for me, it was easy to read.</p> <p>I developed a few Phoenix web apps for the company. These were definitely skunk works projects that I developed completely independently. I let engineering teams know that they were available and they got used a fair amount. They became one part of forming a SRE team at the company. After this I moved on to work at companies where Elixir was a first class citizen. That’s when I discovered that, as it turns out, just like with Java, you can make interesting messes with Elixir too. Here’s one example.</p> <p>I worked on a service that had a REST API that fetched data. The data could be paged. The caller passed a limit and offset as query parameters. There were a few simple rules:</p> <ul> <li>limit and offset both had to be integer values (well String representations of those values since they are coming in as query parameters)</li> <li>limit had to be greater than or equal to 1</li> <li>limit had to be less than or equal to 25</li> <li>offset had to be greater than or equal to 0 (no negative offsets)</li> </ul> <p>The code to handle this looked something like this (simplified):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def fetch_page(conn, params) do
  Parameters.parse(params, fn limit, offset -&gt;
    case do_some_fetch(limit, offset) do
      {:ok, data} -&gt; send_response(conn, data, limit, offset)
      :error -&gt; invalid_request(conn)
  end)
  rescue e -&gt;
     ## Some more code to handle exceptions that might get thrown
     ## by the Parameters module or data fetching
end
</code></pre></div></div> <p>That is, the folks that wrote the code created a module to parse out the limit and offset but the function that was written required that the caller pass in a function that the <code class="language-plaintext highlighter-rouge">Parameters</code> module would call passing it the parsed limit and offset. The actual work is inside this function.</p> <p>The problem with this code was 1) the wrong module is in the driver’s seat. Parameters shouldn’t be what is driving how my code works. It makes error handling awkward and the code harder to read; 2) in order to test the Parameters module you have to pass a function to the parse/1 function. That’s going to cause initial confusion for developers added to the project. Callbacks like this are not a great idea; 3) once the parameters are parsed the code was then passing the data on to the fetcher as individual parameters. There’s nothing intrinsically wrong with this. But it’s kind of a pain if we decide to add additional parameters later. I prefer to pass a map that has been typed and documented; 4) Instead of using a FallbackController to handle errors the controller was handling errors. It also was forced to account for exceptions that might be thrown by the Parameters parse or the data fetching. I don’t want this in my controller code. I want the lower level code to handle these problems so that my controller code is clean and straightforward. Instead of that we had code that was kind of dense and hard to parse at a glance.</p> <p>So I refactored this into something that looked more like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def fetch_page(conn, params) do
    with {:ok, parsed_params} &lt;- Parameters.parse(params),
         {:ok, fetched_data} &lt;- DataFetcher.fetch(parsed_params) do
      send_response(conn, parsed_params, fetched_data)
    end
end
</code></pre></div></div> <p>Using the with statement means we only send a response if the caller of the REST API passed valid parameters and the code was able to get to the database and fetch data.</p> <p>In order to get to this state there had to be some thought given to the errors returned by the modules called by the controller. We had to normalize on an error format and agree on a set of standard errors. This was easy to do and made everyone happier. The code was easy to look at, test and maintain.</p> <p>One thing to keep in mind when using the <code class="language-plaintext highlighter-rouge">with</code> approach is that the errors should be distinctive to allow separation of “the caller passed us invalid parameters” vs “the caller parameters were fine but we had an issue fetching data”. This is important because you want the user of the REST API to know whether they are doing the right thing (even if the service wasn’t able to do what they wanted).</p> <p>When you write code try and imagine what it is going to be like to maintain the code (whether this is you or someone a few years later who has no idea what you had in mind).</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Comparison of different ways of writing a controller function]]></summary></entry></feed>