<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-28T15:59:30+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Atkin White Rice</title><link href="https://fmcgeough.github.io/blog/2025/atkin-white-rice/" rel="alternate" type="text/html" title="Atkin White Rice"/><published>2025-05-26T10:00:00+00:00</published><updated>2025-05-26T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/atkin-white-rice</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/atkin-white-rice/"><![CDATA[<p>On Christmas Eve I had a proximal fracture of my right humerus. This means the break was in the upper part of the humerus. It was just below the head of the humerus that fits into the shoulder socket. This was both frustrating and painful.</p> <p>I broke it by slipping on some ice that was on the sidewalk just next door to our house. I had been out for about a 2 mile walk. It was a coldish day. The temperature was below freezing. However, the skies were clear. It hadn’t rained recently. As a result I wasn’t paying close enough attention to the sidewalk when I got back from my walk.</p> <p>Falls are the most common reason for a proximal fracture. Since its a large bone there is significant pain. I lay for a few seconds figuring out how to get myself back up since my right arm was useless at this point. I managed to get back up and got back home. My wife took me over to the hospital for an x-ray to confirm that it was broken. Thankfully, the bone wasn’t displaced so no surgery was needed.</p> <p>However, these fractures take quite a long time to heal. I was in a sling for 4-5 weeks and then began physical therapy. Ultimately I actually had to use a bone stimulator (Exogen Ultrasound device) to encourage bone growth to get the break sealed up. This seemed to work fine and the last x-ray showed that the bone was healed. The bone healing is not the end of things though. It will take another few months to get the strength back in my upper arm and the level of flexibility that I had before the break.</p> <p>One of the hardest parts of this whole process is that I was unable to play guitar. A couple weeks after the sling came off I could manage to play an electric because it had a thinner body and I could get my arm around it without significant pain. I could only play for 5 or 10 minutes at a time.</p> <p>During all this downtime from guitar playing I discovered Atkin Guitars. Atkin Guitars was founded in Canterbury, England, in 1995. They build a number of models that are homages to pre-war Gibson and Martin guitars. They also built a tribute guitar that was a copy of Tony Rice’s D-28 (serial # 58957).</p> <p>The Tony Rice guitar was originally built in 1935. It has Brazilian rosewood back and sides and an Adirondack top. Before Tony Rice the guitar was owned by renowned guitarist Clarence White. It was heavily modified and put through a lot of abuse and then was cleverly restored by superior luthiers. Here’s the general outline of the story.</p> <p>Between its build in 1935 and 1959 there’s no story of who owned the guitar and how badly it was treated. And it was badly treated. But in 1959 fifteen year old bluegrass guitarist Clarence White bought the guitar for $25. It was really beat up and awaiting repairs. Some previous owner had whittled the soundhole to widen it. The original fingerboard was gone. It had been replaced with an ebony board that being held on with tape! He bought it and brought it home to his father. White’s father - who was a very good guitar repair person - declared it a lost cause. But White was determined. He took the guitar to luthier Milt Owen. Owen said he could make it playable for another $25. He found an old Gretsch blank with 22 frets that became the fingerboard. The guitar had been brought back to life.</p> <p>When Owen gave the guitar back to White he cautioned that he should only use light gauge strings on the guitar. White seemingly immediately ignored this advice. So after just a year of use the action was incredibly high and it was almost unplayable. It was at this point that 9 year old music prodigy Tony Rice ran into the guitar at a music show in southern California. White let Rice play the guitar for as long as he wanted that day and Rice was impressed with the sound. He said “The only thing I knew was that it looked like hell but it sounded like a million bucks to a 9-year-old kid!” At some time later, as the guitar had become even more unplayable, White leaned the guitar against a tree and shot it with his pellet gun. The guitar was sold (or given) to his friend Joe Miller in 1965. Miller left the guitar under his bed for 9 years.</p> <p>At that point a grown Tony Rice tracked the guitar down and said he’d like to buy it from Joe Miller. Miller was aware of Tony Rice’s talents and agreed to sell the guitar. The guitar was appraised and sold to Rice for $550. The guitar was eventually put back in working shape by Richard Hoover (who would co-found Santa Cruz Guitars later).</p> <p>While Tony Rice owned the guitar in 1993 he lived with his wife in Crystal River, Florida. A hurricane hit in the middle of the night and they were evacuated without a chance to grab anything (including the D-28). The home flooded. The guitar was under water for a couple hours before it was retrieved but it no longer sounded like it used to. Five years later a man named Harry Sparks slowly dried out the guitar. This caused a lot of the bracings to come loose. Eventually luthier and friend Snuffy Smith reglued all the bracings and got it back to its former glory.</p> <p>This guitar became legendary. It was used on any number of famous recordings. The enlarged soundhole gave it a unique volume and projection.</p> <p>There are a number of guitar makers who have crafted replicas of Rice’s iconic guitar. Santa Cruz has a Tony Rice model. So does Bourgeois, Martin, Huss &amp; Dalton, Collins and, the aforementioned, Atkin Guitars.</p> <p>After watching lots of Atkin Guitar videos and hearing a number of artists playing various models I decided I’d try and trade my Lowden F-34 guitar and get the Atkin Tony Rice model. The Lowden was amazing but I really wanted the Atkin model.</p> <p>Atkin Guitars decided to name their replica the “White Rice” model as an homage to both Clarence White and Tony Rice. They sell it with both a Madagascar rosewood back and sides and one with Indian rosewood. I found one at Music Emporium in Boston Massachusetts with the Madagascar rosewood, worked out a trade for my Lowden (and forked over some more $$$) and got the Atkin Guitar.</p> <p>It’s only been recently that I’ve been able to play the new guitar for more than a couple minutes. It’s amazing and easily the best acoustic I own. I’d like to get another Atkin Guitars model at some point. Maybe their homage to the Gibson J-45.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-05-26-front-atkin-white-rice.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-05-26-back-atkin-white-rice.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-05-26-side-atkin-white-rice.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Atkin White Rice Custom Madagascar </div>]]></content><author><name></name></author><category term="guitar"/><summary type="html"><![CDATA[My new D-28 style guitar]]></summary></entry><entry><title type="html">Elixir - Iex History</title><link href="https://fmcgeough.github.io/blog/2025/iex-history/" rel="alternate" type="text/html" title="Elixir - Iex History"/><published>2025-04-19T00:00:00+00:00</published><updated>2025-04-19T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/iex-history</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/iex-history/"><![CDATA[<p>There are any number of notes around showing how to enable history in iex (the Elixir language repl). You need to set a system environment variable for this to work. Add the following line:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export ERL_AFLAGS="-kernel shell_history enabled"
</code></pre></div></div> <p>to either <code class="language-plaintext highlighter-rouge">~/.bash_profile</code> (for bash users) or <code class="language-plaintext highlighter-rouge">~/.zshev</code> (for zsh users).</p> <p>You may need to completely exit iTerm if using OS X to enable iex history after setting up this environment variable.</p> <p>This enables history in both iex and erl (Erlang repl). Note: the history is shared between iex and erl.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[How to enable history for Elixir iex]]></summary></entry><entry><title type="html">Elixir Dependencies</title><link href="https://fmcgeough.github.io/blog/2025/elixir-dependencies/" rel="alternate" type="text/html" title="Elixir Dependencies"/><published>2025-03-24T00:00:00+00:00</published><updated>2025-03-24T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/elixir-dependencies</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/elixir-dependencies/"><![CDATA[<p>Elixir is a dynamic, functional language for building scalable and maintainable applications. When you build applications you are going to use libraries. Libraries can be either open source like Phoenix or privately created libraries. This post is some general notes on Elixir and dependency management. Please check the actual Elixir documentation (for your particular version) to get the most accurate answers to any questions.</p> <ul> <li>https://hexdocs.pm/mix/1.1.1/Mix.Tasks.Deps.html</li> <li>https://hexdocs.pm/hex/Mix.Tasks.Hex.Outdated.html</li> <li>https://hexdocs.pm/hex/Mix.Tasks.Hex.Audit.html</li> <li>https://hexdocs.pm/elixir/dependencies-and-umbrella-projects.html</li> </ul> <h2 id="where-do-dependencies-come-from">Where Do Dependencies Come From?</h2> <p>A mix.exs file exists for a mix project. The file defines a module and the module has the statement: <code class="language-plaintext highlighter-rouge">use Mix.Project</code>. Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Xyz.MixProject do
  use Mix.Project

  &lt;etc, etc&gt;
</code></pre></div></div> <p>See <a href="https://hexdocs.pm/mix/1.18.3/Mix.Project.html">Mix.Project</a> for detailed information. An implementation of a <code class="language-plaintext highlighter-rouge">project/0</code> function is required in the module. This function returns a keyword list representing configuration for the project. One of keyword items is <code class="language-plaintext highlighter-rouge">:deps</code>. This is a list of dependencies of this project. Defaults to <code class="language-plaintext highlighter-rouge">[]</code>.</p> <p>Dependencies are specified in a particular way (described below). When dependencies are fetched mix creates a mix.lock file. This file has the final resolved dependency information and is what is used for building your software.</p> <h2 id="project-structure">Project Structure</h2> <p>The mix.exs and mix.lock files exist in different places and with slightly different rules depending on the choice of project structure.</p> <p>It’s probably useful to go over project structure before talking about library dependencies since you may run into three project organizations in Elixir. The project organization has an impact on the mechanics of dependency management.</p> <h3 id="flat-project">Flat Project</h3> <p>The first type of project is flat/standard. This is the type of structure that you get if you invoke <code class="language-plaintext highlighter-rouge">mix phx.new</code>. For a Phoenix web app generated with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix phx.new --no-html --no-live --no-tailwind \
    --no-esbuild --no-mailer xyz
</code></pre></div></div> <p>you’d get a general directory structure like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/xyz
  mix.exs
  mix.lock
  /lib
    /xyz
    /xyz_web
</code></pre></div></div> <p>In a flat structure all the dependencies are put in the top-level mix.exs file. Performing a <code class="language-plaintext highlighter-rouge">mix deps.get</code> creates and populates the <code class="language-plaintext highlighter-rouge">mix.lock</code> file.</p> <h3 id="umbrella-project">Umbrella Project</h3> <p>The second type of project is an umbrella project. You can generate a Phoenix app as an umbrella project using the <code class="language-plaintext highlighter-rouge">--umbrella</code> option. For a Phoenix web app generated with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix phx.new --no-html --no-live --no-tailwind \
  --no-esbuild --no-mailer --umbrella xyz
</code></pre></div></div> <p>you’d get a general directory structure like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/xyz
  mix.exs
  mix.lock
  /apps
    /xyz
      mix.exs
    /xyz_web
      mix.exs
</code></pre></div></div> <p>In an umbrella structure the top-level mix.exs file has a <code class="language-plaintext highlighter-rouge">deps/0</code> function. However, the deps are available only for this project and cannot be accessed from applications inside the <code class="language-plaintext highlighter-rouge">apps/</code> folder. For example, you might add a dependency on credo so you can run credo over all the source code contained in the multiple subdirectories under <code class="language-plaintext highlighter-rouge">apps/</code></p> <p>The dependencies for the deliverable are contained in the mix.exs files for the two apps subdirectories xyz and xyz_web. Note that you can have as many “apps” as you want in the <code class="language-plaintext highlighter-rouge">apps/</code> directory. Each directory would have its own mix.exs file. The two shown above are generated by default. The <code class="language-plaintext highlighter-rouge">xyz</code> directory is meant to hold “business logic”. The <code class="language-plaintext highlighter-rouge">xyz_web</code> directory is meant to hold “all the code dealing with web requests”.</p> <p>The umbrella project structure is recognized by mix. When you <code class="language-plaintext highlighter-rouge">mix deps.get</code> from the command line a <code class="language-plaintext highlighter-rouge">mix.lock</code> file is created in the top-level directory. This file will contain dependencies for all the <code class="language-plaintext highlighter-rouge">apps/</code> subdirectories in your project.</p> <h3 id="poncho-project">Poncho Project</h3> <p>The third project type is a poncho project. Poncho projects are common in embedded Elixir (Nerves) projects. You may also find this approach in Phoenix code. In a poncho app the top-level mix.exs uses a path to indicate where code is. That means that could separate code into different directories but you are not required to have it all under an “apps” directory.</p> <p>Unlike an umbrella project, a poncho project will usually have a mix.lock file in each of the subdirectories referenced in the top-level mix.exs file. The subdirectories are compiled more like library dependencies.</p> <p>To compile the project each of your local directories that are under your project directory. Then go to the top level project directory to build the release. You don’t have the ability to run <code class="language-plaintext highlighter-rouge">mix test</code> from the top level and have it run <code class="language-plaintext highlighter-rouge">mix test</code> on all the code in all of your directories.</p> <h2 id="version-information">Version Information</h2> <p>Elixir projects are required to follow the version format outlined in the <a href="https://semver.org/">SemVer 2.0 schema</a>. A version is identified by three numbers: MAJOR.MINOR.PATCH.</p> <p>There is additional information in the Elixir documentation on how to handle pre-releases and build information:</p> <blockquote> <p>Pre-releases are supported by optionally appending a hyphen and a series of period-separated identifiers immediately following the patch version. Identifiers consist of only ASCII alphanumeric characters and hyphens ([0-9A-Za-z-]).</p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"1.0.0-alpha.3"
</code></pre></div></div> <blockquote> <p>Build information can be added by appending a plus sign and a series of dot-separated identifiers immediately following the patch or pre-release version. Identifiers consist of only ASCII alphanumeric characters and hyphens ([0-9A-Za-z-]):</p> </blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"1.0.0-alpha.3+20130417140000.amd64"
</code></pre></div></div> <p>SemVer naming actually has rules. These rules are not enforced by Elixir but it’s important to know what they are and to know whether dependencies you are using are observing the rules. The rules are important because developers, in general, expect them to be observed. Here are the rules:</p> <p>Given a version number MAJOR.MINOR.PATCH, increment the:</p> <ul> <li>MAJOR version when you make incompatible API changes</li> <li>MINOR version when you add functionality in a backward compatible manner</li> <li>PATCH version when you make backward compatible bug fixes</li> </ul> <p>Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable.</p> <p>Assuming all your dependent libraries are following these rules you can make a choice on how much risk to introduce in managing your dependencies via a dependent’s requirements.</p> <h2 id="dependencies-and-requirements">Dependencies and Requirements</h2> <p>When you specify that your code depends on a library you setup a requirement for it. One part of the requirement is where the library can be found: hex.pm, github, etc. Another part is which version of the library you want. To specify the version you can use the common comparison operators such as &gt;, &gt;=, &lt;, &lt;=, and ==. These work just like you’d imagine. Here’s some examples:</p> <table> <thead> <tr> <th style="text-align: left">Requirement</th> <th style="text-align: center">Meaning</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">{:phoenix, “== 1.7.20”}</td> <td style="text-align: center">Only version 1.7.20 is allowed</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&gt;= 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is 1.7.20 or greater</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&gt; 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is greater than 1.7.20</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&lt;= 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is less than or equal to 1.7.20</td> </tr> <tr> <td style="text-align: left">{:phoenix, “&lt; 1.7.20”}</td> <td style="text-align: center">Gets the latest version that is less than 1.7.20</td> </tr> </tbody> </table> <p>Requirements also support <code class="language-plaintext highlighter-rouge">and</code> and <code class="language-plaintext highlighter-rouge">or</code> for complex conditions:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      # 2.0.0 and later until 2.1.0
      "&gt;= 2.0.0 and &lt; 2.1.0"
</code></pre></div></div> <p>This is such a common requirement that there is a “special” operator to express it: “~&gt;”.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    # 2.0.0 and later until 2.1.0
    "~&gt; 2.0.0"
</code></pre></div></div> <p>The “~&gt;” operator indicates that the highest least-significant digit version of the library can be used. So, in the example, “~&gt; 2.0.0” means that “2.0.0”, “2.0.1”, “2.0.2”, etc can be used but “2.1.0” cannot.</p> <p>This means if you only specify MAJOR and MINOR digits you are allowing any MINOR digit but the MAJOR must match. So “~&gt; 2.0” means that “2.0.0”, “2.1.7”, “2.5.4” are all acceptable.</p> <p>The most common case is to specify down to the PATCH. This allows bug fixes but blocks backward compatible changes.</p> <p>Your approach needs to examine whether the library you are dependent on is actually following the SemVer rules. Most (if not all) of them will.</p> <h3 id="options-for-requirements">Options for Requirements</h3> <p>There are a number of options available when specifying a requirement for a dependency. Here are some common options you’ll see (for a complete list of options consult the <a href="https://hexdocs.pm/mix/1.1.1/Mix.Tasks.Deps.html">Mix.Tasks.Dep documentation</a>).</p> <ul> <li><code class="language-plaintext highlighter-rouge">:optional</code> - this marks the dependency as optional. In such cases, the current project will always include the optional dependency but any other project that depends on the current project won’t be forced to use the optional dependency. However, if the other project includes the optional dependency on its own, the requirements and options specified here will also be applied. Optional dependencies will not be started by the application. You should consider compiling your projects with the mix compile –no-optional-deps –warnings-as-errors during test, to ensure your project compiles without warnings even if optional dependencies are missing</li> <li><code class="language-plaintext highlighter-rouge">:only</code> - the dependency is made available only in the given environments, useful when declaring dev- or test-only dependencies</li> <li><code class="language-plaintext highlighter-rouge">:override</code> - if set to true the dependency will override any other definitions of itself by other dependencies</li> </ul> <h3 id="overriding-a-library-dependency">Overriding a Library Dependency</h3> <p>You can run into issues where one library you are using requires one version of a library while a second library requires a different version. The requirements are in conflict and the app won’t compile unless you intervene.</p> <p>One way to intervene is to specify the version to use in your app’s dependencies using the option <code class="language-plaintext highlighter-rouge">override: true</code>. Be aware that if you override across a MAJOR version you may cause serious issues with your app. It’s important to understand why a library has specified an older version of a library. In many cases its simply that the library specifying the older version is not being maintained or not maintained at a rate that aligns with the other library you are using. However, that is not necessarily the case.</p> <h2 id="mixlock">Mix.lock</h2> <p>The mix.lock file is generated when you run <code class="language-plaintext highlighter-rouge">mix deps.get</code>. This is the file that contains all of the dependencies for the project. It includes not only the dependencies declared in your mix.exs file but also all of the dependencies of your libraries. For example, for a Phoenix generated project the mix.lock file looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%{
  "bandit": {:hex, :bandit, "1.6.8", "be6fcbe01a74e6cba42ae35f4085acaeae9b2d8d360c0908d0b9addbc2811e47", [:mix], [{:hpax, "~&gt; 1.0", [hex: :hpax, repo: "hexpm", optional: false]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:thousand_island, "~&gt; 1.0", [hex: :thousand_island, repo: "hexpm", optional: false]}, {:websock, "~&gt; 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "4fc08c8d4733735d175a007ecb25895e84d09292b0180a2e9f16948182c88b6e"},
  "castore": {:hex, :castore, "1.0.12", "053f0e32700cbec356280c0e835df425a3be4bc1e0627b714330ad9d0f05497f", [:mix], [], "hexpm", "3dca286b2186055ba0c9449b4e95b97bf1b57b47c1f2644555879e659960c224"},
  "db_connection": {:hex, :db_connection, "2.7.0", "b99faa9291bb09892c7da373bb82cba59aefa9b36300f6145c5f201c7adf48ec", [:mix], [{:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "dcf08f31b2701f857dfc787fbad78223d61a32204f217f15e881dd93e4bdd3ff"},
  "decimal": {:hex, :decimal, "2.3.0", "3ad6255aa77b4a3c4f818171b12d237500e63525c2fd056699967a3e7ea20f62", [:mix], [], "hexpm", "a4d66355cb29cb47c3cf30e71329e58361cfcb37c34235ef3bf1d7bf3773aeac"},
  "dns_cluster": {:hex, :dns_cluster, "0.1.3", "0bc20a2c88ed6cc494f2964075c359f8c2d00e1bf25518a6a6c7fd277c9b0c66", [:mix], [], "hexpm", "46cb7c4a1b3e52c7ad4cbe33ca5079fbde4840dedeafca2baf77996c2da1bc33"},
  "ecto": {:hex, :ecto, "3.12.5", "4a312960ce612e17337e7cefcf9be45b95a3be6b36b6f94dfb3d8c361d631866", [:mix], [{:decimal, "~&gt; 2.0", [hex: :decimal, repo: "hexpm", optional: false]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "6eb18e80bef8bb57e17f5a7f068a1719fbda384d40fc37acb8eb8aeca493b6ea"},
  "ecto_sql": {:hex, :ecto_sql, "3.12.1", "c0d0d60e85d9ff4631f12bafa454bc392ce8b9ec83531a412c12a0d415a3a4d0", [:mix], [{:db_connection, "~&gt; 2.4.1 or ~&gt; 2.5", [hex: :db_connection, repo: "hexpm", optional: false]}, {:ecto, "~&gt; 3.12", [hex: :ecto, repo: "hexpm", optional: false]}, {:myxql, "~&gt; 0.7", [hex: :myxql, repo: "hexpm", optional: true]}, {:postgrex, "~&gt; 0.19 or ~&gt; 1.0", [hex: :postgrex, repo: "hexpm", optional: true]}, {:tds, "~&gt; 2.1.1 or ~&gt; 2.2", [hex: :tds, repo: "hexpm", optional: true]}, {:telemetry, "~&gt; 0.4.0 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "aff5b958a899762c5f09028c847569f7dfb9cc9d63bdb8133bff8a5546de6bf5"},
  "expo": {:hex, :expo, "1.1.0", "f7b9ed7fb5745ebe1eeedf3d6f29226c5dd52897ac67c0f8af62a07e661e5c75", [:mix], [], "hexpm", "fbadf93f4700fb44c331362177bdca9eeb8097e8b0ef525c9cc501cb9917c960"},
  "gettext": {:hex, :gettext, "0.26.2", "5978aa7b21fada6deabf1f6341ddba50bc69c999e812211903b169799208f2a8", [:mix], [{:expo, "~&gt; 0.5.1 or ~&gt; 1.0", [hex: :expo, repo: "hexpm", optional: false]}], "hexpm", "aa978504bcf76511efdc22d580ba08e2279caab1066b76bb9aa81c4a1e0a32a5"},
  "hpax": {:hex, :hpax, "1.0.2", "762df951b0c399ff67cc57c3995ec3cf46d696e41f0bba17da0518d94acd4aac", [:mix], [], "hexpm", "2f09b4c1074e0abd846747329eaa26d535be0eb3d189fa69d812bfb8bfefd32f"},
  "jason": {:hex, :jason, "1.4.4", "b9226785a9aa77b6857ca22832cffa5d5011a667207eb2a0ad56adb5db443b8a", [:mix], [{:decimal, "~&gt; 1.0 or ~&gt; 2.0", [hex: :decimal, repo: "hexpm", optional: true]}], "hexpm", "c5eb0cab91f094599f94d55bc63409236a8ec69a21a67814529e8d5f6cc90b3b"},
  "mime": {:hex, :mime, "2.0.6", "8f18486773d9b15f95f4f4f1e39b710045fa1de891fada4516559967276e4dc2", [:mix], [], "hexpm", "c9945363a6b26d747389aac3643f8e0e09d30499a138ad64fe8fd1d13d9b153e"},
  "phoenix": {:hex, :phoenix, "1.7.20", "6bababaf27d59f5628f9b608de902a021be2cecefb8231e1dbdc0a2e2e480e9b", [:mix], [{:castore, "&gt;= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix_pubsub, "~&gt; 2.1", [hex: :phoenix_pubsub, repo: "hexpm", optional: false]}, {:phoenix_template, "~&gt; 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~&gt; 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~&gt; 2.7", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:plug_crypto, "~&gt; 1.2 or ~&gt; 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:websock_adapter, "~&gt; 0.5.3", [hex: :websock_adapter, repo: "hexpm", optional: false]}], "hexpm", "6be2ab98302e8784a31829e0d50d8bdfa81a23cd912c395bafd8b8bfb5a086c2"},
  "phoenix_ecto": {:hex, :phoenix_ecto, "4.6.3", "f686701b0499a07f2e3b122d84d52ff8a31f5def386e03706c916f6feddf69ef", [:mix], [{:ecto, "~&gt; 3.5", [hex: :ecto, repo: "hexpm", optional: false]}, {:phoenix_html, "~&gt; 2.14.2 or ~&gt; 3.0 or ~&gt; 4.1", [hex: :phoenix_html, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.9", [hex: :plug, repo: "hexpm", optional: false]}, {:postgrex, "~&gt; 0.16 or ~&gt; 1.0", [hex: :postgrex, repo: "hexpm", optional: true]}], "hexpm", "909502956916a657a197f94cc1206d9a65247538de8a5e186f7537c895d95764"},
  "phoenix_html": {:hex, :phoenix_html, "4.2.1", "35279e2a39140068fc03f8874408d58eef734e488fc142153f055c5454fd1c08", [:mix], [], "hexpm", "cff108100ae2715dd959ae8f2a8cef8e20b593f8dfd031c9cba92702cf23e053"},
  "phoenix_live_dashboard": {:hex, :phoenix_live_dashboard, "0.8.6", "7b1f0327f54c9eb69845fd09a77accf922f488c549a7e7b8618775eb603a62c7", [:mix], [{:ecto, "~&gt; 3.6.2 or ~&gt; 3.7", [hex: :ecto, repo: "hexpm", optional: true]}, {:ecto_mysql_extras, "~&gt; 0.5", [hex: :ecto_mysql_extras, repo: "hexpm", optional: true]}, {:ecto_psql_extras, "~&gt; 0.7", [hex: :ecto_psql_extras, repo: "hexpm", optional: true]}, {:ecto_sqlite3_extras, "~&gt; 1.1.7 or ~&gt; 1.2.0", [hex: :ecto_sqlite3_extras, repo: "hexpm", optional: true]}, {:mime, "~&gt; 1.6 or ~&gt; 2.0", [hex: :mime, repo: "hexpm", optional: false]}, {:phoenix_live_view, "~&gt; 0.19 or ~&gt; 1.0", [hex: :phoenix_live_view, repo: "hexpm", optional: false]}, {:telemetry_metrics, "~&gt; 0.6 or ~&gt; 1.0", [hex: :telemetry_metrics, repo: "hexpm", optional: false]}], "hexpm", "1681ab813ec26ca6915beb3414aa138f298e17721dc6a2bde9e6eb8a62360ff6"},
  "phoenix_live_view": {:hex, :phoenix_live_view, "1.0.5", "f072166f87c44ffaf2b47b65c5ced8c375797830e517bfcf0a006fe7eb113911", [:mix], [{:floki, "~&gt; 0.36", [hex: :floki, repo: "hexpm", optional: true]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix, "~&gt; 1.6.15 or ~&gt; 1.7.0", [hex: :phoenix, repo: "hexpm", optional: false]}, {:phoenix_html, "~&gt; 3.3 or ~&gt; 4.0", [hex: :phoenix_html, repo: "hexpm", optional: false]}, {:phoenix_template, "~&gt; 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~&gt; 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.15", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4.2 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "94abbc84df8a93a64514fc41528695d7326b6f3095e906b32f264ec4280811f3"},
  "phoenix_pubsub": {:hex, :phoenix_pubsub, "2.1.3", "3168d78ba41835aecad272d5e8cd51aa87a7ac9eb836eabc42f6e57538e3731d", [:mix], [], "hexpm", "bba06bc1dcfd8cb086759f0edc94a8ba2bc8896d5331a1e2c2902bf8e36ee502"},
  "phoenix_template": {:hex, :phoenix_template, "1.0.4", "e2092c132f3b5e5b2d49c96695342eb36d0ed514c5b252a77048d5969330d639", [:mix], [{:phoenix_html, "~&gt; 2.14.2 or ~&gt; 3.0 or ~&gt; 4.0", [hex: :phoenix_html, repo: "hexpm", optional: true]}], "hexpm", "2c0c81f0e5c6753faf5cca2f229c9709919aba34fab866d3bc05060c9c444206"},
  "plug": {:hex, :plug, "1.17.0", "a0832e7af4ae0f4819e0c08dd2e7482364937aea6a8a997a679f2cbb7e026b2e", [:mix], [{:mime, "~&gt; 1.0 or ~&gt; 2.0", [hex: :mime, repo: "hexpm", optional: false]}, {:plug_crypto, "~&gt; 1.1.1 or ~&gt; 1.2 or ~&gt; 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~&gt; 0.4.3 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "f6692046652a69a00a5a21d0b7e11fcf401064839d59d6b8787f23af55b1e6bc"},
  "plug_crypto": {:hex, :plug_crypto, "2.1.0", "f44309c2b06d249c27c8d3f65cfe08158ade08418cf540fd4f72d4d6863abb7b", [:mix], [], "hexpm", "131216a4b030b8f8ce0f26038bc4421ae60e4bb95c5cf5395e1421437824c4fa"},
  "postgrex": {:hex, :postgrex, "0.20.0", "363ed03ab4757f6bc47942eff7720640795eb557e1935951c1626f0d303a3aed", [:mix], [{:db_connection, "~&gt; 2.1", [hex: :db_connection, repo: "hexpm", optional: false]}, {:decimal, "~&gt; 1.5 or ~&gt; 2.0", [hex: :decimal, repo: "hexpm", optional: false]}, {:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:table, "~&gt; 0.1.0", [hex: :table, repo: "hexpm", optional: true]}], "hexpm", "d36ef8b36f323d29505314f704e21a1a038e2dc387c6409ee0cd24144e187c0f"},
  "telemetry": {:hex, :telemetry, "1.3.0", "fedebbae410d715cf8e7062c96a1ef32ec22e764197f70cda73d82778d61e7a2", [:rebar3], [], "hexpm", "7015fc8919dbe63764f4b4b87a95b7c0996bd539e0d499be6ec9d7f3875b79e6"},
  "telemetry_metrics": {:hex, :telemetry_metrics, "1.1.0", "5bd5f3b5637e0abea0426b947e3ce5dd304f8b3bc6617039e2b5a008adc02f8f", [:mix], [{:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "e7b79e8ddfde70adb6db8a6623d1778ec66401f366e9a8f5dd0955c56bc8ce67"},
  "telemetry_poller": {:hex, :telemetry_poller, "1.1.0", "58fa7c216257291caaf8d05678c8d01bd45f4bdbc1286838a28c4bb62ef32999", [:rebar3], [{:telemetry, "~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "9eb9d9cbfd81cbd7cdd24682f8711b6e2b691289a0de6826e58452f28c103c8f"},
  "thousand_island": {:hex, :thousand_island, "1.3.11", "b68f3e91f74d564ae20b70d981bbf7097dde084343c14ae8a33e5b5fbb3d6f37", [:mix], [{:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "555c18c62027f45d9c80df389c3d01d86ba11014652c00be26e33b1b64e98d29"},
  "websock": {:hex, :websock, "0.5.3", "2f69a6ebe810328555b6fe5c831a851f485e303a7c8ce6c5f675abeb20ebdadc", [:mix], [], "hexpm", "6105453d7fac22c712ad66fab1d45abdf049868f253cf719b625151460b8b453"},
  "websock_adapter": {:hex, :websock_adapter, "0.5.8", "3b97dc94e407e2d1fc666b2fb9acf6be81a1798a2602294aac000260a7c4a47d", [:mix], [{:bandit, "&gt;= 0.6.0", [hex: :bandit, repo: "hexpm", optional: true]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~&gt; 2.6", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:websock, "~&gt; 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "315b9a1865552212b5f35140ad194e67ce31af45bcee443d4ecb96b5fd3f3782"},
}
</code></pre></div></div> <p>You can see lots of libraries that are not in the project’s <code class="language-plaintext highlighter-rouge">deps/0</code> list. For example, castore and plug.</p> <p>Its an interesting file to look at. Our <code class="language-plaintext highlighter-rouge">deps/0</code> list contains:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:phoenix, "~&gt; 1.7.20"}
</code></pre></div></div> <p>The mix.lock file has:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"phoenix": {:hex, :phoenix, "1.7.20", \
"6bababaf27d59f5628f9b608de902a021be2cecefb8231e1dbdc0a2e2e480e9b", [:mix], \
[{:castore, "&gt;= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, \
{:jason, "~&gt; 1.0", [hex: :jason, repo: "hexpm", optional: true]}, \
{:phoenix_pubsub, "~&gt; 2.1", [hex: :phoenix_pubsub, repo: "hexpm", optional: \
false]}, {:phoenix_template, "~&gt; 1.0", [hex: :phoenix_template, repo: "hexpm", \
optional: false]}, {:phoenix_view, "~&gt; 2.0", [hex: :phoenix_view, repo: \
"hexpm", optional: true]}, {:plug, "~&gt; 1.14", [hex: :plug, repo: "hexpm", \
optional: false]}, {:plug_cowboy, "~&gt; 2.7", [hex: :plug_cowboy, repo: "hexpm", \
optional: true]}, {:plug_crypto, "~&gt; 1.2 or ~&gt; 2.0", [hex: :plug_crypto, repo: \
"hexpm", optional: false]}, {:telemetry, "~&gt; 0.4 or ~&gt; 1.0", [hex: :telemetry, \
repo: "hexpm", optional: false]}, {:websock_adapter, "~&gt; 0.5.3", [hex: \
:websock_adapter, repo: "hexpm", optional: false]}], "hexpm", \
"6be2ab98302e8784a31829e0d50d8bdfa81a23cd912c395bafd8b8bfb5a086c2"}
</code></pre></div></div> <p>The mix.lock entry starts with the library name (“phoenix”:). It then has a tuple indicating the library is pulled from hex.pm and it has the version of the library that was indicated in the mix.exs file (in this particular case).</p> <p>As shown in the section on “Dependencies and Requirements” the version that ends up in the mix.lock file can be different from the version specified in the mix.exs file. It will meet the requirements that you specify. If the requirements cannot be met then the build fails.</p> <p>The information in the mix.lock file is used during the build process. It isn’t used to indicate how the code is actually deployed. In the mix.exs file you can specify releases under the project. This is a list allowing multiple entries. Each entry specifies something that can be released independently. You can look at the doc for ‘mix release’ for more information.</p> <h2 id="ci-and-dependencies">CI and Dependencies</h2> <p>For applications I recommend that developers check in the mix.lock file for your application. Your CI builds should use:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix deps.get --check-locked
</code></pre></div></div> <p>The documentation for <a href="https://hexdocs.pm/mix/1.18.3/Mix.Tasks.Deps.Get.html#module-command-line-options">mix deps.get</a> command line options indicates that this will raise if performing the get of the dependency would result in a change to the mix.lock file.</p> <p>The reason to do this is to ensure that what you build and deploy matches what developers are using in their own environments to test their code. It catches changes that are unexpected. After figuring out the change and deciding its fine you can update your mix.lock file to resolve the issue. If the change might cause a problem then you’ll have to use a tighter restriction on the fetched dependencies so that your production code uses the version you want.</p> <h2 id="dependency-conflicts">Dependency Conflicts</h2> <p>If your app is dependent on libraries and libraries are dependent on other libraries then there can be conflicts. These occur when a requirement for a library in one mix.exs file conflicts with the requirement in another. For example, here are two statements that have a conflict that the compiler cannot resolve.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:phoenix, "&lt; 1.7"}
{:phoenix, "&gt;= 1.7.6"}
</code></pre></div></div> <p>The Phoenix library cannot be both below version 1.7 and greater than or less than 1.7.6. The compile will fail.</p> <p>It is up to the developer to resolve these type of conflicts. The app can only have one version of the Phoenix library loaded.</p> <p>It is possible to force an override in your application’s mix.exs if you have issues like this. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:phoenix, "&gt;= 1.7.6", override: true}
</code></pre></div></div> <p>This generally requires an investigation to ensure you are not just going to break a library when you override to force a version the library has not declared as compatible.</p> <h2 id="checking-if-dependencies-are-up-to-date">Checking If Dependencies Are Up To Date</h2> <p>There is a built in command in mix to allow you to check if your dependency is up to date:</p> <p><code class="language-plaintext highlighter-rouge">mix hex.outdated</code></p> <p>As long as the dependencies you use are in hex.pm this will output information that tells you that a library is “Up-to-date”, “Update possible” or “Update not possible”.</p> <p>If this outputs “Update not possible” then it means that you cannot get the most current library without modifying your requirement specification for the library. That is, you’ll have to edit your mix.exs file manually.</p> <p>It’s important to run this on a consistent basis to be aware of when your dependencies are falling behind the current releases. Keeping your dependencies up to date will save you lots of heartache.</p> <p>It’s important to review a CHANGELOG.md for a library (assuming it has one) before updating a dependency. Although its important to keep your dependencies updated, its much more important to ensure that your application actually functions. Be careful. Read through the changes done to a library and test thoroughly in a non-production environment before updating your dependency.</p> <h2 id="my-library-is-abandoned">My Library Is Abandoned</h2> <p>Open source software is wonderful. But if you are writing an app you might use a library that has only a single maintainer. This might work perfectly well when you first deploy your application. But it can be multiple years later and you are still using the version that you originally depended on because no releases have been done for the library.</p> <p>I’d suggest attempting to contact the library author. Add issues to their project to indicate why its important that the library is updated. Create pull requests to perform the needed updates.</p> <p>If the library author seems unreachable then you really have to fork the repo and begin developing and maintaining the software out of the new repo. I’d add to the README.md file to indicate what you are doing and why. I’d keep the library public so you might possibly also be able to leverage other folks in the Elixir open source community. At this point you are no longer using hex.pm and will have to reference the github location in your library requirement.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Some notes about Elixir dependencies]]></summary></entry><entry><title type="html">Writing Confusing Code in Elixir</title><link href="https://fmcgeough.github.io/blog/2025/making-confusing-code/" rel="alternate" type="text/html" title="Writing Confusing Code in Elixir"/><published>2025-03-14T14:11:00+00:00</published><updated>2025-03-14T14:11:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/making-confusing-code</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/making-confusing-code/"><![CDATA[<p>I got into the Elixir language fairly early on. I was working at a company that used Java and Scala and was pretty bored. I was, in truth, also aggravated at the quality of the code that I’d see produced. The code would solve the problem, true. But it solved it in a way that made the code hard to look at. And hard to look at code is generally not going to be maintained well.</p> <p>Looking at Elixir code and beginning to write it was great. I thought, foolishly, that here was a language that would eliminate this type of code. It was so easy to write code that was great to read. The fact that it was built around immutability eliminated a whole swath of problems that I’d seen. It was so much easier to write code that solved problems with a collection of worker processes. And, importantly for me, it was easy to read.</p> <p>I developed a few Phoenix web apps for the company. These were definitely skunk works projects that I developed completely independently. I let engineering teams know that they were available and they got used a fair amount. They became one part of forming a SRE team at the company. After this I moved on to work at companies where Elixir was a first class citizen. That’s when I discovered that, as it turns out, just like with Java, you can make interesting messes with Elixir too. Here’s one example.</p> <p>I worked on a service that had a REST API that fetched data. The data could be paged. The caller passed a limit and offset as query parameters. There were a few simple rules:</p> <ul> <li>limit and offset both had to be integer values (well String representations of those values since they are coming in as query parameters)</li> <li>limit had to be greater than or equal to 1</li> <li>limit had to be less than or equal to 25</li> <li>offset had to be greater than or equal to 0 (no negative offsets)</li> </ul> <p>The code to handle this looked something like this (simplified):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def fetch_page(conn, params) do
  Parameters.parse(params, fn limit, offset -&gt;
    case do_some_fetch(limit, offset) do
      {:ok, data} -&gt; send_response(conn, data, limit, offset)
      :error -&gt; invalid_request(conn)
  end)
  rescue e -&gt;
     ## Some more code to handle exceptions that might get thrown
     ## by the Parameters module or data fetching
end
</code></pre></div></div> <p>That is, the folks that wrote the code created a module to parse out the limit and offset but the function that was written required that the caller pass in a function that the <code class="language-plaintext highlighter-rouge">Parameters</code> module would call passing it the parsed limit and offset. The actual work is inside this function.</p> <p>The problem with this code was 1) the wrong module is in the driver’s seat. Parameters shouldn’t be what is driving how my code works. It makes error handling awkward and the code harder to read; 2) in order to test the Parameters module you have to pass a function to the parse/1 function. That’s going to cause initial confusion for developers added to the project. Callbacks like this are not a great idea; 3) once the parameters are parsed the code was then passing the data on to the fetcher as individual parameters. There’s nothing intrinsically wrong with this. But it’s kind of a pain if we decide to add additional parameters later. I prefer to pass a map that has been typed and documented; 4) Instead of using a FallbackController to handle errors the controller was handling errors. It also was forced to account for exceptions that might be thrown by the Parameters parse or the data fetching. I don’t want this in my controller code. I want the lower level code to handle these problems so that my controller code is clean and straightforward. Instead of that we had code that was kind of dense and hard to parse at a glance.</p> <p>So I refactored this into something that looked more like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def fetch_page(conn, params) do
    with {:ok, parsed_params} &lt;- Parameters.parse(params),
         {:ok, fetched_data} &lt;- DataFetcher.fetch(parsed_params) do
      send_response(conn, parsed_params, fetched_data)
    end
end
</code></pre></div></div> <p>Using the with statement means we only send a response if the caller of the REST API passed valid parameters and the code was able to get to the database and fetch data.</p> <p>In order to get to this state there had to be some thought given to the errors returned by the modules called by the controller. We had to normalize on an error format and agree on a set of standard errors. This was easy to do and made everyone happier. The code was easy to look at, test and maintain.</p> <p>One thing to keep in mind when using the <code class="language-plaintext highlighter-rouge">with</code> approach is that the errors should be distinctive to allow separation of “the caller passed us invalid parameters” vs “the caller parameters were fine but we had an issue fetching data”. This is important because you want the user of the REST API to know whether they are doing the right thing (even if the service wasn’t able to do what they wanted).</p> <p>When you write code try and imagine what it is going to be like to maintain the code (whether this is you or someone a few years later who has no idea what you had in mind).</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Comparison of different ways of writing a controller function]]></summary></entry><entry><title type="html">Resonator Slide</title><link href="https://fmcgeough.github.io/blog/2025/resonator-slide/" rel="alternate" type="text/html" title="Resonator Slide"/><published>2025-03-12T13:05:00+00:00</published><updated>2025-03-12T13:05:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/resonator-slide</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/resonator-slide/"><![CDATA[<p>I keep working on my slide. Love old blues tunes and after listening to them I’m always thinking I should play more.</p> <p>This is using my Mavis Mule Resonator in Open D through a Wooly Coats amp. I used a ceramic slide from Rocky Mountain Slides (who I’d highly recommend). It’s recorded on my phone so quality is what it is.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2025-03-20-resonator.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I encourage anyone who practices any instrument to do some sort of recording of your practice. If you have a smartphone there’s a Voice Memo app you can use. On Mac OS X there’s the same Voice Memo app so you could record on the computer if that works. The important thing is to record so you can hear what you actually sound like later. It helps as a means of jotting down little song ideas as well.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-03-12-resonator-slide.mp3?raw=true" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-03-12a-resonator-slide.mp3?raw=true" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-03-12b-resonator-slide.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> Mavis Mule Resonator in Open - D </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Practice session using Mavis Mule Resonator]]></summary></entry><entry><title type="html">Config Files in Elixir</title><link href="https://fmcgeough.github.io/blog/2025/elixir-config-files/" rel="alternate" type="text/html" title="Config Files in Elixir"/><published>2025-03-06T13:30:00+00:00</published><updated>2025-03-06T13:30:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/elixir-config-files</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/elixir-config-files/"><![CDATA[<p>There are 5 config files generated when you create a new Elixir Phoenix application (using mix phx.new). These are the files and some general information about them.</p> <ul> <li>config.exs - used for storing global information needed in any environment</li> <li>dev.exs - used for storing global information needed only in a dev environment</li> <li>prod.exs - used for storing global information needed only in a prod environment</li> <li>runtime.exs - used to store global information for any environment.</li> <li>test.exs - used for storing global information needed only in a test environment</li> </ul> <h2 id="when-is-evaluation-done">When is Evaluation Done</h2> <p>The config.exs, dev.exs, prod.exs and test.exs files are evaluated at build time - before the application is compiled and before dependencies are loaded. Its important to understand this. If you attempt to do something like this in your prod.exs file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config :bureau, Bureau.SecretHolder,
    secret1: System.get_env("SECRET_CONFIG_THING1")
</code></pre></div></div> <p>Then secret1 will be set to whatever you have set in your compile environment (probably nothing).</p> <p>If you want to use the system environment to configure how your production app works then you use the runtime.exs file. This file is read after our application and dependencies are compiled and therefore it can configure how our application works at runtime. If the config above was in runtime.exs then secret1 is set to whatever the environment variable SECRET_CONFIG_THING1 stores on the machine on which you run your app.</p> <p>Be aware that runtime.exs is evaluated at runtime for all the Mix environments. When you are running unit tests locally your runtime.exs file is evaluated.</p> <p>Because this is the case you’ll find code like this in a lot of runtime.exs files:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import Config

if config_env() == :prod do
  database_url =
    System.get_env("DATABASE_URL") ||
      raise """
      environment variable DATABASE_URL is missing.
      For example: ecto://USER:PASS@HOST/DATABASE
      """
end
</code></pre></div></div> <p>We’re protecting setting up the database_url to when the config environment is <code class="language-plaintext highlighter-rouge">:prod</code>. This keeps us from overwriting the quite different database_url we most likely have for dev and test environments.</p> <h2 id="what-config-files-am-i-using">What Config Files am I using?</h2> <p>The config.exs file is evaluated (at compile time) for all environments. The dev, test, and prod config files are evaluated based on the environment being compiled. This is because of the line at the end of the config.exs file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import_config "#{config_env()}.exs"
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">config_env/0</code> function is in the Config module in Elixir. It returns the Mix environment. The Mix environment is obtained with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String.to_atom(System.get_env("MIX_ENV") || "dev")
</code></pre></div></div> <p>That is, Elixir looks for the value associated with “MIX_ENV” and if its not set then its going to default to “dev”.</p> <p>The runtime.exs file, as indicated earlier, is loaded for all environments. Generally, when you are developing locally you are using:</p> <ul> <li>config.exs</li> <li>dev.exs</li> <li>runtime.exs</li> </ul> <p>When you are running unit tests you are using:</p> <ul> <li>config.exs</li> <li>test.exs</li> <li>runtime.exs</li> </ul> <p>When you are running your code in production you are using:</p> <ul> <li>config.exs</li> <li>prod.exs</li> <li>runtime.exs</li> <li>(and maybe releases.exs)</li> </ul> <h2 id="what-about-releasesexs">What about releases.exs?</h2> <p>Before Elixir 1.11 an app that wanted to use environment variables in production would use a file called releases.exs. This file was also stored in the config directory. There was no runtime.exs.</p> <p>The releases.exs was similar to runtime.exs but not quite the same. The releases.exs was evaluated at runtime but only for <code class="language-plaintext highlighter-rouge">:prod</code>. The runtime.exs is used for all the mix environments.</p> <p>You can still have a releases.exs (as well as a runtime.exs) in an app. However, its confusing and you should migrate whatever is in your releases.exs file to the runtime.exs file and delete the releases.exs file.</p> <p>If you do have both files then the runtime.exs file is executed first followed by the releases.exs file. Its easy to see how confusing and error prone it is to have both. Your runtime.exs might try to setup an application environment value and releases.exs could overwrite its value.</p> <h2 id="can-a-dependency-function-be-called-from-a-config-file">Can a Dependency Function be called from a config file?</h2> <p>Not in any of the config files evaluated at build time. This is because those files are executed prior to loading dependencies. Your dependency code isn’t there.</p> <h2 id="can-a-dependency-function-be-called-from-runtimeexs">Can a Dependency Function be called from runtime.exs?</h2> <p>Yes. Keep in mind that the runtime.exs file is not available to whatever code you are calling. In general, it’s not a great idea and I’d avoid it.</p> <p>If you think you absolutely must then I’d keep José Valim’s PR notes when introducing runtime.exs in mind:</p> <blockquote> <p>Since “config/runtime.exs” is used by both Mix and releases, it cannot configure :kernel, :stdlib, :elixir, and :mix themselves. Attempting to configure those will emit an error. For those rare scenarios, you will need to use “config/releases.exs” - but “config/releases.exs” will remain simple, which will reduce the odds of syntax errors.</p> <p>Since “config/runtime.exs” is used by both Mix and releases, it cannot invoke “Mix” directly. Therefore, for conditional environment compilation, we will add a env/2 macro to Config that will be available for all config files.</p> </blockquote>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Review of How Config Files Are Used in a Phoenix Application]]></summary></entry><entry><title type="html">Staying up to date in Elixir</title><link href="https://fmcgeough.github.io/blog/2025/mix-phx-new/" rel="alternate" type="text/html" title="Staying up to date in Elixir"/><published>2025-03-02T16:04:00+00:00</published><updated>2025-03-02T16:04:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/mix-phx-new</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/mix-phx-new/"><![CDATA[<p>One thing I suggest to folks new to Elixir is to periodically get the latest version of <code class="language-plaintext highlighter-rouge">phx.new</code> and use it to generate a project. Examine the output to see what has changed.</p> <p>The reason this is somewhat important is to keep up with changes to the ecosystem. The majority of developers are wrapped up in day to day activities. They don’t have time to follow issues in github or discussions on mailing list or Elixir’s Discord channel.</p> <p>The steps below were done with Elixir 1.17.2 (compiled with Erlang/OTP 27).</p> <h2 id="current-phxnew">Current phx.new</h2> <p>You can install phx.new using mix:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mix archive.install hex phx_new
Resolving Hex dependencies...
Resolution completed in 0.007s
New:
  phx_new 1.7.20
* Getting phx_new (Hex package)
All dependencies are up to date
Compiling 11 files (.ex)
Generated phx_new app
Generated archive "phx_new-1.7.20.ez" with MIX_ENV=prod
</code></pre></div></div> <p>If there is a current version installed you’ll be asked if you wish to overwrite it.</p> <h2 id="generating-an-api-only-service">Generating an API only service</h2> <p>If you are writing a service to provide a JSON API then you can leave out support for HTML, JS, mailer and esbuild.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mix phx.new --no-html --no-live --no-tailwind --no-esbuild --no-mailer bureau
* creating bureau/lib/bureau/application.ex
* creating bureau/lib/bureau.ex
* creating bureau/lib/bureau_web/controllers/error_json.ex
* creating bureau/lib/bureau_web/endpoint.ex
* creating bureau/lib/bureau_web/router.ex
* creating bureau/lib/bureau_web/telemetry.ex
* creating bureau/lib/bureau_web.ex
* creating bureau/mix.exs
* creating bureau/README.md
* creating bureau/.formatter.exs
* creating bureau/.gitignore
* creating bureau/test/support/conn_case.ex
* creating bureau/test/test_helper.exs
* creating bureau/test/bureau_web/controllers/error_json_test.exs
* creating bureau/lib/bureau/repo.ex
* creating bureau/priv/repo/migrations/.formatter.exs
* creating bureau/priv/repo/seeds.exs
* creating bureau/test/support/data_case.ex
* creating bureau/lib/bureau_web/gettext.ex
* creating bureau/priv/gettext/en/LC_MESSAGES/errors.po
* creating bureau/priv/gettext/errors.pot
* creating bureau/priv/static/robots.txt
* creating bureau/priv/static/favicon.ico

Fetch and install dependencies? [Yn] Y
* running mix deps.get
* running mix deps.compile
</code></pre></div></div> <h2 id="dependencies-for-new-api-only-service">Dependencies for new API only service</h2> <p>If you open up the top-level mix.exs file you can see the dependencies that are setup on a brand new project:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp deps do
    [
      {:phoenix, "~&gt; 1.7.20"},
      {:phoenix_ecto, "~&gt; 4.5"},
      {:ecto_sql, "~&gt; 3.10"},
      {:postgrex, "&gt;= 0.0.0"},
      {:phoenix_live_dashboard, "~&gt; 0.8.3"},
      {:telemetry_metrics, "~&gt; 1.0"},
      {:telemetry_poller, "~&gt; 1.0"},
      {:gettext, "~&gt; 0.26"},
      {:jason, "~&gt; 1.2"},
      {:dns_cluster, "~&gt; 0.1.1"},
      {:bandit, "~&gt; 1.5"}
    ]
  end
</code></pre></div></div> <p>A couple of new things you might notice if you haven’t done this in a while:</p> <ul> <li>the generation automatically included two telemetry related libraries: telemetry_metrics and telemetry_poller.</li> <li>instead of using cowboy as the HTTP server Phoenix now uses Bandit.</li> <li>there’s a dependency on dns_cluster that is a fairly recent addition</li> </ul> <p>Ecto and the Postgres library (postgrex), jason and phoenix should be very familiar to you. The phoenix_live_dashboard has also been included in the generated code for quite a while.</p> <h2 id="aliases">aliases</h2> <p>The aliases function in the top level mix.exs file has been modified over time. It might look somewhat different than what you saw when you last generated it. But chances are it’s pretty familiar looking.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp aliases do
    [
      setup: ["deps.get", "ecto.setup"],
      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
      "ecto.reset": ["ecto.drop", "ecto.setup"],
      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
    ]
  end
</code></pre></div></div> <h2 id="checking-dependencies">Checking Dependencies</h2> <p>One of the first things I’d advise you to do it run <code class="language-plaintext highlighter-rouge">mix hex.outdated</code> on the project. This ensures that the template that was used to generate the Phoenix project used the latest versions of each of the libraries.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mix hex.outdated
Dependency              Current  Latest  Status
bandit                  1.6.7    1.6.7   Up-to-date
dns_cluster             0.1.3    0.1.3   Up-to-date
ecto_sql                3.12.1   3.12.1  Up-to-date
gettext                 0.26.2   0.26.2  Up-to-date
jason                   1.4.4    1.4.4   Up-to-date
phoenix                 1.7.20   1.7.20  Up-to-date
phoenix_ecto            4.6.3    4.6.3   Up-to-date
phoenix_live_dashboard  0.8.6    0.8.6   Up-to-date
postgrex                0.20.0   0.20.0  Up-to-date
telemetry_metrics       1.1.0    1.1.0   Up-to-date
telemetry_poller        1.1.0    1.1.0   Up-to-date
</code></pre></div></div> <p>So, as of today, this looks good. All the dependencies are “Up-to-date”.</p> <h2 id="examining-the-new-things">Examining the New Things</h2> <p>The “new” things I noted are:</p> <ul> <li>the generation automatically included two telemetry related libraries: telemetry_metrics and telemetry_poller.</li> <li>instead of using cowboy as the HTTP server Phoenix now uses Bandit.</li> <li>there’s a dependency on dns_cluster that is a fairly recent addition</li> </ul> <p>Let’s examine how those are being used and think about whether we need to modify any existing apps that we have to include the functionality that they bring.</p> <h2 id="telemetry_metrics-and-telemetry_poller">telemetry_metrics and telemetry_poller</h2> <p>These are libraries that you may already be using. Perhaps you are using something that wraps them instead.</p> <p>At the lowest level (that you’re apt to deal with as an Elixir developer) is the telemetry library. This library allows code that you write as part of an application and libraries that you use to generate events. It provides a common means of communicating measurement information.</p> <p>The telemetry_metrics library is written in Elixir. The telemetry_metrics library “provides a common interface for defining metrics based on :telemetry events. These metrics can then be published to different backends using our Reporters API”. This is the key thing for the library. It tries to normalize telemetry events by allowing the developer to describe what they are (counter? last_value?) and the expectations for a Reporter that will send those events on to an external system. Note that no external system is required. The library has a <code class="language-plaintext highlighter-rouge">Telemetry.Metrics.ConsoleReporter</code> that is a useful way of debugging the information provided (measurements and metadata) when events are generated.</p> <p>The telemetry_poller library is written in Erlang. It allows an app to “periodically collect measurements and dispatch them as Telemetry events”. The library itself starts a telemetry_poller to periodically gather VM statistics (memory used, processes, run queues, etc) and send them to the telemetry system. The app can define its own telemetry_poller with its own events of interest. The library documentation describes how this is done.</p> <p>The reason to have a telemetry poller is that there is no “triggering event” to generate the metric, A poller is needed to gather the metrics.</p> <p>If you look at the generated code in the web directory you’ll see there is a file called “telemetry.ex”.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule BureauWeb.Telemetry do
  use Supervisor
  import Telemetry.Metrics

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  @impl true
  def init(_arg) do
    children = [
      # Telemetry poller will execute the given period measurements
      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics
      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}
      # Add reporters as children of your supervision tree.
      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end

  def metrics do
    [
      # Phoenix Metrics
      summary("phoenix.endpoint.start.system_time",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.endpoint.stop.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.start.system_time",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.exception.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.stop.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.socket_connected.duration",
        unit: {:native, :millisecond}
      ),
      sum("phoenix.socket_drain.count"),
      summary("phoenix.channel_joined.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_handled_in.duration",
        tags: [:event],
        unit: {:native, :millisecond}
      ),

      # Database Metrics
      summary("bureau.repo.query.total_time",
        unit: {:native, :millisecond},
        description: "The sum of the other measurements"
      ),
      summary("bureau.repo.query.decode_time",
        unit: {:native, :millisecond},
        description: "The time spent decoding the data received from the database"
      ),
      summary("bureau.repo.query.query_time",
        unit: {:native, :millisecond},
        description: "The time spent executing the query"
      ),
      summary("bureau.repo.query.queue_time",
        unit: {:native, :millisecond},
        description: "The time spent waiting for a database connection"
      ),
      summary("bureau.repo.query.idle_time",
        unit: {:native, :millisecond},
        description:
          "The time the connection spent waiting before being checked out for the query"
      ),

      # VM Metrics
      summary("vm.memory.total", unit: {:byte, :kilobyte}),
      summary("vm.total_run_queue_lengths.total"),
      summary("vm.total_run_queue_lengths.cpu"),
      summary("vm.total_run_queue_lengths.io")
    ]
  end

  defp periodic_measurements do
    [
      # A module, function and arguments to be invoked periodically.
      # This function must call :telemetry.execute/3 and a metric must be added above.
      # {BureauWeb, :count_users, []}
    ]
  end
end
</code></pre></div></div> <p>BureauWeb.Telemetry is a Supervisor. It starts the GenServer <code class="language-plaintext highlighter-rouge">:telemetry_poller</code> that is in the telemetry_poller library. That GenServer gets passed whatever metrics are returned by the <code class="language-plaintext highlighter-rouge">periodic_measurements/0</code> function. By default this is an empty list. So no periodic measurements are reported. The process is started and does nothing.</p> <p>A second GenServer is commented out:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
</code></pre></div></div> <p>This used a module in the telemetry library to report the metrics returned by the <code class="language-plaintext highlighter-rouge">metrics/0</code> function to the console.</p> <p>See the post on <a href="https://fmcgeough.github.io/blog/2024/ecto-telemetry/">Elixir and Ecto’s Telemetry Events</a> for more information.</p> <h2 id="bandit">bandit</h2> <p>If you’ve programmed with Phoenix for a while then you are used to seeing the cowboy library in the list of dependencies. Bandit’s HTTP/1.x engine is up to 4x faster than Cowboy depending on the number of concurrent requests. When comparing HTTP/2 performance, Bandit is up to 1.5x faster than Cowboy. Work was done to make the bandit library a drop-in replacement for cowboy. For a period of time you had to specify you wanted to use bandit when generating a Phoenix app. At this point bandit is the default.</p> <p>Bandit is written in Elixir. It’s a good project to look at because the code is clean and can be understood by app developers. This was not the case with cowboy.</p> <h2 id="dns_cluster">dns_cluster</h2> <p>This was introduced to Elixir/Phoenix to allow Phoenix apps to setup DNS clustering out of the box. If you aren’t using this you can remove it from your project.</p> <p>For more information on this look up Chris McCord’s Elixir Conference 2023 talk.</p> <h2 id="see-the-telemetry-working">See the telemetry working</h2> <p>If you want to see telemetry info in your app you can uncomment out the line <code class="language-plaintext highlighter-rouge">{Telemetry.Metrics.ConsoleReporter, metrics: metrics()}</code> in telemetry.ex. Then when you run your app locally you’ll see something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Telemetry.Metrics.ConsoleReporter] Got new event!
Event name: vm.memory
All measurements: %{atom: 909553, atom_used: 885163, binary: 4214448, code: 15564055, ets: 1510568, processes: 21976920, processes_used: 21968208, system: 56001457, total: 77978377}
All metadata: %{}

Metric measurement: :total [via #Function&lt;5.16980591/1 in Telemetry.Metrics.maybe_convert_measurement/2&gt;] (summary)
With value: 77978.37700000001 kilobyte
Tag values: %{}

[Telemetry.Metrics.ConsoleReporter] Got new event!
Event name: vm.total_run_queue_lengths
All measurements: %{cpu: 1, io: 0, total: 1}
All metadata: %{}

Metric measurement: :total (summary)
With value: 1
Tag values: %{}

Metric measurement: :cpu (summary)
With value: 1
Tag values: %{}

Metric measurement: :io (summary)
With value: 0
Tag values: %{}
</code></pre></div></div> <h2 id="summary">Summary</h2> <p>Periodically get the latest phx.new and generate a new app to see changes that have occurred since you ran it (possibly many years prior). See what you might want to change in your app to align with the current way of creating a Phoenix app.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Latest Phoenix and mix phx.new]]></summary></entry><entry><title type="html">Library Resources</title><link href="https://fmcgeough.github.io/blog/2025/electronic-reading/" rel="alternate" type="text/html" title="Library Resources"/><published>2025-02-25T00:00:00+00:00</published><updated>2025-02-25T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/electronic-reading</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/electronic-reading/"><![CDATA[<h2 id="overview">Overview</h2> <p>Some helpful hints on using your local library. My local library is in Dekalb County, Georgia. Some of the rules on the apps referenced below are different in other areas.</p> <h2 id="get-a-library-card">Get a Library Card</h2> <p>If you do not have a library card then take 10 minutes out of your day and go into library and get one. It’s a straightforward process. They just want to know that you live in the area (county ordinarily) that the library serves.</p> <p>Library cards have an ID. That’s a string of 14-15 digits (ordinarily). And you’ll have a passcode tied to that ID.</p> <h2 id="download-libby">Download Libby</h2> <p>The <a href="https://libbyapp.com/interview/welcome#doYouHaveACard">Libby app</a> runs on iPhones, iPads, Android devices, etc. The app gets tied to your library card and then you can borrow eBooks, audio books and magazines. There is no limit on the number of items you can have checked out with the Libby app. The terms may be different depending on where you live. In our area you can check out a book for 3 weeks, put a book on hold, and renew a book (if no one else is waiting for it).</p> <p>You can read on a Kindle or Kindle app or within the Libby app itself. If you use the Kindle approach then you’ll use Amazon to return a book early. Otherwise it’s all done in the Libby app.</p> <p>Only a certain number of people can be reading or listening to a book at a time. So, just like with a physical book, you might have to wait a while to get the book you want.</p> <h2 id="download-kanopy">Download Kanopy</h2> <p>I installed <a href="https://www.kanopy.com/en">Kanopy</a> on our Samsung TV and on our Apple TV box. This allows you to watch movies and tv series available through the library. The catalog includes a lot of classic films, documentaries and award winning foreign films.</p> <p>Kanopy works off a credit system (in our area anyway). You get a certain number of credits per month and you can “check out” a movie or series until you run out of credits. Then you have to wait until the next month.</p> <p>Unlike Libby there is no limit on the number of people who can be watching a movie or tv series at the same time. The limit is on the total amount of content.</p> <h2 id="download-hoopla">Download Hoopla</h2> <p>The <a href="https://www.hoopladigital.com/">Hoopla App</a> is an alternative or addition to Libby / Kanopy. With Hoopla you are given credits like Kanopy. Once you’ve associated your Hoopla account with your library card you can enjoy audiobooks, eBooks, comics, movies, TV, magazines, or music from your computer, your phone, your car, even your TV.</p> <p>Unlike Libby there is no limit on the number of people who can be reading (or listening) to a book at the same time. The limit is on the total amount of content.</p> <h2 id="use-on-hold">Use On Hold</h2> <p>If you want to read a physical book then use your library’s online system to put books on hold. In the library system I use you can put up to 15 books on hold. You can schedule when you’d like to be put on hold for a book. Your library sends an email notification when a book is available.</p>]]></content><author><name></name></author><category term="reading"/><summary type="html"><![CDATA[Your Library and Its Resources]]></summary></entry><entry><title type="html">Recent Books</title><link href="https://fmcgeough.github.io/blog/2025/reading/" rel="alternate" type="text/html" title="Recent Books"/><published>2025-02-23T00:00:00+00:00</published><updated>2025-02-23T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/reading</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/reading/"><![CDATA[<h2 id="to-the-list">To the list</h2> <p>This is a list of books I’ve read so far in 2025.</p> <ul> <li>Small Favor (The Dresden Files, #10) by Jim Butcher</li> <li>Deep Storm (Jeremy Logan, #1) by Lincoln Child</li> <li>Karla’s Choice: A John le Carré Novel by Nick Harkaway</li> <li>Out of Sight (Jack Foley, #1) by Elmore Leonard</li> <li>Essentialism: The Disciplined Pursuit of Less by Greg McKeown</li> <li>City Primeval by Elmore Leonard</li> <li>The Contortionist’s Handbook by Craig Clevenger</li> <li>The Bright Sword by Lev Grossman</li> <li>When the Women Come Out to Dance by Elmore Leonard</li> <li>The Infernal Machine: A True Story of Dynamite, Terror and the Rise of the Modern Detective by Steven Johnson</li> <li>The Lost Tomb: And Other Real-Life Stories of Bones, Burials and Murder by Douglas Preston</li> <li>The Waiting (Renée Ballard, #6, Harry Bosch, #25) by Michael Connelly</li> <li>Jayber Crow by Wendell Berry</li> <li>The Future by Naomi Alderman</li> <li>This Strange Eventful History by Claire Messud</li> <li>In Too Deep (Jack Reacher #29) by Lee Child</li> <li>Faceless Killers (Kurt Wallander, #1) by Henning Mankell</li> <li>Amped by Daniel H Wilson</li> <li>The Black Echo (Harry Bosch #1)</li> <li>Toxic Prey (Lucas Davenport #34, Letty Davenport, #3) by John Sandford</li> </ul> <p>Out of that I made some notes on what I liked. A number of the books in the list I just read because I was up late and they were available from the library.</p> <h3 id="nick-harkaway">Nick Harkaway</h3> <ul> <li>Karla’s Choice: A John le Carré Novel by Nick Harkaway.</li> </ul> <p>Nick Harkaway is the pen name of Nicholas Cornwall. He is the son of the novelist David Cornwall who wrote his spy novels under the name John le Carré. le Carre’s most famous character is George Smiley. This novel by Harkaway is the first continuation of Smiley after le Carre’s death.</p> <p>It’s well done. I thought the tone and pacing matched how his father had written the spy novels.</p> <h3 id="elmore-leonard">Elmore Leonard</h3> <ul> <li>Out of Sight (Jack Foley, #1) by Elmore Leonard</li> <li>City Primeval by Elmore Leonard</li> <li>When the Women Come Out to Dance by Elmore Leonard</li> </ul> <p>I enjoy Elmore Leonard’s writing.</p> <h3 id="the-contortionists-handbook">The Contortionist’s Handbook</h3> <ul> <li>The Contortionist’s Handbook by Craig Clevenger</li> </ul> <p>This book was one of the more interesting I’ve read in a while. It’s reminiscent of Fight Club by Chuck Palahniuk. It’s got a narrator whose continued weaving of self-created lives with different names and different backgrounds left him not quite sure what was left of him.</p> <h3 id="the-infernal-machine">The Infernal Machine</h3> <ul> <li>The Infernal Machine: A True Story of Dynamite, Terror and the Rise of the Modern Detective by Steven Johnson</li> </ul> <p>Interesting American history. The rise of anarchist movement at the same time as the mass availability of dynamite led to thousands of bombings (or attempted bombings). This period of time was quite cruel for workers. Many more people died in factories than were ever killed by the anarchist’s bombs. But the threat of dynamite led the US to develop its first science based approach to crime (as opposed to simply beating the crap out of a suspect until they confessed).</p> <h3 id="jayber-crow">Jayber Crow</h3> <ul> <li>Jayber Crow by Wendell Berry</li> </ul> <p>The search for meaning in rural Kentucky through the 1900s.</p> <h3 id="the-future">The Future</h3> <ul> <li>The Future by Naomi Alderman</li> </ul> <p>Novel that follows her speculative science fiction novel The Power. Billionaires lead the world to destruction.</p> <h3 id="faceless-killers">Faceless Killers</h3> <ul> <li>Faceless Killers (Kurt Wallander, #1) by Henning Mankell</li> </ul> <p>Wallander is a British television series broadcast from 2008 to 2016. I really enjoyed the series. It was amazing. So I decided to read the books.</p>]]></content><author><name></name></author><category term="reading"/><summary type="html"><![CDATA[List of books I've read so far in 2025]]></summary></entry><entry><title type="html">Good Elixir Documentation - Ecto Library</title><link href="https://fmcgeough.github.io/blog/2024/good-elixir-doc-ecto/" rel="alternate" type="text/html" title="Good Elixir Documentation - Ecto Library"/><published>2024-10-18T09:00:00+00:00</published><updated>2024-10-18T09:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/good-elixir-doc-ecto</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/good-elixir-doc-ecto/"><![CDATA[<p>This is a continuation of my blog post on <a href="https://fmcgeough.github.io/blog/2024/using-elixir-doc/">Elixir and Documentation</a>. I wanted to go over some of the projects that I think have very good documentation. When you are writing your own doc it’s helpful to have good examples to work from. The one that I’m writing about first is Ecto. <em>Note: the Elixir language documentation is also a great resource</em>.</p> <p>The <a href="https://hexdocs.pm/ecto/Ecto.html">ecto library</a> is the relational database library used in Elixir. The doc it generates has some interesting features. There are 3 tabs in the Navigation:</p> <ul> <li>Guides</li> <li>Modules</li> <li>Mix Tasks</li> </ul> <h2 id="guides">Guides</h2> <p>The guides section contains an Introduction section that explains the basics of how to use Ecto and how to do unit testing with Ecto. It has Cheatsheets for basic Ecto related operations and for how to handle table associations. A final section of How-To’s covers a range of topics in more detail.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-guides.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Guides </div> <h2 id="modules">Modules</h2> <p>The modules section has the documentation for modules and their functions. It also covers Types and Exceptions. The modules are actually broken into logical areas of functionality:</p> <ul> <li>Query APIS</li> <li>Adapter Specification</li> <li>Relation Structs</li> <li>Exceptions</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-modules.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Modules </div> <h2 id="mix-tasks">Mix Tasks</h2> <p>There are important mix tasks associated with Ecto that allow a developer to create, migrate or drop a database. There is also a task to generate code related to an Ecto Repo module.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-mix-tasks.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Mix Tasks </div> <h2 id="ecto-mixexs">Ecto mix.exs</h2> <p>The Ecto mix.exs file has a lot of lines related to documentation. Since it’s a lot of lines I’ll break it into sections.</p> <h2 id="the-project-function">the project function</h2> <p>The ex_doc library reads the project data <code class="language-plaintext highlighter-rouge">:name</code> and <code class="language-plaintext highlighter-rouge">:docs</code> values. Using a function to define the data for <code class="language-plaintext highlighter-rouge">:docs</code> is how projects generally define documentation data in mix.exs. It’s overwhelming if all the <code class="language-plaintext highlighter-rouge">:docs</code> lines are part of the project function.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  def project do
    [
      app: :ecto,
      version: @version,
      elixir: "~&gt; 1.11",
      deps: deps(),
      consolidate_protocols: Mix.env() != :test,
      elixirc_paths: elixirc_paths(Mix.env()),

      # Hex
      description: "A toolkit for data mapping and language integrated query for Elixir",
      package: package(),

      # Docs
      name: "Ecto",
      docs: docs()
    ]
  end
</code></pre></div></div> <h2 id="docs-elements">docs elements</h2> <p>The elements that can be used in <code class="language-plaintext highlighter-rouge">:docs</code> are documented in the <a href="https://hexdocs.pm/ex_doc/Mix.Tasks.Docs.html">ex_doc Mix Tasks</a>. An abbreviated version is shown below:</p> <ul> <li>:annotations_for_docs - a function that receives metadata and returns a list of annotations to be added to the signature.</li> <li>:api_reference - Whether to generate api-reference.html; default: true. If this is set to false, :main must also be set.</li> <li>:assets - A map of source =&gt; target directories that will be copied as is to the output path. It defaults to an empty map.</li> <li>:authors - List of authors for the generated docs or epub.</li> <li>:before_closing_body_tag - a function that takes as argument an atom specifying the formatter being used (:html or :epub) and returns a literal HTML string to be included just before the closing body tag (&lt;/body&gt;).</li> <li>:before_closing_head_tag - a function that takes as argument an atom specifying the formatter being used (:html or :epub) and returns a literal HTML string to be included just before the closing head tag (&lt;/head&gt;). The atom given as argument can be used to include different content in both formats. Useful to inject custom assets, such as CSS stylesheets.</li> <li>:before_closing_footer_tag - a function that takes as argument an atom specifying the formatter being used (:html) and returns a literal HTML string to be included just before the closing footer tag (&lt;/footer&gt;).</li> <li>:canonical - String that defines the preferred URL with the rel=”canonical” element; defaults to no canonical path.</li> <li>:cover - Path to the epub cover image (only PNG or JPEG accepted) The image size should be around 1600x2400.</li> <li>:deps - A keyword list application names and their documentation URL. ExDoc will by default include all dependencies and assume they are hosted on HexDocs. This can be overridden by your own values. Example: <code class="language-plaintext highlighter-rouge">[plug: "https://myserver/plug/"]</code></li> <li>:extra_section - String that defines the section title of the additional Markdown and plain text pages; default: “PAGES”. Example: “GUIDES”</li> <li>:extras - List of paths to additional Markdown (.md extension), Live Markdown (.livemd extension), Cheatsheets (.cheatmd extension) and plain text pages to add to the documentation.</li> <li>:filter_modules - Include only modules that match the given value. The value can be a regex, a string (representing a regex), or a two-arity function that receives the module and its metadata and returns true if the module must be included. If a string or a regex is given, it will be matched against the complete module name (which includes the “Elixir.” prefix for Elixir modules). If a module has @moduledoc false, then it is always excluded.</li> <li>:formatters - Formatter to use; default: [“html”, “epub”], options: “html”, “epub”.</li> <li>:groups_for_extras, :groups_for_modules, :groups_for_docs - See the “Groups” section</li> <li>:ignore_apps - Apps to be ignored when generating documentation in an umbrella project. Receives a list of atoms. Example: [:first_app, :second_app].</li> <li>:language - Identify the primary language of the documents, its value must be a valid BCP 47 language tag; default: “en”</li> <li>:logo - Path to a logo image file for the project. Must be PNG, JPEG or SVG.</li> <li>:main - Main page of the documentation. It may be a module or a generated page, like “Plug” or “api-reference”; default: “api-reference”.</li> <li>:markdown_processor - The markdown processor to use, either module() or {module(), keyword()} to provide configuration options;</li> <li>:meta - A keyword list or a map to specify meta tag attributes</li> <li>:nest_modules_by_prefix - See the “Nesting” section</li> <li>:output - Output directory for the generated docs; default: “doc”. May be overridden by command line argument.</li> <li>:skip_undefined_reference_warnings_on - ExDoc warns when it can’t create a Mod.fun/arity reference in the current project docs e.g. because of a typo. This list controls where to skip the warnings, for a given module/function/callback/type (e.g.: [“Foo”, “Bar.baz/0”]) or on a given file (e.g.: [“pages/deprecations.md”]).</li> <li>:skip_code_autolink_to - Similar to :skip_undefined_reference_warnings_on, this option controls which terms will be skipped by ExDoc when building documentation.</li> <li>:source_beam - Path to the beam directory; default: mix’s compile path.</li> <li>:source_ref - The branch/commit/tag used for source link inference; default: “main”.</li> <li>:source_url_pattern - Public URL of the project for source links.</li> </ul> <h2 id="the-docs-function">the docs function</h2> <p>Ecto defines an extensive <code class="language-plaintext highlighter-rouge">:docs</code> element. It uses almost every available option in ex_doc. One thing it does not override is <code class="language-plaintext highlighter-rouge">:output</code> (by default this is the <code class="language-plaintext highlighter-rouge">./doc</code> directory). Notice that the version and source_url are set using module attributes (<code class="language-plaintext highlighter-rouge">@version</code> and <code class="language-plaintext highlighter-rouge">@source_url</code>). This is a good practice (especially for a library) since those values are useful elsewhere in mix.exs. The <code class="language-plaintext highlighter-rouge">@version</code> attribute is used in the project and the <code class="language-plaintext highlighter-rouge">@source_url</code> is used in the package function.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp docs do
    [
      main: "Ecto",
      source_ref: "v#{@version}",
      logo: "guides/images/e.png",
      extra_section: "GUIDES",
      source_url: @source_url,
      skip_undefined_reference_warnings_on: ["CHANGELOG.md"],
      extras: extras(),
      groups_for_extras: groups_for_extras(),
      groups_for_docs: [
        group_for_function("Query API"),
        group_for_function("Schema API"),
        group_for_function("Transaction API"),
        group_for_function("Process API"),
        group_for_function("Config API"),
        group_for_function("User callbacks")
      ],
      groups_for_modules: [
        Types: [
          Ecto.Enum,
          Ecto.ParameterizedType,
          Ecto.Type,
          Ecto.UUID
        ],
        "Query APIs": [
          Ecto.Query.API,
          Ecto.Query.WindowAPI,
          Ecto.Queryable,
          Ecto.SubQuery
        ],
        "Adapter specification": [
          Ecto.Adapter,
          Ecto.Adapter.Queryable,
          Ecto.Adapter.Schema,
          Ecto.Adapter.Storage,
          Ecto.Adapter.Transaction
        ],
        "Relation structs": [
          Ecto.Association.BelongsTo,
          Ecto.Association.Has,
          Ecto.Association.HasThrough,
          Ecto.Association.ManyToMany,
          Ecto.Association.NotLoaded,
          Ecto.Embedded
        ]
      ],
      before_closing_body_tag: fn
        :html -&gt;
          """
          &lt;script src="https://cdn.jsdelivr.net/npm/mermaid@10.2.3/dist/mermaid.min.js"&gt;&lt;/script&gt;
          &lt;script&gt;
            document.addEventListener("DOMContentLoaded", function () {
              mermaid.initialize({
                startOnLoad: false,
                theme: document.body.className.includes("dark") ? "dark" : "default"
              });
              let id = 0;
              for (const codeEl of document.querySelectorAll("pre code.mermaid")) {
                const preEl = codeEl.parentElement;
                const graphDefinition = codeEl.textContent;
                const graphEl = document.createElement("div");
                const graphId = "mermaid-graph-" + id++;
                mermaid.render(graphId, graphDefinition).then(({svg, bindFunctions}) =&gt; {
                  graphEl.innerHTML = svg;
                  bindFunctions?.(graphEl);
                  preEl.insertAdjacentElement("afterend", graphEl);
                  preEl.remove();
                });
              }
            });
          &lt;/script&gt;
          """

        _ -&gt;
          ""
      end
    ]
  end
</code></pre></div></div> <h2 id="skip_undefined_reference_warnings_on">skip_undefined_reference_warnings_on</h2> <p>The defined value for <code class="language-plaintext highlighter-rouge">:skip_undefined_reference_warnings_on</code> is set to <code class="language-plaintext highlighter-rouge">["CHANGELOG.md"]</code>. This makes sense. There may be situations where a module or type is removed from the code base. This will be noted in the CHANGELOG but if it is and we don’t set that file in the <code class="language-plaintext highlighter-rouge">:skip_undefined_reference_warnings_on</code> list then warnings are generated.</p> <h2 id="using-extras-function">using extras function</h2> <p>The ex_doc library describes how to use both <code class="language-plaintext highlighter-rouge">:extras</code> and <code class="language-plaintext highlighter-rouge">groups_for_extras</code>. These value are used to by Ecto to provide useful information under the “GUIDES” tab. Ecto uses this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  extras: extras(),
  groups_for_extras: groups_for_extras(),
</code></pre></div></div> <p>This defines both of those values for the two keys with whatever is returned by those functions.</p> <h2 id="the-extras">the extras</h2> <p>Any files that you want to include in your doc that are not in modules must be listed under <code class="language-plaintext highlighter-rouge">:extras</code>. For Ecto this is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  def extras() do
    [
      "guides/introduction/Getting Started.md",
      "guides/introduction/Embedded Schemas.md",
      "guides/introduction/Testing with Ecto.md",
      "guides/howtos/Aggregates and subqueries.md",
      "guides/howtos/Composable transactions with Multi.md",
      "guides/howtos/Constraints and Upserts.md",
      "guides/howtos/Data mapping and validation.md",
      "guides/howtos/Dynamic queries.md",
      "guides/howtos/Multi tenancy with query prefixes.md",
      "guides/howtos/Multi tenancy with foreign keys.md",
      "guides/howtos/Self-referencing many to many.md",
      "guides/howtos/Polymorphic associations with many to many.md",
      "guides/howtos/Replicas and dynamic repositories.md",
      "guides/howtos/Schemaless queries.md",
      "guides/howtos/Test factories.md",
      "guides/cheatsheets/crud.cheatmd",
      "guides/cheatsheets/associations.cheatmd",
      "CHANGELOG.md"
    ]
  end
</code></pre></div></div> <p>Notice how all the “extra” doc is under the “guides” directory. The sections are separate directories under “guides”. That is, “introduction”, “howtos” and “cheatsheets”. The CHANGELOG.md is also listed here since Ecto wants that included in the generated documentation.</p> <h2 id="ecto-mixexs---groups_for_extras">Ecto mix.exs - groups_for_extras</h2> <p>In the generated Ecto doc under “GUIDES” there are sections:</p> <ul> <li>“INTRODUCTION”</li> <li>“CHEATSHEETS”</li> <li>“HOW-TO’S”</li> </ul> <p>These are generated using <code class="language-plaintext highlighter-rouge">:groups_for_extras</code>. Ecto defines the value for this in the mix.exs as:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp groups_for_extras do
    [
      Introduction: ~r/guides\/introduction\/.?/,
      Cheatsheets: ~r/cheatsheets\/.?/,
      "How-To's": ~r/guides\/howtos\/.?/
    ]
  end
</code></pre></div></div> <p>Here, Ecto is using a regex to match the files in the guides subdirectories. The key in the returned Keyword list becomes the section title.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-guides.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Guides </div> <h2 id="using-groups">using Groups</h2> <p>The ex_doc library describes <a href="https://hexdocs.pm/ex_doc/Mix.Tasks.Docs.html#module-groups">how to use the various Groups functions</a> in it’s documentation.</p> <h2 id="groups_for_docs">groups_for_docs</h2> <p>There is a defined value for <code class="language-plaintext highlighter-rouge">:groups_for_docs</code> that sets of six groups.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  group_for_function("Query API"),
  group_for_function("Schema API"),
  group_for_function("Transaction API"),
  group_for_function("Process API"),
  group_for_function("Config API"),
  group_for_function("User callbacks")
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">group_for_function/1</code> function is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defp group_for_function(group), do: {String.to_atom(group), &amp;(&amp;1[:group] == group)}
</code></pre></div></div> <p>This may look a bit odd if you haven’t used it before. What it’s doing is allowing any documented function to declare a doc group. If that is found then the function becomes part of that named group. In the case of Ecto the <code class="language-plaintext highlighter-rouge">:groups_for_docs</code> value is being used to help organize the functions under <code class="language-plaintext highlighter-rouge">Ecto.Repo</code> (which has a particularly wide API). For example, the <code class="language-plaintext highlighter-rouge">get/2</code> callback in Repo:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  @doc group: "Query API"
  @callback get(
    queryable :: Ecto.Queryable.t(),
    id :: term, opts :: Keyword.t()
  ) :: Ecto.Schema.t() | term | nil
</code></pre></div></div> <p>If you look at the <code class="language-plaintext highlighter-rouge">Ecto.Repo</code> doc navigation you’ll see:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-18-ecto-repo-groups.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto.Repo Function Grouping </div> <h2 id="groups_for_modules">groups_for_modules</h2> <p>There is a defined value for <code class="language-plaintext highlighter-rouge">:groups_for_modules</code>. This value allows you to logically group the modules in your project doc. This shows up in the “Modules” tab of the generated doc. For Ecto the groups are:</p> <ul> <li>Types</li> <li>Query APIs</li> <li>Adapter specification</li> <li>Relation structs</li> </ul> <p>You can use a regex when specifying what modules belong to a group. However, for the Ecto doc the modules are provided as a list. If you can use a regex here you should. A regex is effective if your modules are stored in subdirectories that match your group naming.</p> <p>If a module does not match any file in <code class="language-plaintext highlighter-rouge">:groups_for_modules</code> (and that module does not have a <code class="language-plaintext highlighter-rouge">@moduledoc false</code>) then the module shows up at the top of the “Modules”. For Ecto this is <code class="language-plaintext highlighter-rouge">Ecto</code>, <code class="language-plaintext highlighter-rouge">Ecto.Changeset</code>, <code class="language-plaintext highlighter-rouge">Ecto.Multi</code>, <code class="language-plaintext highlighter-rouge">Ecto.Query</code>, <code class="language-plaintext highlighter-rouge">Ecto.Repo</code>, <code class="language-plaintext highlighter-rouge">Ecto.Schema</code>, <code class="language-plaintext highlighter-rouge">Ecto.Schema.Metadata</code> and <code class="language-plaintext highlighter-rouge">Mix.Ecto</code> (as of version 3.12.4).</p> <h2 id="before_closing_body_tag">before_closing_body_tag</h2> <p>There is a defined value for <code class="language-plaintext highlighter-rouge">:before_closing_body_tag</code>. This defines Javascript used to allow <a href="https://mermaid.js.org/">mermaid.js</a> to work in the generated documentation. A mermaid generated diagram is available for the type <a href="https://hexdocs.pm/ecto/Ecto.Type.html">Ecto.Type</a>.</p> <p>This code could be copied into your own project if you wish to use mermaid generated diagrams in your doc.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      before_closing_body_tag: fn
        :html -&gt;
          """
          &lt;script src="https://cdn.jsdelivr.net/npm/mermaid@10.2.3/dist/mermaid.min.js"&gt;&lt;/script&gt;
          &lt;script&gt;
            document.addEventListener("DOMContentLoaded", function () {
              mermaid.initialize({
                startOnLoad: false,
                theme: document.body.className.includes("dark") ? "dark" : "default"
              });
              let id = 0;
              for (const codeEl of document.querySelectorAll("pre code.mermaid")) {
                const preEl = codeEl.parentElement;
                const graphDefinition = codeEl.textContent;
                const graphEl = document.createElement("div");
                const graphId = "mermaid-graph-" + id++;
                mermaid.render(graphId, graphDefinition).then(({svg, bindFunctions}) =&gt; {
                  graphEl.innerHTML = svg;
                  bindFunctions?.(graphEl);
                  preEl.insertAdjacentElement("afterend", graphEl);
                  preEl.remove();
                });
              }
            });
          &lt;/script&gt;
          """

        _ -&gt;
          ""
      end
</code></pre></div></div> <h2 id="why-does-changelogmd-become-changelog-for-v3x">Why does CHANGELOG.md become Changelog for v3.x?</h2> <p>There is nothing in mix.exs indicating that ex_doc should change the name of CHANGELOG.md to the name that actually shows in the generated doc “Changelog for v3.x” so how is this accomplished? If you open CHANGELOG.md you can see where this is coming from.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Changelog for v3.x

## v3.12.4 (2024-10-07)

### Enhancements

  * [Ecto.Repo] Use `persistent_term` for faster repository lookup
  * [Ecto.Repo] Document new `:pool_count` option
etc, etc
</code></pre></div></div> <p>The top-level heading is being used by ex_doc as the name that shows up in the navigation.</p> <h2 id="what-about-mix-tasks">what about “Mix Tasks”?</h2> <p>There is a separate tab in navigation called “MIX TASKS”. Where did that come from? It’s not mentioned explicitly in the mix.exs file.</p> <p>The Ecto mix tasks are under <code class="language-plaintext highlighter-rouge">lib/mix/tasks</code>. The ex_doc library recognizes modules used for a Mix.Task as a “special” thing and puts the doc that is in the module into the tab. The code looks for any module that starts with <code class="language-plaintext highlighter-rouge">Elixir.Mix.Tasks.</code>. This is done with this code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp module_type_and_skip(module) do
    cond do
      function_exported?(module, :__struct__, 0) and
          match?(%{__exception__: true}, module.__struct__()) -&gt;
        {:exception, false}

      function_exported?(module, :__protocol__, 1) -&gt;
        {:protocol, false}

      function_exported?(module, :__impl__, 1) -&gt;
        {:impl, true}

      match?("Elixir.Mix.Tasks." &lt;&gt; _, Atom.to_string(module)) -&gt;
        {:task, false}

      function_exported?(module, :behaviour_info, 1) -&gt;
        {:behaviour, false}

      true -&gt;
        {:module, false}
    end
  end
</code></pre></div></div> <h2 id="wrap-up">Wrap Up</h2> <p>You can examine the <a href="https://github.com/elixir-ecto/ecto/blob/master/mix.exs">ex_doc mix.exs file</a>.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[How the Ecto Library Uses ex_doc to generate doc]]></summary></entry></feed>