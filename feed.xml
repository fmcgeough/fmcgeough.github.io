<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-28T18:36:23+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Elixir and Dependencies</title><link href="https://fmcgeough.github.io/blog/2024/updating-elixir-dependencies/" rel="alternate" type="text/html" title="Elixir and Dependencies"/><published>2024-02-21T08:53:13+00:00</published><updated>2024-02-21T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2024/updating-elixir-dependencies</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/updating-elixir-dependencies/"><![CDATA[<p>One of the ongoing tasks for a development team is to keep the dependencies of apps up to date. The following information are aspects of that work for Elixir language projects. It doesn’t attempt to explain the language itself and assumes you are at least minimally familiar with it. If you are coming to the language for the first time then the <a href="https://elixir-lang.org/">Elixir website</a> has excellent material to learn the basics of the language.</p> <h2 id="elixir-versioning">Elixir Versioning</h2> <p>Each Elixir library or application has a <code class="language-plaintext highlighter-rouge">mix.exs</code> file. This file is used to configure the project. A sample of this is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Demo.MixProject do
  use Mix.Project

  def project do
    [
      app: :demo,
      version: "0.1.0",
      elixir: "~&gt; 1.11",
      start_permanent: Mix.env() == :prod,
      deps: deps()
    ]
  end

  # Run "mix help compile.app" to learn about applications
  def application do
    [
      extra_applications: [:logger]
    ]
  end

  defp deps do
    [
    ]
  end
end
</code></pre></div></div> <p>As you can see, a <code class="language-plaintext highlighter-rouge">mix.exs</code> file is Elixir code. It defines a module and has the line <code class="language-plaintext highlighter-rouge">use Mix.Project</code> and some functions. <code class="language-plaintext highlighter-rouge">Mix.Project</code> expects that there is a <code class="language-plaintext highlighter-rouge">project/0</code> function that returns a keyword list representing configuration for the project.</p> <p>One of the keys in the sample above is <code class="language-plaintext highlighter-rouge">:version</code>. This defines the version for the project. If you generate a new library <code class="language-plaintext highlighter-rouge">mix new my_library</code> the version is set to <code class="language-plaintext highlighter-rouge">version: "0.1.0"</code>. The version key/value must be present. If you try and remove the version then mix won’t be able to compile the code. You’ll see this error: <code class="language-plaintext highlighter-rouge">** (Mix) Please ensure mix.exs file has the :version in the project definition</code>.</p> <p>Elixir requires versions to be in the format <code class="language-plaintext highlighter-rouge">MAJOR.MINOR.PATCH</code>. Each of these elements is a number. The meaning of these elements are up to the library developer. However, most libraries use <a href="https://semver.org/">Semantic Versioning</a>.</p> <h2 id="libraries-applications">Libraries? Applications?</h2> <p>For Elixir / Erlang libraries and applications can be thought of as the same thing. It’s a named bundle of some functionality with a version. It’s definitely helpful to think about them as the same thing when dealing with versioning and dependencies.</p> <h2 id="semantic-versioning">Semantic Versioning</h2> <p>The <a href="https://semver.org/">Semantic Versioning website</a> has the definitive explanation of semantic versioning. You should visit that site for a full explanation.</p> <p>Important rules for semantic versioning are:</p> <p>Given a version number MAJOR.MINOR.PATCH, increment the:</p> <ul> <li>MAJOR version when you make incompatible API changes</li> <li>MINOR version when you add functionality in a backward compatible manner</li> <li>PATCH version when you make backward compatible bug fixes</li> </ul> <p>One additional rule that is important to keep in mind is: “Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable”.</p> <h2 id="hexpm">hex.pm</h2> <p>Hex is a package manager for the BEAM ecosystem; any language that compiles to run on the BEAM VM, such as Elixir and Erlang, can be used to build Hex packages.</p> <p>Hex is an open-source <a href="https://github.com/hexpm/hex">project</a> initiated in early 2014, and continues to evolve under the stewardship of Six Colors AB which was founded in 2018 by Hex’s creator, Eric Meadows-Jönsson. The project provides tasks that integrate with the Elixir mix tool.</p> <p>Hex provides a <a href="https://hex.pm/">website</a> that allows retrieval of libraries and their associated documentation by version number. It allows organizations to setup private package publishing. This means that libraries developed by your organization could be published to hex.pm and only be available for developers that are in your organization.</p> <p>Since Hex is open-source Cloudsmith created their own private hex repository in February 2014. See the <a href="https://cloudsmith.com/blog/worlds-first-private-hex-repository-with-cloudsmith">Cloudsmith blog post</a> for more information on this.</p> <h2 id="specifying-library-dependencies-in-mixexs">Specifying Library Dependencies in mix.exs</h2> <p>You can examine hex.pm to find the current version of a library. One of the keys returned by the <code class="language-plaintext highlighter-rouge">project/0</code> function your mix.exs file is <code class="language-plaintext highlighter-rouge">:deps</code>. This returns a list of dependencies and is generally seen like above: <code class="language-plaintext highlighter-rouge">deps: deps()</code>. That is, the function <code class="language-plaintext highlighter-rouge">deps/0</code> returns the list of dependencies. Setting up the dependency is adding a line to the list in that function. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp deps do
    [
      {:telemetry, "~&gt; 1.2"}
    ]
</code></pre></div></div> <h2 id="organization-libraries-stored-elsewhere">Organization Libraries Stored “Elsewhere”</h2> <p>Some organizations use github or gitlab to store their organization’s Elixir libraries. Generally those organizations would tag the library code and build releases for their developers.</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Keeping Your Elixir Dependencies Up To Date]]></summary></entry><entry><title type="html">Debugging Elixir in Production</title><link href="https://fmcgeough.github.io/blog/2024/debug-in-production/" rel="alternate" type="text/html" title="Debugging Elixir in Production"/><published>2024-02-19T08:53:13+00:00</published><updated>2024-02-19T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2024/debug-in-production</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/debug-in-production/"><![CDATA[<p>Assuming you are making good use of Logging and generating metrics you may still encounter problems in an Elixir allocation that requires more than that in order to understand what is going on and address the problem.</p> <h2 id="observer_cli">observer_cli</h2> <p>You absolutely should include the <a href="https://hex.pm/packages/observer_cli">observer_cli library</a> as a dependency in your project. It’s a wonderful tool and it brings in some other tooling that I’ve found helpful.</p> <p>What is observer_cli?</p> <ul> <li>Based on recon (by the ubiquitous Fred Hebert)</li> <li>It makes it (relatively) easy to view high memory consumption and find the process responsible</li> <li>Good for general identification of issues but may not lead you to the actual underlying cause</li> <li>Checkout https://hexdocs.pm/observer_cli/ for lots of (sort of awkwardly written) documentation about how to use this</li> </ul> <p>The library provides a bare-bones interface that is full of information. To start it open up a remote console:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; :observer_cli.start
</code></pre></div></div> <p>The start function line shows that the code for observer_cli is written in Erlang.</p> <p>Some of what’s available in the text UI:</p> <ul> <li>Process Information <ul> <li>Number Reductions Run</li> <li>Current Function Executing</li> <li>Size of the Message Queue</li> </ul> </li> <li>Memory Information <ul> <li>Total Allocated</li> <li>Memory for ETS</li> <li>Memory for Atoms used in your application</li> <li>Memory used by your application’s processes</li> </ul> </li> <li>Network <ul> <li>Ports in / out</li> <li>Number bytes transferred</li> <li>Memory Used</li> </ul> </li> </ul> <p>There’s a lot there! If you are in the midst of an incident or problem then you might want:</p> <ul> <li>sort by Reductions if you having an issue where the CPU usage is high. Reductions is kind of an archaic term but you can think of it as analogous to CPU usage.</li> <li>examine memory growth. <ul> <li>Are the number of atoms used by your application constantly increasing? This will ultimately cause a crash. You should search your code for cases where you are dynamically allocating atoms (especially as a result of input that you do not have control over).</li> <li>Is ETS usage growing in an unexpected way?</li> <li>Is the amount of memory used by your processes continually increasing? There may be a garbage collection issue that you must address.</li> </ul> </li> </ul> <h2 id="rolling-your-own---finding-high-cpu-processes">Rolling your own - Finding high CPU processes</h2> <p>The observer_cli UI provides the ability to find high CPU processes but you can do so yourself.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Process.list() |&gt; Enum.map(fn pid -&gt;
  info = :erlang.process_info(pid)
  %{
    reductions: info[:reductions],
    name: info[:registered_name],
    current_function: info[:current_function]
  }
end) |&gt; Enum.sort(&amp;(&amp;1[:reductions] &gt;= &amp;2[:reductions])) |&gt; Enum.take(5)
</code></pre></div></div> <p>This finds the 5 processes that have had the most reductions (but it’s over life of the VM).</p> <h2 id="rolling-your-own---get_state">Rolling your Own - get_state</h2> <p>The function <code class="language-plaintext highlighter-rouge">:sys.get_state/1</code> can be used to output a process’ state.</p> <p>You can use this to (safely) get the state that’s associated with a running GenServer. The execution time is slower than if the GenServer itself provided a handle_call to return its state (i.e. don’t put get_state calls in your regular code ordinarily) but sometimes that’s not available (or its a library’s GenServer that you have no control over). If you need to examine a GenServer’s internal state then this is what you use.</p> <p>Note: if a process is really messed up calling <code class="language-plaintext highlighter-rouge">:sys.get_state/1</code> can timeout.</p> <h2 id="rolling-your-own---erlang-memory">Rolling your own - Erlang memory</h2> <p>The function <code class="language-plaintext highlighter-rouge">:erlang.memory/0</code> gives a quick overview of the current state of memory in your application.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; :erlang.memory
[
  total: 36168216,
  processes: 15933632,
  processes_used: 15932480,
  system: 20234584,
  atom: 442553,
  atom_used: 424872,
  binary: 896224,
  code: 8184066,
  ets: 592096
]
</code></pre></div></div> <p>This same information is available in observer_cli. The key/values returned are:</p> <ul> <li>total - The total amount of memory currently allocated. This is the same as the sum of the memory size for processes and system.</li> <li>processes - The total amount of memory currently allocated for the Erlang processes.</li> <li>processes_used - The total amount of memory currently used by the Erlang processes. This is part of the memory presented as processes memory.</li> <li>system - The total amount of memory currently allocated for the VM that is not directly related to any Erlang process.</li> <li>atom - The total amount of memory currently allocated for atoms. Makes up part of system value.</li> <li>atom_used - The total amount of memory currently used for atoms.</li> <li>binary - The total amount of memory currently allocated for binaries. Makes up part of system value.</li> <li>code - The total amount of memory currently allocated for Erlang/Elixir code. Makes up part of system value.</li> <li>ets - The total amount of memory currently allocated for ETS tables. Makes up part of system value.</li> </ul> <p>You can define a simple function to examine memory over a period of time. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; analyze_mem = fn(wait_ms) -&gt;
  memory1 = :erlang.memory();
  Process.sleep(wait_ms);
  memory2 = :erlang.memory();
  Enum.map(memory1, fn {key, value1} -&gt; value2 = Keyword.get(memory2, key); {key, value1 - value2} end) |&gt; Map.new() |&gt; Map.put(:wait_ms, "Memory changes after #{wait_ms} milliseconds")
end
</code></pre></div></div> <p>You can use this function to show a memory change over a period of time of interest. For example the call belows shows the memory change after 250 millseconds:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; analyze_mem.(250)
 analyze_mem.(250)
%{
  atom: 0,
  atom_used: 0,
  binary: 296,
  code: 0,
  ets: 0,
  processes: -258080,
  processes_used: -258080,
  system: 296,
  total: -257784,
  wait_ms: "Memory changes after 250 milliseconds"
}
</code></pre></div></div> <h2 id="tracing-function-calls">Tracing Function Calls</h2> <p>There are a few approaches built in to debug function calls in production. The best one I’ve found is <code class="language-plaintext highlighter-rouge">recon</code>. As noted above, the observer_cli library is built on recon. This means that if you include <code class="language-plaintext highlighter-rouge">observer_cli</code> as a dependency you get recon. Here’s some general information on it:</p> <ul> <li>Written by Fred Hebert and wraps :erlang.trace</li> <li>Production safe and basis for observer_cli. Has more than tracing</li> <li>Recon tracer links to the shell</li> <li>Which means…it shuts itself down on shell disconnect (unlike some other tracing which will run forever unless we explicitly stop it)</li> <li>So even if you had network interruption and got kicked out of your session your tracing is going to be turned off</li> <li>Limits total amount of trace info (unlike some more primitive tracing which will output everything….forever)</li> </ul> <p>Here’s an example of a simple trace:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:recon_trace.calls({Map, :get, :return_trace}, 2)
</code></pre></div></div> <p>In the first argument (the tuple <code class="language-plaintext highlighter-rouge">{Map, :get, :return_trace}</code>) its saying “I want to trace any calls to Map.get. Notice that we don’t specify the arity. Either a call to <code class="language-plaintext highlighter-rouge">Map.get/2</code> or <code class="language-plaintext highlighter-rouge">Map.get/3</code> will be traced. The <code class="language-plaintext highlighter-rouge">:return_trace</code> says “I want to get the return value for the function call”. the second parameter is the number of times to trace. A trace of either the call to the function or the return value counts as a trace. So this is saying “I want to see what is passed to Map.get and then I want to see the return value”.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; a_map = %{a: 133, bb: 3243, ccc: 99221}
iex&gt; :recon_trace.calls({Map, :get, :return_trace}, 2)
iex&gt; Map.get(a_map, :bb)
ex(3)&gt; Map.get(a_map, :bb)
3243

16:22:52.750722 &lt;0.1472.0&gt; 'Elixir.Map':get(#{a=&gt;133, bb=&gt;3243, ccc=&gt;99221}, bb)

16:22:52.756306 &lt;0.1472.0&gt; 'Elixir.Map':get/2 --&gt; 3243
Recon tracer rate limit tripped.
</code></pre></div></div> <p>Recon tracing also provides match spec pattern matching. This is a obtuse skill and is explained better in the doc then I could do. Let’s assume we want to do the same thing but this time only trace if the key passed in to <code class="language-plaintext highlighter-rouge">Map.get</code> is <code class="language-plaintext highlighter-rouge">:ccc</code>. We could do this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; match = [{[:_, :"$1"], [{:==, :"$1", :ccc}], [{:return_trace}]}]
[{[:_, :"$1"], [{:==, :"$1", :ccc}], [{:return_trace}]}]
iex&gt;  :recon_trace.calls({Map, :get, match}, 2)
2
iex(6)&gt; Map.get(a_map, :a)
133
iex(7)&gt; Map.get(a_map, :bb)
3243
iex(8)&gt; Map.get(a_map, :ccc)
99221

16:28:03.217740 &lt;0.1472.0&gt; 'Elixir.Map':get(#{a=&gt;133, bb=&gt;3243, ccc=&gt;99221}, ccc)

16:28:03.217830 &lt;0.1472.0&gt; 'Elixir.Map':get/2 --&gt; 99221
Recon tracer rate limit tripped.
</code></pre></div></div> <p>Notice that that the trace did not occur until the pattern was matched. Other calls were not traced.</p> <p>Note: you can only trace public functions.</p> <p>You can also trace functions processes.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pid = Process.whereis(MyProcess)
:recon_trace.calls({MyProcess, :handle_call, :_}, 10, [{pid, :all}])
</code></pre></div></div> <p>This is saying we want to trace any <code class="language-plaintext highlighter-rouge">handle_call</code> functions for a particular process (identified by <code class="language-plaintext highlighter-rouge">pid</code>).</p> <h2 id="other-helpful-things-in-recon">Other Helpful Things in recon</h2> <p>If you have a <code class="language-plaintext highlighter-rouge">pid</code> for a process you are interested in you can use recon to get information about it.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex&gt; pid = Process.whereis(MyProcess)
iex&gt; :recon.info(pid)
[
  meta: [
    registered_name: MyProcess,
    dictionary: [
      "$ancestors": [MyProcess.Supervisor, #PID&lt;0.708.0&gt;],
      "$initial_call": {MyProcess, :init, 1}
    ],
    group_leader: #PID&lt;0.707.0&gt;,
    status: :waiting
  ],
  signals: [
    links: [#PID&lt;0.709.0&gt;],
    monitors: [],
    monitored_by: [],
    trap_exit: false
  ],
  location: [
    initial_call: {:proc_lib, :init_p, 5},
    current_stacktrace: [
      {:gen_server, :loop, 7, [file: 'gen_server.erl', line: 394]},
      {:proc_lib, :init_p_do_apply, 3, [file: 'proc_lib.erl', line: 249]}
    ]
  ],etc. etc.
</code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://erlang.org/doc/man/sys.html">Erlang :sys module</a></li> <li><a href="http://erlang.org/doc/man/erlang.html#trace-3">Erlang :trace</a></li> <li><a href="https://erlang.org/doc/man/dbg.html#fun2ms-1">Erlang dbg pattern matching</a></li> <li><a href="https://hex.pm/packages/ex2ms">ex2ms - generate pattern matches for Elixir functions</a></li> <li><a href="https://github.com/zhongwencool/observer_cli">observer_cli</a></li> <li><a href="https://hex.pm/packages/recon">recon - what observer_cli is based on</a></li> <li><a href="https://s3.us-east-2.amazonaws.com/ferd.erlang-in-anger/text.v1.1.0.pdf">Erlang in Anger</a></li> </ul>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Some debugging suggestions specific to Elixir production]]></summary></entry><entry><title type="html">Elixir, Parameter Validation with Ecto</title><link href="https://fmcgeough.github.io/blog/2023/parameter-validation-with-ecto/" rel="alternate" type="text/html" title="Elixir, Parameter Validation with Ecto"/><published>2023-07-31T08:53:13+00:00</published><updated>2023-07-31T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2023/parameter-validation-with-ecto</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2023/parameter-validation-with-ecto/"><![CDATA[<p>Elixir is a language that first appeared in 2012. There is a web framework called Phoenix that is what is primarily used to develop web-based software in Elixir. The Ecto library is used in Elixir to interact with relational databases. However, Ecto can also be used to validate parameters passed to API endpoints. This is a quick example to help you understand how this is done. It assumes you are already at least somewhat familiar with Elixir and the Phoenix framework. The example is just that, an example. It’s not complete. It’s not meant to be an example of production-level code. You can think of this as an intro and getting started type of thing. It’s got enough complexity to get you past some initial hurdles.</p> <h2 id="prerequisites">Prerequisites</h2> <p>The sample code is in a Phoenix framework app generated with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mix phx.new --no-assets  --no-dashboard --no-ecto --no-html --no-live --no-mailer --no-tailwind paramz
</code></pre></div></div> <p>Then the Ecto dependency was added to the mix.exs file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{:ecto, "~&gt; 3.10"}
</code></pre></div></div> <p>It is not necessary to add a dependency on <code class="language-plaintext highlighter-rouge">ecto_sql</code> nor <code class="language-plaintext highlighter-rouge">db_connection</code>. In an actual application where you have a dependency on <code class="language-plaintext highlighter-rouge">ecto_sql</code> it is not necessary to add a dependency on <code class="language-plaintext highlighter-rouge">ecto</code>. The dependency on <code class="language-plaintext highlighter-rouge">ecto_sql</code> brings in the <code class="language-plaintext highlighter-rouge">ecto</code> library.</p> <h2 id="router">Router</h2> <p>For the example code we have a router with two endpoints:</p> <ul> <li>a simple endpoint with parameters in the path</li> <li>a more complex endpoint with parameters in path, a JSON body containing a nested object and a query string.</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ParamzWeb.Router do
  use ParamzWeb, :router

  pipeline :api do
    plug(:accepts, ["json"])
  end

  scope "/api", ParamzWeb do
    pipe_through(:api)

    # Simple request with parameters in path
    get("/:account_id/:user_id/simple", ParamCheckController, :simple)

    # More complex request with parameter in path, a body containing
    # data and allows a query string
    post("/:account_id/complex", ParamCheckController, :complex)
  end
end
</code></pre></div></div> <h2 id="controller-functions">Controller Functions</h2> <p>For both our controller functions the example code just validates the parameters and then sends back 200 and the validated parameters (which have conversions done). If the parameters are invalid the code returns a 400 status code with the error info on the parameters supplied.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ParamzWeb.ParamCheckController do
  use ParamzWeb, :controller

  import ParamzWeb.Params

  alias ParamzWeb.Params.{Complex, Simple}

  def simple(conn, params) do
    params
    |&gt; Simple.validate()
    |&gt; handle_validation_result()
    |&gt; case do
      {:ok, validated_params} -&gt;
        IO.inspect(validated_params, label: "after Params call")
        conn |&gt; put_status(200) |&gt; json(Map.from_struct(validated_params))

      {:error, :invalid_input, error_msg} -&gt;
        conn |&gt; put_status(400) |&gt; json(%{error: "Invalid parameter input. #{error_msg}"})
    end
  end

  def complex(conn, params) do
    params
    |&gt; Complex.validate()
    |&gt; handle_validation_result()
    |&gt; case do
      {:ok, validated_params} -&gt;
        IO.inspect(validated_params, label: "after Params call")
        conn |&gt; put_status(200) |&gt; json(validated_params)

      {:error, :invalid_input, error_msg} -&gt;
        conn |&gt; put_status(400) |&gt; json(%{error: "Invalid parameter input. #{error_msg}"})
    end
  end
end
</code></pre></div></div> <h2 id="parameter-validation-code">Parameter Validation Code</h2> <h3 id="general-utility">General Utility</h3> <p>A simple module to convert a changeset into either {:ok, map()} or {:error, :invalid_input, String.t()}</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Paramz.Utils.LogHelp do
  @moduledoc """
  Utility functions related to logging errors
  """

  alias Ecto.Changeset

  @doc """
  If our app code gets back an error tuple from Ecto where the second
  element is an Ecto.Changeset this function can convert that value
  into a String for logging
  """
  @spec ecto_error(Ecto.Changeset.t()) :: String.t()
  def ecto_error(%Ecto.Changeset{} = changeset) do
    IO.inspect(changeset, label: "changeset errors")

    Changeset.traverse_errors(changeset, fn {msg, opts} -&gt;
      Enum.reduce(opts, msg, fn {key, value}, acc -&gt;
        String.replace(acc, "%{#{key}}", _to_string(value))
      end)
    end)
    |&gt; Enum.reverse()
    |&gt; Enum.map_join(", ", fn {k, msgs} -&gt;
      "#{k}: #{_to_string(msgs)}"
    end)
  end

  def ecto_error(changeset) do
    raise ArgumentError, "unsupported argument: #{inspect(changeset)}"
  end

  defp _to_string(msgs) when is_list(msgs) do
    msgs |&gt; Enum.map_join(", ", &amp;_to_string(&amp;1))
  end

  defp _to_string(msg) when is_binary(msg) do
    String.replace(msg, "\\n", " ")
  end

  defp _to_string(msg) do
    "#{inspect(msg)}"
  end
end
</code></pre></div></div> <h3 id="validation-for-the-simple-endpoint">Validation for the simple endpoint</h3> <p>This endpoint has two parameters in the path. One is the account id which is an integer. The other is the user id which is also an integer.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ParamzWeb.Params.Simple do
  use Ecto.Schema
  import Ecto.Changeset

  @max_int32 (:math.pow(2, 31) - 1) |&gt; round()

  @primary_key false
  embedded_schema do
    field(:account_id, :integer)
    field(:user_id, :integer)
  end

  def validate(attrs) do
    changeset(%__MODULE__{}, attrs)
  end

  def changeset(%__MODULE__{} = struct, attrs \\ %{}) do
    struct
    |&gt; cast(attrs, [:account_id, :user_id])
    |&gt; validate_required([:account_id, :user_id])
    |&gt; validate_number(:account_id, greater_than: 0, less_than_or_equal_to: @max_int32)
    |&gt; validate_number(:user_id, greater_than: 0, less_than_or_equal_to: @max_int32)
  end
end
</code></pre></div></div> <h2 id="doing-validation-for-complex-endpoint">Doing validation for complex endpoint</h2> <p>In this endpoint there’s a parameter in the path - the account id - a body containing JSON with a nested object - and a query parameter.</p> <p>In order to handle nested objects in Ecto validation you can use the embeds_one syntax. This means that every nested object needs its own Ecto.Schema defined and has its own separate changeset functionality.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ParamzWeb.Params.License do
  use Ecto.Schema
  import Ecto.Changeset

  @max_int32 (:math.pow(2, 31) - 1) |&gt; round()

  @primary_key false
  embedded_schema do
    field(:id, :integer)
    field(:type, :string)
  end

  def changeset(struct, attrs) do
    struct
    |&gt; cast(attrs, [:id, :type])
    |&gt; validate_required([:id, :type])
    |&gt; validate_number(:id, greater_than: 0, less_than_or_equal_to: @max_int32)
  end
end

defmodule ParamzWeb.Params.License do
  use Ecto.Schema
  import Ecto.Changeset

  @max_int32 (:math.pow(2, 31) - 1) |&gt; round()

  @primary_key false
  embedded_schema do
    field(:id, :integer)
    field(:type, :string)
  end

  def changeset(struct, attrs) do
    struct
    |&gt; cast(attrs, [:id, :type])
    |&gt; validate_required([:id, :type])
    |&gt; validate_number(:id, greater_than: 0, less_than_or_equal_to: @max_int32)
  end
end

defmodule ParamzWeb.Params.Complex do
  use Ecto.Schema
  import Ecto.Changeset

  alias ParamzWeb.Params.License

  @max_int32 (:math.pow(2, 31) - 1) |&gt; round()
  @allowed_includes ["posts", "pictures"]
  @allowed_includes_str Enum.join(@allowed_includes, ", ")
  @invalid_include_value "invalid include values. Allowed values:"
  @invalid_include_format "invalid include value. Must be list"

  @primary_key false
  embedded_schema do
    field(:account_id, :integer)
    field(:name, :string)
    field(:email, :string)
    field(:include, {:array, :string})
    embeds_one(:license, License)
  end

  def validate(attrs) do
    changeset(%__MODULE__{}, attrs)
  end

  def changeset(struct, attrs) do
    struct
    |&gt; cast(attrs, [:name, :email, :account_id, :include])
    |&gt; cast_embed(:license)
    |&gt; validate_required([:name, :email, :account_id])
    |&gt; validate_number(:account_id, greater_than: 0, less_than_or_equal_to: @max_int32)
    |&gt; validate_include()
  end

  def validate_include(changeset) do
    changeset
    |&gt; get_field(:include)
    |&gt; validate_include_value(changeset)
  end

  defp validate_include_value(nil, changeset), do: changeset

  defp validate_include_value(includes, changeset) when is_list(includes) do
    if Enum.all?(includes, &amp;(&amp;1 in @allowed_includes)) do
      changeset
    else
      add_error(changeset, :include, "#{@invalid_include_value} #{@allowed_includes_str}")
    end
  end

  defp validate_include_value(_includes, changeset) do
    add_error(changeset, :include, @invalid_include_format)
  end
end

defimpl Jason.Encoder, for: ParamzWeb.Params.License do
  def encode(value, opts) do
    value
    |&gt; Map.take([[:id, :type]])
    |&gt; Jason.Encode.map(opts)
  end
end

defimpl Jason.Encoder, for: ParamzWeb.Params.Complex do
  def encode(value, opts) do
    current_value = Map.take(value, [:account_id, :name, :email, :include])

    if value.license do
      Map.put(current_value, :license, Map.take(value.license, [:id, :type]))
    else
      current_value
    end
    |&gt; Jason.Encode.map(opts)
  end
end
</code></pre></div></div> <h2 id="changeset-errors">Changeset Errors</h2> <p>Here’s some simple code to convert changeset errors to a String.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule Paramz.Utils.LogHelp do
  @moduledoc """
  Utility functions related to logging errors
  """

  @doc """
  If our app code gets back an error tuple from Ecto where the second
  element is an Ecto.Changeset this function can convert that value
  into a String for logging
  """
  @spec ecto_error(Ecto.Changeset.t()) :: String.t()
  def ecto_error(%Ecto.Changeset{} = changeset) do
    Ecto.Changeset.traverse_errors(changeset, fn {msg, opts} -&gt;
      Enum.reduce(opts, msg, fn {key, value}, acc -&gt;
        String.replace(acc, "%{#{key}}", _to_string(value))
      end)
    end)
    |&gt; Enum.reduce("", fn {k, v}, acc -&gt;
      joined_errors = Enum.join(v, "; ")
      "#{acc} #{k}: #{joined_errors}"
    end)
  end

  def ecto_error(changeset) do
    raise ArgumentError, "unsupported argument: #{inspect(changeset)}"
  end

  defp _to_string(val) when is_list(val) do
    Enum.join(val, ",")
  end

  defp _to_string(val), do: to_string(val)
end
</code></pre></div></div> <h2 id="testing">Testing</h2> <h3 id="simple-endpoint---success">Simple Endpoint - Success</h3> <h4 id="client-side">Client side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -s http://localhost:4000/api/1234/90023377/simple

{"account_id":1234,"user_id":90023377}%
</code></pre></div></div> <h4 id="server-side">Server side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[info] GET /api/1234/90023377/simple
[debug] Processing with ParamzWeb.ParamCheckController.simple/2
  Parameters: %{"account_id" =&gt; "1234", "user_id" =&gt; "90023377"}
  Pipelines: [:api]
after Params call: %ParamzWeb.Params.Simple{account_id: 1234, user_id: 90023377}
[info] Sent 200 in 1ms
</code></pre></div></div> <h3 id="simple-endpoint---bad-parameters-failure">Simple Endpoint - Bad Parameters, Failure</h3> <h4 id="client-side-1">Client side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -s http://localhost:4000/api/1234/90abcdE77/simple

{"error":"Invalid parameter input.  user_id: is invalid"}%
</code></pre></div></div> <h4 id="server-side-1">Server side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[info] GET /api/1234/90abcdE77/simple
[debug] Processing with ParamzWeb.ParamCheckController.simple/2
  Parameters: %{"account_id" =&gt; "1234", "user_id" =&gt; "90abcdE77"}
  Pipelines: [:api]
[info] Sent 400 in 1ms
</code></pre></div></div> <h3 id="complex-endpoint---success">Complex Endpoint - Success</h3> <h4 id="client-side-2">Client Side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl -s -H "Content-Type: application/json" -X POST -d '{
"name": "testing",
"email": "testing@google.com",
"license": {
  "id": "95055",
  "type": "license_reference"
}
}' http://localhost:4000/api/1234/complex\?include\[\]\=posts

{"account_id":1234,"email":"testing@google.com","include":["teams"],"license":{"id":95055,"type":"license_reference"},"name":"testing"}%
</code></pre></div></div> <h4 id="server-side-logging">Server side logging</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[info] POST /api/1234/complex
debug] Processing with ParamzWeb.ParamCheckController.complex/2
Parameters: %{"account_id" =&gt; "1234", "email" =&gt; "testing@google.com", "include" =&gt; ["posts"], "license" =&gt; %{"id" =&gt; "95055", "type" =&gt; "license_reference"}, "name" =&gt; "testing"}
Pipelines: [:api]
after Params call: %ParamzWeb.Params.Complex{
account_id: 1234,
name: "testing",
email: "testing@google.com",
include: ["posts"],
license: %ParamzWeb.Params.License{id: 95055, type: "license_reference"}
}
[info] Sent 200 in 2ms
</code></pre></div></div> <h3 id="complex-endpoint---bad-parameters-failure">Complex Endpoint - Bad Parameters, Failure</h3> <h4 id="client-side-3">Client Side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -s -H "Content-Type: application/json" -X POST -d '{
"name": "testing",
"email": "testing@google.com",
"license": {
  "type": "license_reference"
}
}' http://localhost:4000/api/1234/complex\?include\[\]\=posts

{"error": "Invalid parameter input. license: %{id: [\"can't be blank\"]}"}
</code></pre></div></div> <h4 id="server-side-2">Server Side</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iex(1)&gt; [info] POST /api/1234/complex
changeset errors: #Ecto.Changeset&lt;
  action: nil,
  changes: %{
    account_id: 1234,
    email: "testing@google.com",
    include: ["posts"],
    license: #Ecto.Changeset&lt;
      action: :insert,
      changes: %{type: "license_reference"},
      errors: [id: {"can't be blank", [validation: :required]}],
      data: #ParamzWeb.Params.License&lt;&gt;,
      valid?: false
    &gt;,
    name: "testing"
  },
  errors: [],
  data: #ParamzWeb.Params.Complex&lt;&gt;,
  valid?: false
&gt;
[debug] Processing with ParamzWeb.ParamCheckController.complex/2
  Parameters: %{"account_id" =&gt; "1234", "email" =&gt; "testing@google.com", "include" =&gt; ["posts"], "license" =&gt; %{"type" =&gt; "license_reference"}, "name" =&gt; "testing"}
  Pipelines: [:api]
[info] Sent 400 in 2ms
</code></pre></div></div> <h2 id="the-params-library">The params library</h2> <p>There is a <a href="https://hex.pm/packages/params">params library</a> that wraps Ecto validation. It attempts to reduce boiler-plate code. However, that comes at a cost in giving up control you might need. In addition, there is no active maintainer for the library at the moment. I’d recommend not using this library at the moment.</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Using the Ecto library to validate API Parameters]]></summary></entry><entry><title type="html">Four Thousand Weeks</title><link href="https://fmcgeough.github.io/blog/2023/four-thouand-weeks/" rel="alternate" type="text/html" title="Four Thousand Weeks"/><published>2023-07-31T07:53:13+00:00</published><updated>2023-07-31T07:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2023/four-thouand-weeks</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2023/four-thouand-weeks/"><![CDATA[<p>Notes on the book <a href="https://us.macmillan.com/books/9780374159122/fourthousandweeks">“Four Thousand Weeks: Time Management for Mortals”</a> by Oliver Burkeman. I enjoyed the book. I think it’s worth reading. It’s not your typical time management book (such as Getting Things Done). It’s not focused on making you more efficient at getting through your day. It wants the reader to think about what it is that they actually want to accomplish in the limited lifetime that each of us is gifted.</p> <h2 id="highlights">Highlights</h2> <p>I’ll take notes when I’m reading. If its a Kindle (or the like) then I can highlight as I go. If its a library book then I’ll usually write a couple notes after I finish a large enough portion of a book. I’ll do this with books I buy too. I don’t generally highlight physical books.</p> <p>I don’t like “keeping” books. When I was younger I built up a fairly large collection of books. As it turns out, books are heavy. It’s a pain to move them. So I began giving away my books - either to friends, charity organizations or our local library. There’s a wonderful service called <a href="https://littlefreelibrary.org/">Free Little Library</a>. We have a couple of them in our surrounding neighborhoods and one was done by a woman that is in a bookclub I belong to.</p> <p>The list below is extracted from my book highlights. They may not be direct quotes. Any errors that you find are almost certainly my fault and not the author’s.</p> <ul> <li>The real problem isn’t our limited time. The real problem - or so I hope to convince you - is that we’ve unwittingly inherited, and feel pressured to live by, a troublesome set of ideas about how to use our limited time, all of which are pretty much guaranteed to make things worse.</li> <li>Traditional time management has long held out the implicit promise of “getting on top of everything”, of becoming the master of one’s time. The yearning for this feeling of control over the unfolding hours and days is an old one: back in 1908, in a short book entitled <a href="https://www.gutenberg.org/ebooks/2274">How to Live on 24 Hours a Day - Project Gutenberg link</a>, the English journalist and novelist Arnold Bennett offered scheduling tips to “that innumerable band of souls who are haunted, more or less painfully, by the feeling that the years slip by, and slip by, and slip by, and they have not yet been able to get their lives into proper working order.”</li> <li>Historians call this way of living (in the Middle Ages) “task orientation,” because the rhythms of life emerge organically from the tasks themselves, rather than being lined up against an abstract timeline, the approach that has become second nature to us today.</li> <li>once “time” and “life” had been separated in most people’s minds, time became a thing that you used - and it’s this shift that serves as a precondition for all the uniquely modern ways in which we struggle with time today.</li> <li>(time) stops being the water in which you swim and turns into something you feel you need to dominate or control</li> <li>“One of my teachers told me, “If I think a thought five times, and I’m not learning anything new from it, I don’t think it anymore.”</li> <li>Mumford wrote “Eternity ceased gradually to serve as the measure and focus of human actions.” In its place came the dictatorship of the clock, the schedule, and the Google calendar alert.</li> <li>instead of clearing the decks, declining to clear the decks, focusing instead on what’s truly of greatest consequence while tolerating the discomfort of knowing that, as you do so, the decks will be filling up further, with emails and errands and other to-dos, many of which you may never get around to at all.</li> <li>smoothness, as it turns out, is a dubious virtue, since it’s often the unsmoothed textures of life that make it liveable, helping nurture the relationships that are crucial for mental and physical health, and for reslience of our communities.</li> <li>when you render the process more convenient, you drain it of its meaning</li> <li>the original Latin word for decide, decidere, means “to cut off”, as in slicing away alternatives; it’s a close cousin of words like “homicide” and “suicide”</li> <li>Become a Better Procrastinator</li> <li>By the end of your life, you’ll have gotten around to doing virtually none of the things you theoretically could have done</li> <li>The real measure of any time management technique is whether or not it helps you neglect the right things</li> <li>pay yourself first when it comes to time. <a href="https://jessicaabel.com/">Creative Career Building for Artists &amp; Writers - Jessica Abel</a></li> <li>the only way to be sure (anything) will happen is to do some of it today, no matter how little, and no matter how many other things may be begging for your attention.</li> <li>limit your work in progress</li> <li>resist the allure of middling priorities - make a list of the top 25 things you want out of life and order them from most important to least. Then organize your time around the top 5. Actively avoid every other item on the list.</li> <li>“you need to learn how to say no to things you do want to do, with the recognition that you have only one life” – Elizabeth Gilbert</li> <li>“We invariably prefer indecision over committing ourselves to a single path” - Henri Bergson</li> <li>psychologist Timothy Wilson “we’re capable of consciously attending to about 0.0004 percent of the information bombarding our brains at any given moment”. In 11 studies, we found that participants typically did not enjoy spending 6 to 15 minutes in a room by themselves with nothing to do but think, that they enjoyed doing mundane external activities much more, and that many preferred to administer electric shocks to themselves instead of being left alone with their thoughts.</li> <li>“Attention is the beginning of devotion” - poet Mary Oliver</li> <li>“We are distracted from distraction by distraction” - T S Eliot</li> </ul> <h2 id="recommendations-from-book">Recommendations From Book</h2> <p>These were books or web articles referenced in the book. I found all of them interesting.</p> <ul> <li>Meditation for fidgety skeptics : a 10% happier how-to book</li> <li>The Path of Least Resistance - Robert Fritz]</li> <li>The Miracle of Morning Pages - Julia Cameron]</li> <li>Death: The End of Self-Improvement - Joan Tollifson]</li> <li>Marilynne Robinson’s “joyless urgency” (The Givenness of Things)</li> <li>Personal Kanban by Jim Benson and Tonianne DeMaria Barry</li> </ul> <h2 id="links">Links</h2> <ul> <li><a href="https://www.ted.com/talks/tim_urban_inside_the_mind_of_a_master_procrastinator">Inside the mind of a master procrastinator</a></li> <li><a href="https://www.tenpercent.com/podcast-episode/oliver-burkeman-456">#456. Time Management for Mortals | Oliver Burkeman — Ten Percent Happier</a></li> </ul>]]></content><author><name></name></author><category term="reading"/><category term="reading"/><summary type="html"><![CDATA[Notes on the book Four Thousand Weeks, Time Management for Mortals]]></summary></entry><entry><title type="html">Elixir, Programming Puzzles and Sorting Arrays</title><link href="https://fmcgeough.github.io/blog/2019/contiguous-sort-elixir/" rel="alternate" type="text/html" title="Elixir, Programming Puzzles and Sorting Arrays"/><published>2019-12-31T07:53:13+00:00</published><updated>2019-12-31T07:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2019/contiguous-sort-elixir</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2019/contiguous-sort-elixir/"><![CDATA[<p>There are a number of programming puzzle sites that are worthwhile tools for learning a language, brushing up on your skills or just exploring how other people might solve problems differently than you. I think this is all good. I’ve found it especially helpful in learning a new language. One of the interesting things about trying to solve some of these puzzles with a language like Elixir is that you have to work through the problem in a different way then you would in a language like “C” or Java. Arrays and sorting are common problems where you’d index into an Array with those languages but you want to avoid that in Elixir since you’re dealing with Lists and iterating into a List gets expensive. Here’s an example of a problem where I solved it a different way.</p> <p>Say you’re given the problem of determining if it’s possible to sort an array of integers by reversing one of the array’s contiguous subarrays. So, for example, if you are given the input: <code class="language-plaintext highlighter-rouge">[-1, 5, 4, 3, 2, 8]</code> you can reverse the subarray <code class="language-plaintext highlighter-rouge">[5, 4, 3, 2]</code> and the entire array would end up sorted. But, for the input <code class="language-plaintext highlighter-rouge">[-1, 5, 4, 3, 2, -5]</code> there is no subarray that can be reversed and end up with a sorted array. The output from your function should just be true (a subarray exists that can be reversed to provide sorted array) or false (no such subarray exists). Additional constraints are that if there are any duplicates in the input then the function should return false.</p> <p>If you take a step back from the problem then you realize that in order for the function to return true the input has to consist of a subarray of 0..n ascending elements, then a subarray of 0..n descending elements (where the lowest number of the subarray is &gt; then the highest number of the first subarray) and then a subarray of 0..n ascending elements again (where the lowest number of the last subarray is &gt; the highest number in the descending subarray).</p> <p>In the example, <code class="language-plaintext highlighter-rouge">[-1, 5, 4, 3, 2, 8]</code> the subarrays that need to be identified are <code class="language-plaintext highlighter-rouge">[-1]</code> and <code class="language-plaintext highlighter-rouge">[5, 4, 3, 2]</code> and <code class="language-plaintext highlighter-rouge">[8]</code>. Since -1 is &lt; 2 (the last - lowest - element in subarray2) and since 5 is &lt; 8 (5 is the highest element in subarray 2) then the function should respond “true”.</p> <p>Okay, its hopefully clear that those are the 3 subarrays for this input but what questions do we need to answer to figure out whether reversing that 2nd subarray will leave the array sorted? Starting from the first couple elements of the list [-1, 5] we know that 5 &gt; -1 so 1) we know that we have an ascending subarray consisting of at least -1 and possibly 5. But whether 5 is part of the ascending subarray depends on the next element. Since the next element is 4 it means that 5 is the first element in our descending subarray. We’d keep traversing elements in the list after 4 until we find one that is greater than the element that proceeded it. That’s how we get to [8] as the last subarray.</p> <p>Now, since the 2nd subarray was in descending order and since the 3rd subarray ascends (and stops in this case) with 8 and 8 is greater than our first element in the descending subarray we “know” that this array can be sorted by reversing that descending subarray.</p> <p>The data that it appears that we need to proceed thru the list and make a determination is: 1) what’s the current status (:leading_ascending, :descending, :trailing_ascending); 2) what’s the maximum (last) number in subarray1 (this allows us to check for whether any number in the 2nd subarray is less than max_subarray1); 3) what’s the maximum (first) number in subarray2 (this allows us to check for whether the number that starts the 3rd ascending subarray is less than max_subarray2). Since we may or may not have an initial ascending section the value of max_subarray1 can be nil.</p> <p>If we put all the logic into our state module then the driver to determine true/false becomes pretty simple:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ContiguousSubArray do
  def reverse_to_sort([num | t]) do
    reverse_to_sort(t, num, ReverseSortState.new(num))
  end

  def reverse_to_sort([num | t], prev, state) do
    IO.puts("#{inspect(state)}")

    case ReverseSortState.advance(state, num, prev) do
      false -&gt; false
      new_state -&gt; reverse_to_sort(t, num, new_state)
    end
  end

  def reverse_to_sort([], _, _state), do: true
end
</code></pre></div></div> <p>The ContiguousSubArray creates a new ReverseSortState and then calls into the function <code class="language-plaintext highlighter-rouge">reverse_to_sort/3</code>. In that function we call <code class="language-plaintext highlighter-rouge">ReverseSortState.advance/3</code> and pass the current state of our analysis of the input, the value in the array we’re currently on, and the previous value in the array. If the <code class="language-plaintext highlighter-rouge">advance</code> function returns a state then all is still good and we move forward one position by calling reverse_to_sort/3 recursively. If `advance’ returns false then the input didn’t meet our expectations and we return false to the caller. Our ReverseSortState is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ReverseSortState do
  defstruct [:max_subarray2, :max_subarray1, :status]

  def new(num) do
    %__MODULE__{
      max_subarray2: num,
      max_subarray1: nil,
      status: :leading_ascending
    }
  end

  def advance(%{status: status} = state, num, prev) when status == :leading_ascending do
    cond do
      num &gt; prev -&gt;
        %{state | max_subarray2: num, max_subarray1: prev}

      num == prev -&gt;
        false

      num &lt; prev and num_greater_than_max_subarray1?(state, num) -&gt;
        %{state | status: :descending}

      true -&gt;
        false
    end
  end

  def advance(%{status: status} = state, num, prev) when status == :descending do
    cond do
      num &lt; prev and num &lt; state.max_subarray2 and num_greater_than_max_subarray1?(state, num) -&gt;
        state

      num == prev -&gt;
        false

      num &gt; prev and num_greater_than_max_subarray1?(state, num) and num &gt; state.max_subarray2 -&gt;
        %{state | status: :trailing_ascending}

      true -&gt;
        false
    end
  end

  def advance(%{status: status} = state, num, prev) when status == :trailing_ascending do
    case num &gt; prev do
      true -&gt; state
      false -&gt; false
    end
  end

  defp num_greater_than_max_subarray1?(state, num) do
    is_nil(state.max_subarray1) or num &gt; state.max_subarray1
  end
end
</code></pre></div></div> <p>We can run this code thru some unit tests with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule ContiguousSubArrayTest do
  @inputs [
    {[-1, 5, 4, 3, 2, 8], true},
    {[1, 3, 2, 5, 4, 6], false},
    {[2, 3, 2, 4], false},
    {[19, 32, 23], true},
    {[5, 4, 3, 2, 1], true}
  ]

  def test do
    @inputs
    |&gt; Enum.map(fn {input, result} -&gt;
      ContiguousSubArray.reverse_to_sort(input) == result
    end)
  end
end
</code></pre></div></div> <p>On puzzles in general, there are a number of companies that use puzzles from these sites (or some developed internally) as filters for hiring. This is a bit frustrating if you are applying for a job working on what amounts to a CRUD app but are asked to solve puzzles that would never come up in the actual work for the job. But its not uncommon. If you know the company you’d like to work at will throw these type of puzzles at you then I’d recommend spending some time on one or more of the programming puzzle sites and work thru some puzzles. If you can find out which site the company uses then practice on that since each has their own UI and idiosyncrasies and you want to be familiar with it before you start working on puzzles as part of interview (ordinarily as a timed exercise).</p> <p>Sites to check out that have Elixir support:</p> <ul> <li><a href="https://codesignal.com/">https://codesignal.com/</a></li> <li><a href="https://exercism.io/">https://exercism.io/</a></li> </ul>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Elixir puzzles]]></summary></entry><entry><title type="html">ElixirConf2016 and Ecto</title><link href="https://fmcgeough.github.io/blog/2019/14-00-00-elixirecto/" rel="alternate" type="text/html" title="ElixirConf2016 and Ecto"/><published>2019-09-03T08:53:13+00:00</published><updated>2019-09-03T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2019/14:00:00-elixirecto</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2019/14-00-00-elixirecto/"><![CDATA[<p>Just got back from ElixirConf2016. It was an awesome experience even with how wet Disney World was from the side effects of Hurricane Hermine. Very interesting sessions and a lot of excitement. Also seemed like a really nice community. Lots of folks coming from Rails. A couple people from Java.</p> <p>There were 542 attendees and that was basically doubled from last year’s conference. A large number of people already had Elixir/Phoenix code in production - which was encouraging. I was there more as a tourist than anything. Trying to figure out if this is something that I should really try and dig into or just something to play around with. I think by the end of the conference I thought that this was something that has a real chance to be a solid development community over the next decade.</p> <p>I enjoyed every talk that I went to but the one by Darin Wilson (@darinwilson) on Ecto was immediately useful and something that I was able to quickly wrap my head around with my database background. Ecto is Elixir’s database wrapper. It’s relatively new - like most of Elixir - but its really well thought out and usable.</p> <p>Darin’s talk and sample project (a music db) covered a lot of Ecto use cases, including :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    belongs_to :artist, Artist
    has_many :tracks, Track
    many_to_many :genres, Genre, join_through: "albums_genres"
</code></pre></div></div> <p>Its worth checking out if you are new to Ecto. Its in github at <a href="https://github.com/darinwilson/music_db">music_db github repo</a>.</p> <p>The actual database access is provided by an Adapter that implements a set of callbacks and a driver that implements the database communication protocol (it appears - I’m still learning this myself). The default relational database is Postgres (good choice!).</p> <p>Ecto just released version 2.0 and the only Adapter that appears to work at this point is Postgres. MySQL and MongoDB were supported &lt; 2.0 so hopefully support for them is added back shortly.</p> <p>The preferred syntax to form queries is key-word based. This should work well for standard database models. Again, there are decent examples in Darin’s sample project.</p> <p>Will be spending a few hours trying to wrap my head around using Ecto for a work model of Users, Roles, Accounts, etc.</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Review of Elixir Config 2016]]></summary></entry><entry><title type="html">Programming Elixir</title><link href="https://fmcgeough.github.io/blog/2016/programming-elixir/" rel="alternate" type="text/html" title="Programming Elixir"/><published>2016-07-17T08:53:13+00:00</published><updated>2016-07-17T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/programming-elixir</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/programming-elixir/"><![CDATA[<p>For learning Elixir I started with the ubiquitous Dave Thomas and “Programming Elixir”. I’m bouncing back and forth between reading through that book and watching the ConFreaks videos of the last two year’s Elixir conferences (and thinking about whether I want to pay to go to this year’s conference which is in Orlando).</p> <p>“Programming Elixir” has been pretty good. The exercises at the end of the chapter cover the concepts discussed. I was stumped for a couple of minutes looking at “define a function head with the defaults”. But after working through the example it made sense and resulted in code that seemed to make sense to me.</p> <p>The thing is in Elixir (and Erlang) the function head (declaration) is a separate entity from the function body. Which is an odd thing to wrap your head around if you come from almost any other language background. In the case of the example with default parameters in the book you can do this :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    defmodule DefaultParams1 do
      def func(p1, p2 \\ 123)

      def func(p1, 99) do
        IO.puts "you said 99"
      end

      def func(p1, p2) do
        IO.inspect [p1, p2]
      end
    end
</code></pre></div></div> <p>If you call DefaultParams1.func(1) then the match will be on that first func without a body. The second parameter is added as a default and the search for a match continues. Obviously a contrived example for the book but I do like the approach of separating the definition of what we might want to supply as defaults from the rest of the code.</p> <p>Just beginning the journey into Elixir but its very interesting so far.</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Learning Elixir]]></summary></entry><entry><title type="html">Learning Elixir and Phoenix</title><link href="https://fmcgeough.github.io/blog/2016/elixir-phoenix-ecto/" rel="alternate" type="text/html" title="Learning Elixir and Phoenix"/><published>2016-07-16T08:53:13+00:00</published><updated>2016-07-16T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/elixir-phoenix-ecto</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/elixir-phoenix-ecto/"><![CDATA[<p>Wow. This is the first time in a while that I’ve been excited about a new programming language. Where learning the language wasn’t just a chore to stay employed. Going through the documentation, code examples and a couple of recent books. Such a fundamentally different way of looking at solving problems. Using <a href="http://confreaks.tv/events/elixirconf2014">Confreaks.tv</a>, <a href="http://safaribooksonline.com">Safari Books online</a>, and the excellent documentation. Can’t wait to build something for real!</p>]]></content><author><name></name></author><category term="Elixir"/><category term="Elixir"/><summary type="html"><![CDATA[Learning Elixir]]></summary></entry><entry><title type="html">Use Postgresql 9.5 Upsert to Return Existing id</title><link href="https://fmcgeough.github.io/blog/2016/postgres-upsert/" rel="alternate" type="text/html" title="Use Postgresql 9.5 Upsert to Return Existing id"/><published>2016-06-01T07:53:13+00:00</published><updated>2016-06-01T07:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/postgres-upsert</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/postgres-upsert/"><![CDATA[<p>Postgresql 9.5 introduced the long-waited for upsert. There are cases where instead of actually updating when the row already exists what you want is to return the primary key (or the whole row for that matter). Postgresql has a SQL extension called RETURNING that lets you get the values just inserted or updated but you can’t just DO NOTHING and get the value back.</p> <p>Example :</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      CREATE TABLE test_null_upsert(id serial,
                                    c2 character varying,
                                    constraint pk_null_upsert primary key(id),
                                    constraint unique_c2_upsert unique(c2));
      INSERT INTO test_null_upsert(c2) VALUES ('ABC');
</code></pre></div></div> <p>Now if you attempt to insert ‘ABC’ it will fail and if you DO NOTHING on the conflict you can’t use RETURNING since there is nothing to return from doing nothing.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      INSERT into test_null_upsert(c2) values ('ABC') ON CONFLICT DO NOTHING RETURNING id;
      id
      ----
      (0 rows)

      INSERT 0 0
</code></pre></div></div> <p>But if you perform a NULL update you can get your id column back.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      INSERT into test_null_upsert(c2) values ('ABC') ON CONFLICT ON CONSTRAINT unique_c2_upsert
      DO UPDATE SET c2 = test_null_upsert.c2 RETURNING id;

      id
      ----
      1
      (1 rows)

      INSERT 0 0
</code></pre></div></div>]]></content><author><name></name></author><category term="postgresql"/><category term="postgresql"/><summary type="html"><![CDATA[Returning the primary key id on upsert with Postgresql]]></summary></entry><entry><title type="html">Practice a new language with exercism</title><link href="https://fmcgeough.github.io/blog/2016/exercism-web-site/" rel="alternate" type="text/html" title="Practice a new language with exercism"/><published>2016-05-18T08:53:13+00:00</published><updated>2016-05-18T08:53:13+00:00</updated><id>https://fmcgeough.github.io/blog/2016/exercism-web-site</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2016/exercism-web-site/"><![CDATA[<p>After a long day programming do you look forward to more programming? OK then. You might want to check out <a href="http://exercism.io/">http://exercism.io/</a> (You might want to also seek help. Go outside once in a while for crying out loud). It has problems in a wide variety of languages. You sign up with your github account and pick a language to work on (Java, Javascript, Scala, Python, Ruby are among the choices). You code up a solution to the problem and submit it. You can discuss your solution and others approaches and iterate on your design to improve it.</p> <p>Each problem is large enough to be interesting but not so large as to demand a good portion of your time. It seems like an hour or two at most.</p> <p>I found this a good way to expand my knowledge of languages I wanted to learn.</p>]]></content><author><name></name></author><category term="programming"/><category term="programming"/><summary type="html"><![CDATA[Learning a language with online courses]]></summary></entry></feed>