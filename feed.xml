<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://fmcgeough.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fmcgeough.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-12T18:40:06+00:00</updated><id>https://fmcgeough.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Resonator Slide</title><link href="https://fmcgeough.github.io/blog/2025/resonator-slide/" rel="alternate" type="text/html" title="Resonator Slide"/><published>2025-03-12T13:05:00+00:00</published><updated>2025-03-12T13:05:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/resonator-slide</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/resonator-slide/"><![CDATA[<p>I keep working on my slide. Love old blues tunes and after listening to them I’m always thinking I should play more.</p> <p>This is using my Mavis Mule Resonator in Open D through a Wooly Coats amp. It’s recorded on my phone so quality is what it is.</p> <p>I encourage anyone who practices any instrument to do some sort of recording so you can hear yourself later.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2025-03-12-resonator-slide.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> Mavis Mule Resonator in Open - D </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[Practice session using Mavis Mule Resonator]]></summary></entry><entry><title type="html">Config Files in Elixir</title><link href="https://fmcgeough.github.io/blog/2025/elixir-config-files/" rel="alternate" type="text/html" title="Config Files in Elixir"/><published>2025-03-06T13:30:00+00:00</published><updated>2025-03-06T13:30:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/elixir-config-files</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/elixir-config-files/"><![CDATA[<p>There are 5 config files generated when you create a new Elixir Phoenix application (using mix phx.new). These are the files and some general information about them.</p> <ul> <li>config.exs - used for storing global information needed in any environment</li> <li>dev.exs - used for storing global information needed only in a dev environment</li> <li>prod.exs - used for storing global information needed only in a prod environment</li> <li>runtime.exs - used to store global information for any environment.</li> <li>test.exs - used for storing global information needed only in a test environment</li> </ul> <h2 id="when-is-evaluation-done">When is Evaluation Done</h2> <p>The config.exs, dev.exs, prod.exs and test.exs files are evaluated at build time - before the application is compiled and before dependencies are loaded. Its important to understand this. If you attempt to do something like this in your prod.exs file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>config :bureau, Bureau.SecretHolder,
    secret1: System.get_env("SECRET_CONFIG_THING1")
</code></pre></div></div> <p>Then secret1 will be set to whatever you have set in your compile environment (probably nothing).</p> <p>If you want to use the system environment to configure how your production app works then you use the runtime.exs file. This file is read after our application and dependencies are compiled and therefore it can configure how our application works at runtime. If the config above was in runtime.exs then secret1 is set to whatever the environment variable SECRET_CONFIG_THING1 stores on the machine on which you run your app.</p> <p>Be aware that runtime.exs is evaluated at runtime for all the Mix environments. When you are running unit tests locally your runtime.exs file is evaluated.</p> <p>Because this is the case you’ll find code like this in a lot of runtime.exs files:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import Config

if config_env() == :prod do
  database_url =
    System.get_env("DATABASE_URL") ||
      raise """
      environment variable DATABASE_URL is missing.
      For example: ecto://USER:PASS@HOST/DATABASE
      """
end
</code></pre></div></div> <p>We’re protecting setting up the database_url to when the config environment is <code class="language-plaintext highlighter-rouge">:prod</code>. This keeps us from overwriting the quite different database_url we most likely have for dev and test environments.</p> <h2 id="what-config-files-am-i-using">What Config Files am I using?</h2> <p>The config.exs file is evaluated (at compile time) for all environments. The dev, test, and prod config files are evaluated based on the environment being compiled. This is because of the line at the end of the config.exs file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import_config "#{config_env()}.exs"
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">config_env/0</code> function is in the Config module in Elixir. It returns the Mix environment. The Mix environment is obtained with:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>String.to_atom(System.get_env("MIX_ENV") || "dev")
</code></pre></div></div> <p>That is, Elixir looks for the value associated with “MIX_ENV” and if its not set then its going to default to “dev”.</p> <p>The runtime.exs file, as indicated earlier, is loaded for all environments. Generally, when you are developing locally you are using:</p> <ul> <li>config.exs</li> <li>dev.exs</li> <li>runtime.exs</li> </ul> <p>When you are running unit tests you are using:</p> <ul> <li>config.exs</li> <li>test.exs</li> <li>runtime.exs</li> </ul> <p>When you are running your code in production you are using:</p> <ul> <li>config.exs</li> <li>prod.exs</li> <li>runtime.exs</li> <li>(and maybe releases.exs)</li> </ul> <h2 id="what-about-releasesexs">What about releases.exs?</h2> <p>Before Elixir 1.11 an app that wanted to use environment variables in production would use a file called releases.exs. This file was also stored in the config directory. There was no runtime.exs.</p> <p>The releases.exs was similar to runtime.exs but not quite the same. The releases.exs was evaluated at runtime but only for <code class="language-plaintext highlighter-rouge">:prod</code>. The runtime.exs is used for all the mix environments.</p> <p>You can still have a releases.exs (as well as a runtime.exs) in an app. However, its confusing and you should migrate whatever is in your releases.exs file to the runtime.exs file and delete the releases.exs file.</p> <p>If you do have both files then the runtime.exs file is executed first followed by the releases.exs file. Its easy to see how confusing and error prone it is to have both. Your runtime.exs might try to setup an application environment value and releases.exs could overwrite its value.</p> <h2 id="can-a-dependency-function-be-called-from-a-config-file">Can a Dependency Function be called from a config file?</h2> <p>Not in any of the config files evaluated at build time. This is because those files are executed prior to loading dependencies. Your dependency code isn’t there.</p> <h2 id="can-a-dependency-function-be-called-from-runtimeexs">Can a Dependency Function be called from runtime.exs?</h2> <p>Yes. Keep in mind that the runtime.exs file is not available to whatever code you are calling. In general, it’s not a great idea and I’d avoid it.</p> <p>If you think you absolutely must then I’d keep José Valim’s PR notes when introducing runtime.exs in mind:</p> <blockquote> <p>Since “config/runtime.exs” is used by both Mix and releases, it cannot configure :kernel, :stdlib, :elixir, and :mix themselves. Attempting to configure those will emit an error. For those rare scenarios, you will need to use “config/releases.exs” - but “config/releases.exs” will remain simple, which will reduce the odds of syntax errors.</p> <p>Since “config/runtime.exs” is used by both Mix and releases, it cannot invoke “Mix” directly. Therefore, for conditional environment compilation, we will add a env/2 macro to Config that will be available for all config files.</p> </blockquote>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Review of How Config Files Are Used in a Phoenix Application]]></summary></entry><entry><title type="html">Staying up to date in Elixir</title><link href="https://fmcgeough.github.io/blog/2025/mix-phx-new/" rel="alternate" type="text/html" title="Staying up to date in Elixir"/><published>2025-03-02T16:04:00+00:00</published><updated>2025-03-02T16:04:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/mix-phx-new</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/mix-phx-new/"><![CDATA[<p>One thing I suggest to folks new to Elixir is to periodically get the latest version of <code class="language-plaintext highlighter-rouge">phx.new</code> and use it to generate a project. Examine the output to see what has changed.</p> <p>The reason this is somewhat important is to keep up with changes to the ecosystem. The majority of developers are wrapped up in day to day activities. They don’t have time to follow issues in github or discussions on mailing list or Elixir’s Discord channel.</p> <p>The steps below were done with Elixir 1.17.2 (compiled with Erlang/OTP 27).</p> <h2 id="current-phxnew">Current phx.new</h2> <p>You can install phx.new using mix:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ mix archive.install hex phx_new
Resolving Hex dependencies...
Resolution completed in 0.007s
New:
  phx_new 1.7.20
* Getting phx_new (Hex package)
All dependencies are up to date
Compiling 11 files (.ex)
Generated phx_new app
Generated archive "phx_new-1.7.20.ez" with MIX_ENV=prod
</code></pre></div></div> <p>If there is a current version installed you’ll be asked if you wish to overwrite it.</p> <h2 id="generating-an-api-only-service">Generating an API only service</h2> <p>If you are writing a service to provide a JSON API then you can leave out support for HTML, JS, mailer and esbuild.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mix phx.new --no-html --no-live --no-tailwind --no-esbuild --no-mailer bureau
* creating bureau/lib/bureau/application.ex
* creating bureau/lib/bureau.ex
* creating bureau/lib/bureau_web/controllers/error_json.ex
* creating bureau/lib/bureau_web/endpoint.ex
* creating bureau/lib/bureau_web/router.ex
* creating bureau/lib/bureau_web/telemetry.ex
* creating bureau/lib/bureau_web.ex
* creating bureau/mix.exs
* creating bureau/README.md
* creating bureau/.formatter.exs
* creating bureau/.gitignore
* creating bureau/test/support/conn_case.ex
* creating bureau/test/test_helper.exs
* creating bureau/test/bureau_web/controllers/error_json_test.exs
* creating bureau/lib/bureau/repo.ex
* creating bureau/priv/repo/migrations/.formatter.exs
* creating bureau/priv/repo/seeds.exs
* creating bureau/test/support/data_case.ex
* creating bureau/lib/bureau_web/gettext.ex
* creating bureau/priv/gettext/en/LC_MESSAGES/errors.po
* creating bureau/priv/gettext/errors.pot
* creating bureau/priv/static/robots.txt
* creating bureau/priv/static/favicon.ico

Fetch and install dependencies? [Yn] Y
* running mix deps.get
* running mix deps.compile
</code></pre></div></div> <h2 id="dependencies-for-new-api-only-service">Dependencies for new API only service</h2> <p>If you open up the top-level mix.exs file you can see the dependencies that are setup on a brand new project:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp deps do
    [
      {:phoenix, "~&gt; 1.7.20"},
      {:phoenix_ecto, "~&gt; 4.5"},
      {:ecto_sql, "~&gt; 3.10"},
      {:postgrex, "&gt;= 0.0.0"},
      {:phoenix_live_dashboard, "~&gt; 0.8.3"},
      {:telemetry_metrics, "~&gt; 1.0"},
      {:telemetry_poller, "~&gt; 1.0"},
      {:gettext, "~&gt; 0.26"},
      {:jason, "~&gt; 1.2"},
      {:dns_cluster, "~&gt; 0.1.1"},
      {:bandit, "~&gt; 1.5"}
    ]
  end
</code></pre></div></div> <p>A couple of new things you might notice if you haven’t done this in a while:</p> <ul> <li>the generation automatically included two telemetry related libraries: telemetry_metrics and telemetry_poller.</li> <li>instead of using cowboy as the HTTP server Phoenix now uses Bandit.</li> <li>there’s a dependency on dns_cluster that is a fairly recent addition</li> </ul> <p>Ecto and the Postgres library (postgrex), jason and phoenix should be very familiar to you. The phoenix_live_dashboard has also been included in the generated code for quite a while.</p> <h2 id="aliases">aliases</h2> <p>The aliases function in the top level mix.exs file has been modified over time. It might look somewhat different than what you saw when you last generated it. But chances are it’s pretty familiar looking.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp aliases do
    [
      setup: ["deps.get", "ecto.setup"],
      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
      "ecto.reset": ["ecto.drop", "ecto.setup"],
      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
    ]
  end
</code></pre></div></div> <h2 id="checking-dependencies">Checking Dependencies</h2> <p>One of the first things I’d advise you to do it run <code class="language-plaintext highlighter-rouge">mix hex.outdated</code> on the project. This ensures that the template that was used to generate the Phoenix project used the latest versions of each of the libraries.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mix hex.outdated
Dependency              Current  Latest  Status
bandit                  1.6.7    1.6.7   Up-to-date
dns_cluster             0.1.3    0.1.3   Up-to-date
ecto_sql                3.12.1   3.12.1  Up-to-date
gettext                 0.26.2   0.26.2  Up-to-date
jason                   1.4.4    1.4.4   Up-to-date
phoenix                 1.7.20   1.7.20  Up-to-date
phoenix_ecto            4.6.3    4.6.3   Up-to-date
phoenix_live_dashboard  0.8.6    0.8.6   Up-to-date
postgrex                0.20.0   0.20.0  Up-to-date
telemetry_metrics       1.1.0    1.1.0   Up-to-date
telemetry_poller        1.1.0    1.1.0   Up-to-date
</code></pre></div></div> <p>So, as of today, this looks good. All the dependencies are “Up-to-date”.</p> <h2 id="examining-the-new-things">Examining the New Things</h2> <p>The “new” things I noted are:</p> <ul> <li>the generation automatically included two telemetry related libraries: telemetry_metrics and telemetry_poller.</li> <li>instead of using cowboy as the HTTP server Phoenix now uses Bandit.</li> <li>there’s a dependency on dns_cluster that is a fairly recent addition</li> </ul> <p>Let’s examine how those are being used and think about whether we need to modify any existing apps that we have to include the functionality that they bring.</p> <h2 id="telemetry_metrics-and-telemetry_poller">telemetry_metrics and telemetry_poller</h2> <p>These are libraries that you may already be using. Perhaps you are using something that wraps them instead.</p> <p>At the lowest level (that you’re apt to deal with as an Elixir developer) is the telemetry library. This library allows code that you write as part of an application and libraries that you use to generate events. It provides a common means of communicating measurement information.</p> <p>The telemetry_metrics library is written in Elixir. The telemetry_metrics library “provides a common interface for defining metrics based on :telemetry events. These metrics can then be published to different backends using our Reporters API”. This is the key thing for the library. It tries to normalize telemetry events by allowing the developer to describe what they are (counter? last_value?) and the expectations for a Reporter that will send those events on to an external system. Note that no external system is required. The library has a <code class="language-plaintext highlighter-rouge">Telemetry.Metrics.ConsoleReporter</code> that is a useful way of debugging the information provided (measurements and metadata) when events are generated.</p> <p>The telemetry_poller library is written in Erlang. It allows an app to “periodically collect measurements and dispatch them as Telemetry events”. The library itself starts a telemetry_poller to periodically gather VM statistics (memory used, processes, run queues, etc) and send them to the telemetry system. The app can define its own telemetry_poller with its own events of interest. The library documentation describes how this is done.</p> <p>The reason to have a telemetry poller is that there is no “triggering event” to generate the metric, A poller is needed to gather the metrics.</p> <p>If you look at the generated code in the web directory you’ll see there is a file called “telemetry.ex”.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defmodule BureauWeb.Telemetry do
  use Supervisor
  import Telemetry.Metrics

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  @impl true
  def init(_arg) do
    children = [
      # Telemetry poller will execute the given period measurements
      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics
      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}
      # Add reporters as children of your supervision tree.
      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end

  def metrics do
    [
      # Phoenix Metrics
      summary("phoenix.endpoint.start.system_time",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.endpoint.stop.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.start.system_time",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.exception.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.stop.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.socket_connected.duration",
        unit: {:native, :millisecond}
      ),
      sum("phoenix.socket_drain.count"),
      summary("phoenix.channel_joined.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_handled_in.duration",
        tags: [:event],
        unit: {:native, :millisecond}
      ),

      # Database Metrics
      summary("bureau.repo.query.total_time",
        unit: {:native, :millisecond},
        description: "The sum of the other measurements"
      ),
      summary("bureau.repo.query.decode_time",
        unit: {:native, :millisecond},
        description: "The time spent decoding the data received from the database"
      ),
      summary("bureau.repo.query.query_time",
        unit: {:native, :millisecond},
        description: "The time spent executing the query"
      ),
      summary("bureau.repo.query.queue_time",
        unit: {:native, :millisecond},
        description: "The time spent waiting for a database connection"
      ),
      summary("bureau.repo.query.idle_time",
        unit: {:native, :millisecond},
        description:
          "The time the connection spent waiting before being checked out for the query"
      ),

      # VM Metrics
      summary("vm.memory.total", unit: {:byte, :kilobyte}),
      summary("vm.total_run_queue_lengths.total"),
      summary("vm.total_run_queue_lengths.cpu"),
      summary("vm.total_run_queue_lengths.io")
    ]
  end

  defp periodic_measurements do
    [
      # A module, function and arguments to be invoked periodically.
      # This function must call :telemetry.execute/3 and a metric must be added above.
      # {BureauWeb, :count_users, []}
    ]
  end
end
</code></pre></div></div> <p>BureauWeb.Telemetry is a Supervisor. It starts the GenServer <code class="language-plaintext highlighter-rouge">:telemetry_poller</code> that is in the telemetry_poller library. That GenServer gets passed whatever metrics are returned by the <code class="language-plaintext highlighter-rouge">periodic_measurements/0</code> function. By default this is an empty list. So no periodic measurements are reported. The process is started and does nothing.</p> <p>A second GenServer is commented out:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
</code></pre></div></div> <p>This used a module in the telemetry library to report the metrics returned by the <code class="language-plaintext highlighter-rouge">metrics/0</code> function to the console.</p> <p>See the post on <a href="https://fmcgeough.github.io/blog/2024/ecto-telemetry/">Elixir and Ecto’s Telemetry Events</a> for more information.</p> <h2 id="bandit">bandit</h2> <p>If you’ve programmed with Phoenix for a while then you are used to seeing the cowboy library in the list of dependencies. Bandit’s HTTP/1.x engine is up to 4x faster than Cowboy depending on the number of concurrent requests. When comparing HTTP/2 performance, Bandit is up to 1.5x faster than Cowboy. Work was done to make the bandit library a drop-in replacement for cowboy. For a period of time you had to specify you wanted to use bandit when generating a Phoenix app. At this point bandit is the default.</p> <p>Bandit is written in Elixir. It’s a good project to look at because the code is clean and can be understood by app developers. This was not the case with cowboy.</p> <h2 id="dns_cluster">dns_cluster</h2> <p>This was introduced to Elixir/Phoenix to allow Phoenix apps to setup DNS clustering out of the box. If you aren’t using this you can remove it from your project.</p> <p>For more information on this look up Chris McCord’s Elixir Conference 2023 talk.</p> <h2 id="see-the-telemetry-working">See the telemetry working</h2> <p>If you want to see telemetry info in your app you can uncomment out the line <code class="language-plaintext highlighter-rouge">{Telemetry.Metrics.ConsoleReporter, metrics: metrics()}</code> in telemetry.ex. Then when you run your app locally you’ll see something like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Telemetry.Metrics.ConsoleReporter] Got new event!
Event name: vm.memory
All measurements: %{atom: 909553, atom_used: 885163, binary: 4214448, code: 15564055, ets: 1510568, processes: 21976920, processes_used: 21968208, system: 56001457, total: 77978377}
All metadata: %{}

Metric measurement: :total [via #Function&lt;5.16980591/1 in Telemetry.Metrics.maybe_convert_measurement/2&gt;] (summary)
With value: 77978.37700000001 kilobyte
Tag values: %{}

[Telemetry.Metrics.ConsoleReporter] Got new event!
Event name: vm.total_run_queue_lengths
All measurements: %{cpu: 1, io: 0, total: 1}
All metadata: %{}

Metric measurement: :total (summary)
With value: 1
Tag values: %{}

Metric measurement: :cpu (summary)
With value: 1
Tag values: %{}

Metric measurement: :io (summary)
With value: 0
Tag values: %{}
</code></pre></div></div> <h2 id="summary">Summary</h2> <p>Periodically get the latest phx.new and generate a new app to see changes that have occurred since you ran it (possibly many years prior). See what you might want to change in your app to align with the current way of creating a Phoenix app.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Latest Phoenix and mix phx.new]]></summary></entry><entry><title type="html">Library Resources</title><link href="https://fmcgeough.github.io/blog/2025/electronic-reading/" rel="alternate" type="text/html" title="Library Resources"/><published>2025-02-25T00:00:00+00:00</published><updated>2025-02-25T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/electronic-reading</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/electronic-reading/"><![CDATA[<h2 id="overview">Overview</h2> <p>Some helpful hints on using your local library. My local library is in Dekalb County, Georgia. Some of the rules on the apps referenced below are different in other areas.</p> <h2 id="get-a-library-card">Get a Library Card</h2> <p>If you do not have a library card then take 10 minutes out of your day and go into library and get one. It’s a straightforward process. They just want to know that you live in the area (county ordinarily) that the library serves.</p> <p>Library cards have an ID. That’s a string of 14-15 digits (ordinarily). And you’ll have a passcode tied to that ID.</p> <h2 id="download-libby">Download Libby</h2> <p>The <a href="https://libbyapp.com/interview/welcome#doYouHaveACard">Libby app</a> runs on iPhones, iPads, Android devices, etc. The app gets tied to your library card and then you can borrow eBooks, audio books and magazines. There is no limit on the number of items you can have checked out with the Libby app. The terms may be different depending on where you live. In our area you can check out a book for 3 weeks, put a book on hold, and renew a book (if no one else is waiting for it).</p> <p>You can read on a Kindle or Kindle app or within the Libby app itself. If you use the Kindle approach then you’ll use Amazon to return a book early. Otherwise it’s all done in the Libby app.</p> <p>Only a certain number of people can be reading or listening to a book at a time. So, just like with a physical book, you might have to wait a while to get the book you want.</p> <h2 id="download-kanopy">Download Kanopy</h2> <p>I installed <a href="https://www.kanopy.com/en">Kanopy</a> on our Samsung TV and on our Apple TV box. This allows you to watch movies and tv series available through the library. The catalog includes a lot of classic films, documentaries and award winning foreign films.</p> <p>Kanopy works off a credit system (in our area anyway). You get a certain number of credits per month and you can “check out” a movie or series until you run out of credits. Then you have to wait until the next month.</p> <p>Unlike Libby there is no limit on the number of people who can be watching a movie or tv series at the same time. The limit is on the total amount of content.</p> <h2 id="download-hoopla">Download Hoopla</h2> <p>The <a href="https://www.hoopladigital.com/">Hoopla App</a> is an alternative or addition to Libby / Kanopy. With Hoopla you are given credits like Kanopy. Once you’ve associated your Hoopla account with your library card you can enjoy audiobooks, eBooks, comics, movies, TV, magazines, or music from your computer, your phone, your car, even your TV.</p> <p>Unlike Libby there is no limit on the number of people who can be reading (or listening) to a book at the same time. The limit is on the total amount of content.</p> <h2 id="use-on-hold">Use On Hold</h2> <p>If you want to read a physical book then use your library’s online system to put books on hold. In the library system I use you can put up to 15 books on hold. You can schedule when you’d like to be put on hold for a book. Your library sends an email notification when a book is available.</p>]]></content><author><name></name></author><category term="reading"/><summary type="html"><![CDATA[Your Library and Its Resources]]></summary></entry><entry><title type="html">Recent Books</title><link href="https://fmcgeough.github.io/blog/2025/reading/" rel="alternate" type="text/html" title="Recent Books"/><published>2025-02-23T00:00:00+00:00</published><updated>2025-02-23T00:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2025/reading</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2025/reading/"><![CDATA[<h2 id="to-the-list">To the list</h2> <p>This is a list of books I’ve read so far in 2025.</p> <ul> <li>Small Favor (The Dresden Files, #10) by Jim Butcher</li> <li>Deep Storm (Jeremy Logan, #1) by Lincoln Child</li> <li>Karla’s Choice: A John le Carré Novel by Nick Harkaway</li> <li>Out of Sight (Jack Foley, #1) by Elmore Leonard</li> <li>Essentialism: The Disciplined Pursuit of Less by Greg McKeown</li> <li>City Primeval by Elmore Leonard</li> <li>The Contortionist’s Handbook by Craig Clevenger</li> <li>The Bright Sword by Lev Grossman</li> <li>When the Women Come Out to Dance by Elmore Leonard</li> <li>The Infernal Machine: A True Story of Dynamite, Terror and the Rise of the Modern Detective by Steven Johnson</li> <li>The Lost Tomb: And Other Real-Life Stories of Bones, Burials and Murder by Douglas Preston</li> <li>The Waiting (Renée Ballard, #6, Harry Bosch, #25) by Michael Connelly</li> <li>Jayber Crow by Wendell Berry</li> <li>The Future by Naomi Alderman</li> <li>This Strange Eventful History by Claire Messud</li> <li>In Too Deep (Jack Reacher #29) by Lee Child</li> <li>Faceless Killers (Kurt Wallander, #1) by Henning Mankell</li> <li>Amped by Daniel H Wilson</li> <li>The Black Echo (Harry Bosch #1)</li> <li>Toxic Prey (Lucas Davenport #34, Letty Davenport, #3) by John Sandford</li> </ul> <p>Out of that I made some notes on what I liked. A number of the books in the list I just read because I was up late and they were available from the library.</p> <h3 id="nick-harkaway">Nick Harkaway</h3> <ul> <li>Karla’s Choice: A John le Carré Novel by Nick Harkaway.</li> </ul> <p>Nick Harkaway is the pen name of Nicholas Cornwall. He is the son of the novelist David Cornwall who wrote his spy novels under the name John le Carré. le Carre’s most famous character is George Smiley. This novel by Harkaway is the first continuation of Smiley after le Carre’s death.</p> <p>It’s well done. I thought the tone and pacing matched how his father had written the spy novels.</p> <h3 id="elmore-leonard">Elmore Leonard</h3> <ul> <li>Out of Sight (Jack Foley, #1) by Elmore Leonard</li> <li>City Primeval by Elmore Leonard</li> <li>When the Women Come Out to Dance by Elmore Leonard</li> </ul> <p>I enjoy Elmore Leonard’s writing.</p> <h3 id="the-contortionists-handbook">The Contortionist’s Handbook</h3> <ul> <li>The Contortionist’s Handbook by Craig Clevenger</li> </ul> <p>This book was one of the more interesting I’ve read in a while. It’s reminiscent of Fight Club by Chuck Palahniuk. It’s got a narrator whose continued weaving of self-created lives with different names and different backgrounds left him not quite sure what was left of him.</p> <h3 id="the-infernal-machine">The Infernal Machine</h3> <ul> <li>The Infernal Machine: A True Story of Dynamite, Terror and the Rise of the Modern Detective by Steven Johnson</li> </ul> <p>Interesting American history. The rise of anarchist movement at the same time as the mass availability of dynamite led to thousands of bombings (or attempted bombings). This period of time was quite cruel for workers. Many more people died in factories than were ever killed by the anarchist’s bombs. But the threat of dynamite led the US to develop its first science based approach to crime (as opposed to simply beating the crap out of a suspect until they confessed).</p> <h3 id="jayber-crow">Jayber Crow</h3> <ul> <li>Jayber Crow by Wendell Berry</li> </ul> <p>The search for meaning in rural Kentucky through the 1900s.</p> <h3 id="the-future">The Future</h3> <ul> <li>The Future by Naomi Alderman</li> </ul> <p>Novel that follows her speculative science fiction novel The Power. Billionaires lead the world to destruction.</p> <h3 id="faceless-killers">Faceless Killers</h3> <ul> <li>Faceless Killers (Kurt Wallander, #1) by Henning Mankell</li> </ul> <p>Wallander is a British television series broadcast from 2008 to 2016. I really enjoyed the series. It was amazing. So I decided to read the books.</p>]]></content><author><name></name></author><category term="reading"/><summary type="html"><![CDATA[List of books I've read so far in 2025]]></summary></entry><entry><title type="html">Good Elixir Documentation - Ecto Library</title><link href="https://fmcgeough.github.io/blog/2024/good-elixir-doc-ecto/" rel="alternate" type="text/html" title="Good Elixir Documentation - Ecto Library"/><published>2024-10-18T09:00:00+00:00</published><updated>2024-10-18T09:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/good-elixir-doc-ecto</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/good-elixir-doc-ecto/"><![CDATA[<p>This is a continuation of my blog post on <a href="https://fmcgeough.github.io/blog/2024/using-elixir-doc/">Elixir and Documentation</a>. I wanted to go over some of the projects that I think have very good documentation. When you are writing your own doc it’s helpful to have good examples to work from. The one that I’m writing about first is Ecto. <em>Note: the Elixir language documentation is also a great resource</em>.</p> <p>The <a href="https://hexdocs.pm/ecto/Ecto.html">ecto library</a> is the relational database library used in Elixir. The doc it generates has some interesting features. There are 3 tabs in the Navigation:</p> <ul> <li>Guides</li> <li>Modules</li> <li>Mix Tasks</li> </ul> <h2 id="guides">Guides</h2> <p>The guides section contains an Introduction section that explains the basics of how to use Ecto and how to do unit testing with Ecto. It has Cheatsheets for basic Ecto related operations and for how to handle table associations. A final section of How-To’s covers a range of topics in more detail.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-guides.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Guides </div> <h2 id="modules">Modules</h2> <p>The modules section has the documentation for modules and their functions. It also covers Types and Exceptions. The modules are actually broken into logical areas of functionality:</p> <ul> <li>Query APIS</li> <li>Adapter Specification</li> <li>Relation Structs</li> <li>Exceptions</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-modules.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Modules </div> <h2 id="mix-tasks">Mix Tasks</h2> <p>There are important mix tasks associated with Ecto that allow a developer to create, migrate or drop a database. There is also a task to generate code related to an Ecto Repo module.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-mix-tasks.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Mix Tasks </div> <h2 id="ecto-mixexs">Ecto mix.exs</h2> <p>The Ecto mix.exs file has a lot of lines related to documentation. Since it’s a lot of lines I’ll break it into sections.</p> <h2 id="the-project-function">the project function</h2> <p>The ex_doc library reads the project data <code class="language-plaintext highlighter-rouge">:name</code> and <code class="language-plaintext highlighter-rouge">:docs</code> values. Using a function to define the data for <code class="language-plaintext highlighter-rouge">:docs</code> is how projects generally define documentation data in mix.exs. It’s overwhelming if all the <code class="language-plaintext highlighter-rouge">:docs</code> lines are part of the project function.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  def project do
    [
      app: :ecto,
      version: @version,
      elixir: "~&gt; 1.11",
      deps: deps(),
      consolidate_protocols: Mix.env() != :test,
      elixirc_paths: elixirc_paths(Mix.env()),

      # Hex
      description: "A toolkit for data mapping and language integrated query for Elixir",
      package: package(),

      # Docs
      name: "Ecto",
      docs: docs()
    ]
  end
</code></pre></div></div> <h2 id="docs-elements">docs elements</h2> <p>The elements that can be used in <code class="language-plaintext highlighter-rouge">:docs</code> are documented in the <a href="https://hexdocs.pm/ex_doc/Mix.Tasks.Docs.html">ex_doc Mix Tasks</a>. An abbreviated version is shown below:</p> <ul> <li>:annotations_for_docs - a function that receives metadata and returns a list of annotations to be added to the signature.</li> <li>:api_reference - Whether to generate api-reference.html; default: true. If this is set to false, :main must also be set.</li> <li>:assets - A map of source =&gt; target directories that will be copied as is to the output path. It defaults to an empty map.</li> <li>:authors - List of authors for the generated docs or epub.</li> <li>:before_closing_body_tag - a function that takes as argument an atom specifying the formatter being used (:html or :epub) and returns a literal HTML string to be included just before the closing body tag (&lt;/body&gt;).</li> <li>:before_closing_head_tag - a function that takes as argument an atom specifying the formatter being used (:html or :epub) and returns a literal HTML string to be included just before the closing head tag (&lt;/head&gt;). The atom given as argument can be used to include different content in both formats. Useful to inject custom assets, such as CSS stylesheets.</li> <li>:before_closing_footer_tag - a function that takes as argument an atom specifying the formatter being used (:html) and returns a literal HTML string to be included just before the closing footer tag (&lt;/footer&gt;).</li> <li>:canonical - String that defines the preferred URL with the rel=”canonical” element; defaults to no canonical path.</li> <li>:cover - Path to the epub cover image (only PNG or JPEG accepted) The image size should be around 1600x2400.</li> <li>:deps - A keyword list application names and their documentation URL. ExDoc will by default include all dependencies and assume they are hosted on HexDocs. This can be overridden by your own values. Example: <code class="language-plaintext highlighter-rouge">[plug: "https://myserver/plug/"]</code></li> <li>:extra_section - String that defines the section title of the additional Markdown and plain text pages; default: “PAGES”. Example: “GUIDES”</li> <li>:extras - List of paths to additional Markdown (.md extension), Live Markdown (.livemd extension), Cheatsheets (.cheatmd extension) and plain text pages to add to the documentation.</li> <li>:filter_modules - Include only modules that match the given value. The value can be a regex, a string (representing a regex), or a two-arity function that receives the module and its metadata and returns true if the module must be included. If a string or a regex is given, it will be matched against the complete module name (which includes the “Elixir.” prefix for Elixir modules). If a module has @moduledoc false, then it is always excluded.</li> <li>:formatters - Formatter to use; default: [“html”, “epub”], options: “html”, “epub”.</li> <li>:groups_for_extras, :groups_for_modules, :groups_for_docs - See the “Groups” section</li> <li>:ignore_apps - Apps to be ignored when generating documentation in an umbrella project. Receives a list of atoms. Example: [:first_app, :second_app].</li> <li>:language - Identify the primary language of the documents, its value must be a valid BCP 47 language tag; default: “en”</li> <li>:logo - Path to a logo image file for the project. Must be PNG, JPEG or SVG.</li> <li>:main - Main page of the documentation. It may be a module or a generated page, like “Plug” or “api-reference”; default: “api-reference”.</li> <li>:markdown_processor - The markdown processor to use, either module() or {module(), keyword()} to provide configuration options;</li> <li>:meta - A keyword list or a map to specify meta tag attributes</li> <li>:nest_modules_by_prefix - See the “Nesting” section</li> <li>:output - Output directory for the generated docs; default: “doc”. May be overridden by command line argument.</li> <li>:skip_undefined_reference_warnings_on - ExDoc warns when it can’t create a Mod.fun/arity reference in the current project docs e.g. because of a typo. This list controls where to skip the warnings, for a given module/function/callback/type (e.g.: [“Foo”, “Bar.baz/0”]) or on a given file (e.g.: [“pages/deprecations.md”]).</li> <li>:skip_code_autolink_to - Similar to :skip_undefined_reference_warnings_on, this option controls which terms will be skipped by ExDoc when building documentation.</li> <li>:source_beam - Path to the beam directory; default: mix’s compile path.</li> <li>:source_ref - The branch/commit/tag used for source link inference; default: “main”.</li> <li>:source_url_pattern - Public URL of the project for source links.</li> </ul> <h2 id="the-docs-function">the docs function</h2> <p>Ecto defines an extensive <code class="language-plaintext highlighter-rouge">:docs</code> element. It uses almost every available option in ex_doc. One thing it does not override is <code class="language-plaintext highlighter-rouge">:output</code> (by default this is the <code class="language-plaintext highlighter-rouge">./doc</code> directory). Notice that the version and source_url are set using module attributes (<code class="language-plaintext highlighter-rouge">@version</code> and <code class="language-plaintext highlighter-rouge">@source_url</code>). This is a good practice (especially for a library) since those values are useful elsewhere in mix.exs. The <code class="language-plaintext highlighter-rouge">@version</code> attribute is used in the project and the <code class="language-plaintext highlighter-rouge">@source_url</code> is used in the package function.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp docs do
    [
      main: "Ecto",
      source_ref: "v#{@version}",
      logo: "guides/images/e.png",
      extra_section: "GUIDES",
      source_url: @source_url,
      skip_undefined_reference_warnings_on: ["CHANGELOG.md"],
      extras: extras(),
      groups_for_extras: groups_for_extras(),
      groups_for_docs: [
        group_for_function("Query API"),
        group_for_function("Schema API"),
        group_for_function("Transaction API"),
        group_for_function("Process API"),
        group_for_function("Config API"),
        group_for_function("User callbacks")
      ],
      groups_for_modules: [
        Types: [
          Ecto.Enum,
          Ecto.ParameterizedType,
          Ecto.Type,
          Ecto.UUID
        ],
        "Query APIs": [
          Ecto.Query.API,
          Ecto.Query.WindowAPI,
          Ecto.Queryable,
          Ecto.SubQuery
        ],
        "Adapter specification": [
          Ecto.Adapter,
          Ecto.Adapter.Queryable,
          Ecto.Adapter.Schema,
          Ecto.Adapter.Storage,
          Ecto.Adapter.Transaction
        ],
        "Relation structs": [
          Ecto.Association.BelongsTo,
          Ecto.Association.Has,
          Ecto.Association.HasThrough,
          Ecto.Association.ManyToMany,
          Ecto.Association.NotLoaded,
          Ecto.Embedded
        ]
      ],
      before_closing_body_tag: fn
        :html -&gt;
          """
          &lt;script src="https://cdn.jsdelivr.net/npm/mermaid@10.2.3/dist/mermaid.min.js"&gt;&lt;/script&gt;
          &lt;script&gt;
            document.addEventListener("DOMContentLoaded", function () {
              mermaid.initialize({
                startOnLoad: false,
                theme: document.body.className.includes("dark") ? "dark" : "default"
              });
              let id = 0;
              for (const codeEl of document.querySelectorAll("pre code.mermaid")) {
                const preEl = codeEl.parentElement;
                const graphDefinition = codeEl.textContent;
                const graphEl = document.createElement("div");
                const graphId = "mermaid-graph-" + id++;
                mermaid.render(graphId, graphDefinition).then(({svg, bindFunctions}) =&gt; {
                  graphEl.innerHTML = svg;
                  bindFunctions?.(graphEl);
                  preEl.insertAdjacentElement("afterend", graphEl);
                  preEl.remove();
                });
              }
            });
          &lt;/script&gt;
          """

        _ -&gt;
          ""
      end
    ]
  end
</code></pre></div></div> <h2 id="skip_undefined_reference_warnings_on">skip_undefined_reference_warnings_on</h2> <p>The defined value for <code class="language-plaintext highlighter-rouge">:skip_undefined_reference_warnings_on</code> is set to <code class="language-plaintext highlighter-rouge">["CHANGELOG.md"]</code>. This makes sense. There may be situations where a module or type is removed from the code base. This will be noted in the CHANGELOG but if it is and we don’t set that file in the <code class="language-plaintext highlighter-rouge">:skip_undefined_reference_warnings_on</code> list then warnings are generated.</p> <h2 id="using-extras-function">using extras function</h2> <p>The ex_doc library describes how to use both <code class="language-plaintext highlighter-rouge">:extras</code> and <code class="language-plaintext highlighter-rouge">groups_for_extras</code>. These value are used to by Ecto to provide useful information under the “GUIDES” tab. Ecto uses this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  extras: extras(),
  groups_for_extras: groups_for_extras(),
</code></pre></div></div> <p>This defines both of those values for the two keys with whatever is returned by those functions.</p> <h2 id="the-extras">the extras</h2> <p>Any files that you want to include in your doc that are not in modules must be listed under <code class="language-plaintext highlighter-rouge">:extras</code>. For Ecto this is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  def extras() do
    [
      "guides/introduction/Getting Started.md",
      "guides/introduction/Embedded Schemas.md",
      "guides/introduction/Testing with Ecto.md",
      "guides/howtos/Aggregates and subqueries.md",
      "guides/howtos/Composable transactions with Multi.md",
      "guides/howtos/Constraints and Upserts.md",
      "guides/howtos/Data mapping and validation.md",
      "guides/howtos/Dynamic queries.md",
      "guides/howtos/Multi tenancy with query prefixes.md",
      "guides/howtos/Multi tenancy with foreign keys.md",
      "guides/howtos/Self-referencing many to many.md",
      "guides/howtos/Polymorphic associations with many to many.md",
      "guides/howtos/Replicas and dynamic repositories.md",
      "guides/howtos/Schemaless queries.md",
      "guides/howtos/Test factories.md",
      "guides/cheatsheets/crud.cheatmd",
      "guides/cheatsheets/associations.cheatmd",
      "CHANGELOG.md"
    ]
  end
</code></pre></div></div> <p>Notice how all the “extra” doc is under the “guides” directory. The sections are separate directories under “guides”. That is, “introduction”, “howtos” and “cheatsheets”. The CHANGELOG.md is also listed here since Ecto wants that included in the generated documentation.</p> <h2 id="ecto-mixexs---groups_for_extras">Ecto mix.exs - groups_for_extras</h2> <p>In the generated Ecto doc under “GUIDES” there are sections:</p> <ul> <li>“INTRODUCTION”</li> <li>“CHEATSHEETS”</li> <li>“HOW-TO’S”</li> </ul> <p>These are generated using <code class="language-plaintext highlighter-rouge">:groups_for_extras</code>. Ecto defines the value for this in the mix.exs as:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp groups_for_extras do
    [
      Introduction: ~r/guides\/introduction\/.?/,
      Cheatsheets: ~r/cheatsheets\/.?/,
      "How-To's": ~r/guides\/howtos\/.?/
    ]
  end
</code></pre></div></div> <p>Here, Ecto is using a regex to match the files in the guides subdirectories. The key in the returned Keyword list becomes the section title.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-17-ecto-guides.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto Guides </div> <h2 id="using-groups">using Groups</h2> <p>The ex_doc library describes <a href="https://hexdocs.pm/ex_doc/Mix.Tasks.Docs.html#module-groups">how to use the various Groups functions</a> in it’s documentation.</p> <h2 id="groups_for_docs">groups_for_docs</h2> <p>There is a defined value for <code class="language-plaintext highlighter-rouge">:groups_for_docs</code> that sets of six groups.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  group_for_function("Query API"),
  group_for_function("Schema API"),
  group_for_function("Transaction API"),
  group_for_function("Process API"),
  group_for_function("Config API"),
  group_for_function("User callbacks")
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">group_for_function/1</code> function is:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defp group_for_function(group), do: {String.to_atom(group), &amp;(&amp;1[:group] == group)}
</code></pre></div></div> <p>This may look a bit odd if you haven’t used it before. What it’s doing is allowing any documented function to declare a doc group. If that is found then the function becomes part of that named group. In the case of Ecto the <code class="language-plaintext highlighter-rouge">:groups_for_docs</code> value is being used to help organize the functions under <code class="language-plaintext highlighter-rouge">Ecto.Repo</code> (which has a particularly wide API). For example, the <code class="language-plaintext highlighter-rouge">get/2</code> callback in Repo:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  @doc group: "Query API"
  @callback get(
    queryable :: Ecto.Queryable.t(),
    id :: term, opts :: Keyword.t()
  ) :: Ecto.Schema.t() | term | nil
</code></pre></div></div> <p>If you look at the <code class="language-plaintext highlighter-rouge">Ecto.Repo</code> doc navigation you’ll see:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-18-ecto-repo-groups.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Ecto.Repo Function Grouping </div> <h2 id="groups_for_modules">groups_for_modules</h2> <p>There is a defined value for <code class="language-plaintext highlighter-rouge">:groups_for_modules</code>. This value allows you to logically group the modules in your project doc. This shows up in the “Modules” tab of the generated doc. For Ecto the groups are:</p> <ul> <li>Types</li> <li>Query APIs</li> <li>Adapter specification</li> <li>Relation structs</li> </ul> <p>You can use a regex when specifying what modules belong to a group. However, for the Ecto doc the modules are provided as a list. If you can use a regex here you should. A regex is effective if your modules are stored in subdirectories that match your group naming.</p> <p>If a module does not match any file in <code class="language-plaintext highlighter-rouge">:groups_for_modules</code> (and that module does not have a <code class="language-plaintext highlighter-rouge">@moduledoc false</code>) then the module shows up at the top of the “Modules”. For Ecto this is <code class="language-plaintext highlighter-rouge">Ecto</code>, <code class="language-plaintext highlighter-rouge">Ecto.Changeset</code>, <code class="language-plaintext highlighter-rouge">Ecto.Multi</code>, <code class="language-plaintext highlighter-rouge">Ecto.Query</code>, <code class="language-plaintext highlighter-rouge">Ecto.Repo</code>, <code class="language-plaintext highlighter-rouge">Ecto.Schema</code>, <code class="language-plaintext highlighter-rouge">Ecto.Schema.Metadata</code> and <code class="language-plaintext highlighter-rouge">Mix.Ecto</code> (as of version 3.12.4).</p> <h2 id="before_closing_body_tag">before_closing_body_tag</h2> <p>There is a defined value for <code class="language-plaintext highlighter-rouge">:before_closing_body_tag</code>. This defines Javascript used to allow <a href="https://mermaid.js.org/">mermaid.js</a> to work in the generated documentation. A mermaid generated diagram is available for the type <a href="https://hexdocs.pm/ecto/Ecto.Type.html">Ecto.Type</a>.</p> <p>This code could be copied into your own project if you wish to use mermaid generated diagrams in your doc.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      before_closing_body_tag: fn
        :html -&gt;
          """
          &lt;script src="https://cdn.jsdelivr.net/npm/mermaid@10.2.3/dist/mermaid.min.js"&gt;&lt;/script&gt;
          &lt;script&gt;
            document.addEventListener("DOMContentLoaded", function () {
              mermaid.initialize({
                startOnLoad: false,
                theme: document.body.className.includes("dark") ? "dark" : "default"
              });
              let id = 0;
              for (const codeEl of document.querySelectorAll("pre code.mermaid")) {
                const preEl = codeEl.parentElement;
                const graphDefinition = codeEl.textContent;
                const graphEl = document.createElement("div");
                const graphId = "mermaid-graph-" + id++;
                mermaid.render(graphId, graphDefinition).then(({svg, bindFunctions}) =&gt; {
                  graphEl.innerHTML = svg;
                  bindFunctions?.(graphEl);
                  preEl.insertAdjacentElement("afterend", graphEl);
                  preEl.remove();
                });
              }
            });
          &lt;/script&gt;
          """

        _ -&gt;
          ""
      end
</code></pre></div></div> <h2 id="why-does-changelogmd-become-changelog-for-v3x">Why does CHANGELOG.md become Changelog for v3.x?</h2> <p>There is nothing in mix.exs indicating that ex_doc should change the name of CHANGELOG.md to the name that actually shows in the generated doc “Changelog for v3.x” so how is this accomplished? If you open CHANGELOG.md you can see where this is coming from.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Changelog for v3.x

## v3.12.4 (2024-10-07)

### Enhancements

  * [Ecto.Repo] Use `persistent_term` for faster repository lookup
  * [Ecto.Repo] Document new `:pool_count` option
etc, etc
</code></pre></div></div> <p>The top-level heading is being used by ex_doc as the name that shows up in the navigation.</p> <h2 id="what-about-mix-tasks">what about “Mix Tasks”?</h2> <p>There is a separate tab in navigation called “MIX TASKS”. Where did that come from? It’s not mentioned explicitly in the mix.exs file.</p> <p>The Ecto mix tasks are under <code class="language-plaintext highlighter-rouge">lib/mix/tasks</code>. The ex_doc library recognizes modules used for a Mix.Task as a “special” thing and puts the doc that is in the module into the tab. The code looks for any module that starts with <code class="language-plaintext highlighter-rouge">Elixir.Mix.Tasks.</code>. This is done with this code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  defp module_type_and_skip(module) do
    cond do
      function_exported?(module, :__struct__, 0) and
          match?(%{__exception__: true}, module.__struct__()) -&gt;
        {:exception, false}

      function_exported?(module, :__protocol__, 1) -&gt;
        {:protocol, false}

      function_exported?(module, :__impl__, 1) -&gt;
        {:impl, true}

      match?("Elixir.Mix.Tasks." &lt;&gt; _, Atom.to_string(module)) -&gt;
        {:task, false}

      function_exported?(module, :behaviour_info, 1) -&gt;
        {:behaviour, false}

      true -&gt;
        {:module, false}
    end
  end
</code></pre></div></div> <h2 id="wrap-up">Wrap Up</h2> <p>You can examine the <a href="https://github.com/elixir-ecto/ecto/blob/master/mix.exs">ex_doc mix.exs file</a>.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[How the Ecto Library Uses ex_doc to generate doc]]></summary></entry><entry><title type="html">Elixir and Documentation</title><link href="https://fmcgeough.github.io/blog/2024/using-elixir-doc/" rel="alternate" type="text/html" title="Elixir and Documentation"/><published>2024-10-16T10:00:00+00:00</published><updated>2024-10-16T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/using-elixir-doc</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/using-elixir-doc/"><![CDATA[<p>I started learning about Elixir in 2016. One of the first things that I liked about it was the good-looking documentation. Examining important modules like <a href="https://hexdocs.pm/elixir/Process.html">Process</a>, <a href="https://hexdocs.pm/elixir/GenServer.html">GenServer</a>, or <a href="https://hexdocs.pm/elixir/Enum.html">Enum</a> was a pleasure. There was a nice description of what the module provided and clear doc for each public function. The doc for functions would include example or explanatory code that was well formatted and easy to read.</p> <p>I thought I’d try and summarize what I liked about the Elixir doc system when I first encountered it. The images shown below are from recent doc but you can “time-travel” back to previous versions of Elixir doc by selecting a version from the navigation. I believe this was added around 2019 (Elixir version 1.8).</p> <h2 id="elixirs-doc-vs-javas-doc">Elixir’s Doc vs Java’s Doc</h2> <p>I think what I liked about what I saw (over Java and Javadoc that I was working with in 2016) was it appeared it was written to be read. A big part of that was the format and flow. For example, here’s the doc for Collections in Java JDK vs Enum in Elixir.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-java-collections.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Java Collections </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-elixir-enum.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Elixir Collections </div> <p>On the face of it these are presenting similar information. A name, a description, followed by different types of details. There’s navigation for both.</p> <p>The Java doc navigation shows the list of all packages in one frame and a list of all the available classes in the current package in another. The Elixir doc, on the other hand, has a tabbed navigation. One is “Modules” providing all the modules that are available in the library and other is “Pages”.</p> <p>The “Pages” tab has all sorts of goodies. It’s got:</p> <ul> <li>API Reference - has a list of linked modules with a single sentence description</li> <li>Changelog (for the version you are looking at)</li> <li>Getting Started - probably the biggest section in “Pages” with coverage of topics that don’t fit into doc for an individual module. These are general guides to language usage. For example, there’s a section on “Basic Types” and “Anonymous Functions”.</li> <li>Cheatsheets</li> <li>Anti-Patterns - this is relatively new list of things not to do</li> <li>Meta-Programming - one of Elixir’s strength’s is support for meta-programming. This allows developers to create DSL (Domain Specific Languages) that can simplify and clarify code</li> <li>Mix &amp; OTP - Mix is Elixir’s general purpose (and extensible) build tool. OTP is the system provided by the VM with core functionality and patterns that powers both Erlang and Elixir</li> <li>References - conventions, guidelines and more</li> </ul> <p>The Elixir “Modules” tab was highlighted when I got to Enum. Enum appears in the modules documentation with three subheadings: Summary, Types, Functions. This is providing navigation that isn’t available in Javadoc. You can expand the functions and click on any of them and the right-hand panel goes to the function and it’s doc.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-elixir-enum-nav-expanded.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Elixir Module Navigation </div> <p>The code parts of the doc in Elixir (@specs, Examples, etc) show with a grey background and in a non-serif font. The Javadoc just has the font change. I find the Elixir version easier to read.</p> <p>In both a function has a description. In Elixir this is broken into two pieces: a summary that appears first, followed by a break and then the actual description. In Javadoc the description is however many paragraphs of text are needed to describe the function. For example, for both a Java Collection and Enum there is a min function. For Elixir the description is “Returns the minimal element in the enumerable according to Erlang’s term ordering”. For Javadoc its “Returns the minimum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. Furthermore, all elements in the collection must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the collection)”.</p> <p>Both of these are providing useful information but it’s easy to see that the Elixir doc is an easier on-ramp to learning what the code provides. The Javadoc provides lots of useful information however it definitely reads like it was written by a lawyer. My preference is for the Elixir style.</p> <p>The Java doc appears crowded. There’s links everywhere. By contrast the Elixir doc is quite clean.</p> <h2 id="elixir-doc-vs-other-modern-languages">Elixir Doc vs Other Modern Languages</h2> <p>You might think that Elixir doc might be better but that’s because it was invented rather recently. However, it’s more than that. You can look at another couple of “recent” languages and see that their doc is not as clear and easy to use as Elixir. I’ll use Rust and Go.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-rust-collections.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Rust Collections </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-go-collections.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Go Collections </div> <p>I’m not saying these languages are not useful (by any stretch). They are both amazing languages. But their target audience seems to be quite different. And, in both cases, I think it’s fair to say that the doc is provided as a reference. That is, if you already know how everything works but need some piece of individual information then it’s useful. Trying to learn by looking at this doc is the wrong approach. There are quite good books and blog posts that can help in that regard.</p> <p>The ability to go to source code from documentation was something I was familiar with in Go before I ever looked at Elixir. I was happy that the Elixir creators added this capability. I find it quite useful.</p> <h2 id="iex-and-documentation">iex and Documentation</h2> <p>Elixir comes with a repl like Python or Ruby. The repl is called iex. When you are developing locally and using <a href="https://hexdocs.pm/iex/IEx.html">iex</a> you can access documentation. It does require that you “know” what you are looking for but provides a bit of help in that regard.</p> <p>As an example let’s look at DateTime. If you are using DateTime in the iex repl and forget what functions are available you can enter <code class="language-plaintext highlighter-rouge">DateTime.</code> and hit <code class="language-plaintext highlighter-rouge">&lt;tab&gt;</code>. All the functions are displayed.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-iex_module_functions.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Since DateTime has a large number of functions, all of the possible functions are not displayed. You can use <code class="language-plaintext highlighter-rouge">&lt;pg-up&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;pg-down&gt;</code> to show all the functions.</p> <p>To get help on any individual function you can use <code class="language-plaintext highlighter-rouge">h</code> followed by the function name (and possibly arity if there are multiple functions with same name but different arity).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-iex-function-help.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This extensive help is available in iex for not only the core Elixir software but any important library that you have a dependency on (Phoenix, Ecto, etc) when you are working on your own project.</p> <p>One last thing is that there is tab completion for finding a module as well. So if I type “D” and <code class="language-plaintext highlighter-rouge">tab</code> then I get Date, DateTime, Dict, Duration, and DynamicSupervisor. This is not only useful for lookup but things like this that save having to type are always welcome if you develop software for a living.</p> <h2 id="core-elixir-doc">Core Elixir Doc</h2> <p>There is a Documentation page on the main Elixir site at <a href="https://elixir-lang.org/docs.html">docs.html</a>. Elixir is broken into 6 different applications:</p> <ul> <li>Elixir - standard library</li> <li>EEx - templating library</li> <li>ExUnit - unit test library</li> <li>IEx - interactive shell</li> <li>Logger - built-in Logger</li> <li>Mix - build tool</li> </ul> <p>The page displays links for multiple Elixir versions and indicates what the supported Erlang/OTP versions are for each Elixir version.</p> <p>You can visit the <a href="https://hexdocs.pm/elixir/DateTime.html">DateTime doc</a> and see that the <a href="https://hexdocs.pm/elixir/DateTime.html#convert/2">convert/2 function</a> covered above. Notice that the doc that appears on that page is the same doc that shows up in iex when you ask for help on the function.</p> <h2 id="library-doc-and-hexpm">Library doc and hex.pm</h2> <p>Libraries for both Erlang and Elixir are available via <a href="https://hex.pm/">hex.pm</a>. The same tool that produced the Elixir core library documentation is used by library authors (ex_doc). The library used to generate doc - ex_doc - is also going to be in hex.pm.</p> <p>Let’s examine a fundamental Elixir library - <a href="https://hex.pm/packages/plug">plug</a>. This is the basis for how the Phoenix web framework works. If you search for plug in hex.pm you can navigate to its page. You’ll see a lot of information on this main page.</p> <ul> <li>Links <ul> <li>Online documentation (library documentation). Next to this link is a little image that lets you download all the library doc to your local system as a .tar.gz file.</li> <li>GitHub (where code is actually stored)</li> </ul> </li> <li>Downloads <ul> <li>Displays a graph of how many times the library has been downloaded. It also shows general info for number of downloads in certain time frames (yesterday, last week, all time).</li> </ul> </li> <li>Versions <ul> <li>Each published version is displayed here with the version number, date published and links to the documentation for that particular version.</li> </ul> </li> <li>Dependencies <ul> <li>A library may use other libraries. If so this section lists off what libraries this library is dependent on and what the version is of the required library. Optional dependencies such as libraries used for testing the library not listed. This list is meant to give you an overview of what libraries your deployed code will have if you use the library.</li> </ul> </li> <li>Recent Activity <ul> <li>This shows important recent events for the library.</li> </ul> </li> <li>Config <ul> <li>This section shows you how to install the library for your project. It includes what you’d add to your mix.exs file (or rebar.config/erlang.mk if you are using Erlang)</li> </ul> </li> <li>Checksum <ul> <li>This has the checksum for the library that was published</li> </ul> </li> <li>Build Tools <ul> <li>This lists what is used to build the library. This will be <code class="language-plaintext highlighter-rouge">mix</code> for Elixir libraries or <code class="language-plaintext highlighter-rouge">rebar3</code> for Erlang libraries (ordinarily).</li> </ul> </li> <li>Owners <ul> <li>This shows the list of developers that are the “owners” of the library.</li> </ul> </li> <li>Publisher <ul> <li>This shows the individual who is allowed to publish a new version of the library</li> </ul> </li> <li>Dependants <ul> <li>This shows libraries that are dependent on this library. In the case of the <code class="language-plaintext highlighter-rouge">plug</code> library this is a very long list so the text ends with “…” indicating that there are more available than are listed. You can click on the last library listed and get a paged list of dependencies.</li> </ul> </li> </ul> <p>The <a href="https://hexdocs.pm/plug/readme.html">plug library documentation page</a> looks like this:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-plug_documentation.png?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>There are a few general characteristics of the generated doc that are important to note:</p> <ul> <li>the left hand navigation consists of two tabs: 1) Pages; 2) Modules. The Pages contains various text that supports the library and describes use cases. The Modules tab lists the modules that are documented in the library.</li> <li>if you want to resize the left-hand navigation there is a small widget at the bottom right of the navigation that allows dragging the left hand navigation to widen or narrow it.</li> <li>The search functionality is full-text JS based. Here are some tips: <ul> <li>Multiple words (such as foo bar) are searched as OR</li> <li>Use _ anywhere (such as fo_) as wildcard</li> <li>Use + before a word (such as +foo) to make its presence required</li> <li>Use - before a word (such as -foo) to make its absence required</li> <li>Use : to search on a particular field (such as field:word). The available fields are title, doc and type</li> <li>Use WORD^NUMBER (such as foo^2) to boost the given word</li> <li>Use WORD~NUMBER (such as foo~2) to do a search with edit distance on word</li> </ul> </li> <li>next to the search entry there is a widget that allows you to change the theme (along with a couple of other settings).</li> <li>to the right of module or functions there is a widget <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> that can be clicked on. It brings you to the location in the source code (in GitHub, ordinarily) where the doc occurs. This is quite handy for navigating to source code if you are curious about how something is implemented.</li> </ul> <h2 id="wrap-up">Wrap Up</h2> <p>I was genuinely impressed when I started looking at Elixir back in 2016. It’s clear that there was a set of goals related to documentation when the language was developed. I found the doc quite useful compared to other languages that I was looking at or working with at the time. The images shown are from documentation now (not 2016). Many of the same things were already in place in Elixir back then.</p> <p>I liked the layout (which has improved quite a bit from 2016). I appreciated the organization of the material. If I found any issues in the documentation I was able to get a pull request merged rather quickly (usually in a couple hours).</p> <p>These are all impressions before I tried using the documentation system myself. I’ll write another post covering writing documentation in Elixir.</p>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Exploring functionality available in Elixir Documentation]]></summary></entry><entry><title type="html">Novo Serus S</title><link href="https://fmcgeough.github.io/blog/2024/serus-s/" rel="alternate" type="text/html" title="Novo Serus S"/><published>2024-10-03T10:00:00+00:00</published><updated>2024-10-03T10:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/serus-s</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/serus-s/"><![CDATA[<p>A few years ago I was in <a href="https://righteousguitars.com/">Righteous Guitars</a> in Roswell Georgia. It’s a store that has a bunch of different makers of wonderful guitars. As they note on their website: “We pride ourselves in having the finest instruments around and treat each one with the realization that it is someone’s dream guitar. If you are looking for an instrument that will speak to your creativity and provide a lifetime of enjoyment, the wait is over”.</p> <p>I had heard of <a href="https://www.novoguitars.com/">Novo Guitars</a>. It’s a small team of people building cool guitars in Nashville, Tennessee. They are the only guitars designed and built by Dennis Fano. It was a newer company at that point and Righteous Guitars was working with them, spec’ing out guitars and then selling them (and working with customers to get their orders into Novo).</p> <p>I tried the Novo Serus S they had. This is a strat type instrument. It has locking tuners, great pickups (2 Throbak single coil pickups and a Throbak SE 101 humbucker) in an incredibly light (for an electric guitar) roasted pine body. I ended up buying it. Some pictures of it are below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-03-serus-s-front.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-10-03-serus-s-back.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Novo Serus S </div> <p>I found a short video of me fooling around with it so I figured I’d upload that as well.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/2024-10-03-serus-s.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Novo Serus S </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[My Novo Serus S]]></summary></entry><entry><title type="html">Collings 290</title><link href="https://fmcgeough.github.io/blog/2024/collings-290/" rel="alternate" type="text/html" title="Collings 290"/><published>2024-09-24T19:00:00+00:00</published><updated>2024-09-24T19:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/collings-290</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/collings-290/"><![CDATA[<p>Single cut Collings 290. In aged Pelham Blue w/Throbak 52-54 P90s. Mahogany neck and body. Bought from Music Emporium in Lexington, Massachusetts in 2021. I believe that the Music Emporium is the largest reseller of Collings guitars.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-09-collings-290-front.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-09-collings-290-back.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Colllings 290 front and back </div> <p>This guitar was named for the scenic 290 highway that winds past the Collings shop though the Texas Hill Country, the 290 is a modern day tribute to the original working man’s rock’n roll guitar.</p> <p>Practice session. Random samples. I generally turn on the Voice Memo app on my laptop and let it run and then listen back later to see how messed up I sounded.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2024-09-24-collings290-open-c.mp3?raw=true" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://github.com/fmcgeough/blog_posts/blob/main/audio/2024-09-24-collings290-2.mp3?raw=true" controls=""/> </figure> </div> </div> <div class="caption"> Collings 290 </div>]]></content><author><name></name></author><category term="guitar"/><category term="recording"/><summary type="html"><![CDATA[My Colllings 290]]></summary></entry><entry><title type="html">Elixir And Design Patterns</title><link href="https://fmcgeough.github.io/blog/2024/elixir-and-design-patterns/" rel="alternate" type="text/html" title="Elixir And Design Patterns"/><published>2024-09-22T11:00:00+00:00</published><updated>2024-09-22T11:00:00+00:00</updated><id>https://fmcgeough.github.io/blog/2024/elixir-and-design-patterns</id><content type="html" xml:base="https://fmcgeough.github.io/blog/2024/elixir-and-design-patterns/"><![CDATA[<p>Have you ever wondered about the answers you’ve given when someone asks you “what do you do?”. If you are a software developer you may respond “I write software”. Or if you know your company’s goals you might say “I write software that …insert one of the cooler sounding goals that you are aware of. Its when you are talking to someone else who spends their days editing, compiling, testing, debugging, releasing that you get into actual details. What is it that I do all day?</p> <p>I’m interested in how companies create new software to solve a non-trivial problem. From my perspective there are several factors that contribute to a successful effort to solve it. One question I want to explore and hopefully answer is “is this a new problem or one that has already been solved?”. If its a problem that has already been solved then I want to look at any previous solutions and answer the question: “is there a solution that is well understood as superior to others?”. If there is one that is regarded as superior then I will use it (I’ll also want to know why).</p> <p>Is there a name for this type of thing? That is, a problem and a well understood general solution to the problem? Yes, its called a design pattern. Practically, a design pattern is “when I see problem xyz, I should use code that resembles abc”.</p> <p>Some sources for design patterns are:</p> <ul> <li>a design pattern that your organization has created. This tend to be large structural patterns. For example, your organization may say “if any data needs to be stored it must be stored in a Postgres database” or “if any API is created it must adhere to the best REST API practices and include…”.</li> <li>a design pattern that you have used before successfully to solve other similar problems. After you solve even your first problem you start building an internal mental catalog (if not a library) of what works and what doesn’t.</li> <li>a design pattern created or influenced by the particular language, framework or tool you are using. If you are using Elixir and Phoenix (or other functional languages) then how you construct a solution is going to be different from a solution written in an object-oriented language.</li> <li>a design pattern book or paper that you think fits the problem. You can use a tool like ChatGPT (or similar) to describe the problem that you are trying to solve and ask it to design patterns that may be appropriate.</li> </ul> <p>There has been a lot written about software design patterns. Software design patterns have been the subject of active discussions and numerous books since around 1977. There are two design patterns books that you will see referenced a lot. The first is “The Timeless Way of Building” by Christopher Alexander. Although this is a book about architecture it’s had a big impact on creative thinking in a number of fields. The second book is software-centric. It’s called “Design Patterns: Elements of Reusable Object-Oriented Software” by Erich Gamma, Richard Helm,Ralph Johnson, and John Vlissides (published by Addison-Wesley). These four authors were referred to as the “Gang of Four” (GoF). The book was released in 1994. (there’s all sorts of other books, articles, papers of course but these two are frequently cited).</p> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-09-design-patterns.jpg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>A software design pattern is a description of a well-defined pattern. It is not an implementation that you can just copy/paste into your code. There are plenty of links to implementations for various languages that you can find with a simple search once you find a pattern that looks like it fits the problem you are trying to solve.</p> <p>“Singleton” is an example of a design pattern. In the “Design Patterns” book this is described as “Ensure a class only has one instance, and provide a global point of access to it”.</p> <p>The description of the pattern may include a sample implementation. The “Design Patterns” book was written from a C++ perspective (Java was not released by Sun Microsystems to the world until 1995 - the year after the GoF book was published). So examples in that book are using C++. It’s much more likely that you’ll see Java example code nowadays.</p> <p>In “Design Patterns” a design pattern has a number of common elements. I’ve listed them below. As mentioned the GoF book was written from the perspective of a C++ developer. This means that a number of the common elements are specific to object-oriented software. However, if you review this list you can perhaps see that a lot of the concepts can be applied to functional programs as well. The book is well worth reviewing even if you program entirely in a functional language.</p> <ul> <li>clear name - a description name that allows developers to use the term when discussing how it should or could be used in the software they are working on.</li> <li>context - from the GoF book the defined contexts are: creational, structural and behavioral.</li> <li>intent - what problem is this pattern solving? what are its goals?</li> <li>motivation - sometimes referred to as forces. Using a design pattern arises out of addressing common problems encountered when building systems. This explains why and when the pattern is ordinarily applied.</li> <li>applicability - a continuation of motivation but with an emphasis on the situations where the pattern is going to be the most effective.</li> <li>structure - the guts of the pattern. This may include class or interactive diagrams. <ul> <li>participants - key classes and objects in the pattern and what role they have in the pattern.</li> <li>collaborations - how the classes and objects interact</li> </ul> </li> <li>consequences - a discussion of the benefits and drawbacks to using the pattern.</li> <li>implementation - a concrete implementation may be provided in a particular language.</li> <li>known uses - description of any “real life” uses of the pattern that already exist</li> <li>related patterns - list of other patterns that this pattern may rely on or that may rely on this pattern.</li> </ul> <p>Pattern discussions led to the development of the <a href="https://c2.com/ppr/titles.html">Portland Pattern Repository</a>. This used the WikiWikiWeb (this was the first user editable website - wiki - created by Ward Cunningham in 1995) to gather documentation on understood patterns. The Hillside Group also gathered patterns together in their own <a href="https://hillside.net/patterns/patterns-catalog">pattern catalog</a>. There are numerous other pattern resources around the Internet and a number of other books that I’d recommend:</p> <ul> <li>“Refactoring: Improving the Design of Existing Code” by Martin Fowler</li> <li>“Domain-Driven Design: Tackling Complexity in the Heart of Software” by Eric Evans</li> <li>“Head First Design Patterns” by Eric Freeman and Bert Bates</li> <li>“The Art of Software Security Assessment” by Mark Dowd, John McDonald, and Justin Schuh</li> </ul> <p>Once the idea of patterns became widely accepted the concept of an anti-pattern arose. An anti-pattern in software engineering, project management, and business processes is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive. In software the first use of the term seemed to be in 1995 by computer programmer Andrew Koenig. It seemed to get its first big public boost with the publication of the book Anti Patterns by The “Upstart Gang of Four”: William Brown, Raphael Malveau, Skip McCormick, and Tom Mowbray.</p> <figure> <picture> <img src="https://github.com/fmcgeough/blog_posts/blob/main/img/2024-09-antipatterns_book.jpeg?raw=true" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>All of this is great and there is a lot of material to read and videos to watch on YouTube that can make you a better engineer and help you get better at problem solving and create better solutions. However, the bulk of it (almost all) is written from an object-oriented perspective (first C+++ and then Java). Translations of the patterns to other object-oriented languages (like Ruby) are pretty straightforward. That’s not the case for a functional language like Elixir. I think functional programming does eliminate or greatly simplify a number of design patterns. So, are design patterns necessary for functional programming languages?</p> <p>For me the answer is yes. If nothing else it helps to talk about the solution you are working on in a general way. For example, you may have state that you want to store in your application that should be stored as a “Singleton” Design pattern. The way you’d approach creating a singleton would be quite different from the same thing created in Java but the concept is the same. Someone with a background in design patterns can understand what it is you are describing and why you chose to use this pattern. There are also patterns that you are sure to use. For example, if you have an application that calls an API you may need a “Circuit Breaker” pattern. To protect your API you may want to utilize a “Throttle” pattern.</p> <p>What resources on design patterns are available for an Elixir developer? It’s a bit frustrating for people new to Elixir or functional programming in general. If you do a search in Github for “Design Patterns Java” you get 17.6k results. Do that same search for Elixir and you get 11.</p> <p>Recently, more work is in process to explain the role of design patterns in Elixir. For example, a section on Antipatterns was added to the standard Elixir documentation. <a href="https://hexdocs.pm/elixir/main/code-anti-patterns.html">Anti Patterns</a>. There is a book called <a href="https://elixirpatterns.dev/">Elixir Patterns</a> that is in development and will be released soon. José Valim gave a talk at ElixirConf EU 2024 on design patterns. Hopefully all of this work continues and accelerates. Here are some other links that may be useful.</p> <ul> <li><a href="https://pragprog.com/titles/swdddf/domain-modeling-made-functional/">Design Modeling Made Functional</a></li> <li><a href="https://www.youtube.com/watch?v=agkXUp0hCW8">Gang of None</a></li> <li><a href="https://fsharpforfunandprofit.com/fppatterns/">Functional Programming Design Patterns</a></li> <li><a href="https://arxiv.org/pdf/2307.07069">Typed Design Patterns for the Functional Era</a></li> </ul>]]></content><author><name></name></author><category term="elixir"/><summary type="html"><![CDATA[Elixir and using Design Patterns]]></summary></entry></feed>